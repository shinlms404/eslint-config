// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`define 1`] = `
[
  {
    "ignores": [
      "**/node_modules",
      "**/dist",
      "**/package-lock.json",
      "**/yarn.lock",
      "**/pnpm-lock.yaml",
      "**/bun.lockb",
      "**/output",
      "**/coverage",
      "**/temp",
      "**/fixtures",
      "**/.vitepress/cache",
      "**/.nuxt",
      "**/.vercel",
      "**/.changeset",
      "**/.idea",
      "**/.output",
      "**/.vite-inspect",
      "**/CHANGELOG*.md",
      "**/*.min.*",
      "**/LICENSE*",
      "**/__snapshots__",
      "**/auto-import?(s).d.ts",
      "**/components.d.ts",
      "package.json",
    ],
  },
  {
    "plugins": {
      "import": {
        "configs": {
          "electron": {
            "settings": {
              "import/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": 2,
              "import/export": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/no-unresolved": 2,
            },
          },
          "react": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "settings": {
              "import/extensions": [
                ".js",
                ".jsx",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": "error",
              "import/export": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/no-duplicates": "warn",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-unresolved": "error",
            },
          },
          "stage-0": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-deprecated": 1,
            },
          },
          "typescript": {
            "rules": {
              "import/named": "off",
            },
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".cts",
                  ".mts",
                  ".tsx",
                ],
              },
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".jsx",
                  ],
                },
              },
            },
          },
          "warnings": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-duplicates": 1,
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
            },
          },
        },
        "rules": {
          "consistent-type-specifier-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce or ban the use of inline type-only markers for named imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/consistent-type-specifier-style.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "default": "prefer-inline",
                  "enum": [
                    "prefer-inline",
                    "prefer-top-level",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "dynamic-import-chunkname": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/dynamic-import-chunkname.md",
              },
              "schema": [
                {
                  "properties": {
                    "importFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "webpackChunknameFormat": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/export.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "exports-last": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all exports appear after other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/exports-last.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "extensions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure consistent use of file extension within the import path.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/extensions.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "properties": {
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "properties": {
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "first": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "group-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer named exports to be grouped together in a single export declaration",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/group-exports.md",
              },
              "type": "suggestion",
            },
          },
          "imports-first": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Style guide",
                "description": "Replaced by \`import/first\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-dependencies": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce the maximum number of dependencies a module can have.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/max-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreTypeImports": {
                      "type": "boolean",
                    },
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "named": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/named.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/namespace.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComputed": {
                      "default": false,
                      "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "newline-after-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/newline-after-import.md",
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerComments": {
                      "type": "boolean",
                    },
                    "count": {
                      "minimum": 1,
                      "type": "integer",
                    },
                    "exactCount": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-absolute-path": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-absolute-path.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-amd": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid AMD \`require\` and \`define\` calls.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-amd.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid anonymous values as default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-anonymous-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAnonymousClass": {
                      "description": "If \`false\`, will report default export of an anonymous class",
                      "type": "boolean",
                    },
                    "allowAnonymousFunction": {
                      "description": "If \`false\`, will report default export of an anonymous function",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "If \`false\`, will report default export of an array",
                      "type": "boolean",
                    },
                    "allowArrowFunction": {
                      "description": "If \`false\`, will report default export of an arrow function",
                      "type": "boolean",
                    },
                    "allowCallExpression": {
                      "description": "If \`false\`, will report default export of a function call",
                      "type": "boolean",
                    },
                    "allowLiteral": {
                      "description": "If \`false\`, will report default export of a literal",
                      "type": "boolean",
                    },
                    "allowNew": {
                      "description": "If \`false\`, will report default export of a class instantiation",
                      "type": "boolean",
                    },
                    "allowObject": {
                      "description": "If \`false\`, will report default export of an object expression",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-commonjs": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-commonjs.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "allow-primitive-modules",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowConditionalRequire": {
                            "type": "boolean",
                          },
                          "allowPrimitiveModules": {
                            "type": "boolean",
                          },
                          "allowRequire": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-cycle": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-cycle.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowUnsafeDynamicCyclicDependency": {
                      "default": false,
                      "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                      "type": "boolean",
                    },
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreExternal": {
                      "default": false,
                      "description": "ignore external modules",
                      "type": "boolean",
                    },
                    "maxDepth": {
                      "anyOf": [
                        {
                          "description": "maximum dependency depth to traverse",
                          "minimum": 1,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "∞",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-default-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-deprecated.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicates": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-duplicates.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerQueryString": {
                      "type": "boolean",
                    },
                    "prefer-inline": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dynamic-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid \`require()\` calls with expressions.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-dynamic-require.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "esmodule": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-named-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid empty named import blocks.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-empty-named-blocks.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extraneous-dependencies": {
            "Program:exit": [Function],
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-extraneous-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "bundledDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "includeInternal": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "includeTypes": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "packageDir": {
                      "type": [
                        "string",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-import-module-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid import statements with CommonJS module.exports.",
                "recommended": true,
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-internal-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing the submodules of other modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-internal-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allow": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "forbid": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mutable-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-mutable-exports.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-as-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-named-as-default-member": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default-member.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-default.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-namespace.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-nodejs-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid Node.js builtin modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-nodejs-modules.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-packages": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-packages.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-parent-imports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing modules from parent directories.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-relative-parent-imports.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-paths": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Enforce which files can be imported in a given folder.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-restricted-paths.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "basePath": {
                      "type": "string",
                    },
                    "zones": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "except": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "from": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "message": {
                            "type": "string",
                          },
                          "target": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-self-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-self-import.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unassigned-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid unassigned imports",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unassigned-import.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unresolved": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unresolved.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "caseSensitive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "caseSensitiveStrict": {
                      "default": false,
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-unused-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "properties": {
                        "src": {
                          "minItems": 1,
                        },
                        "unusedExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "unusedExports",
                      ],
                    },
                    {
                      "properties": {
                        "missingExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "missingExports",
                      ],
                    },
                  ],
                  "properties": {
                    "ignoreExports": {
                      "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "missingExports": {
                      "description": "report modules without any exports",
                      "type": "boolean",
                    },
                    "src": {
                      "description": "files/paths to be analyzed (only for unused exports)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "unusedExports": {
                      "description": "report exports without any usage",
                      "type": "boolean",
                    },
                  },
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-path-segments": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-useless-path-segments.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                    "noUselessIndex": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-webpack-loader-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-webpack-loader-syntax.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "order": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/order.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alphabetize": {
                      "additionalProperties": false,
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "type": "boolean",
                        },
                        "order": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                        "orderImportKind": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "distinctGroup": {
                      "default": true,
                      "type": "boolean",
                    },
                    "groups": {
                      "type": "array",
                    },
                    "newlines-between": {
                      "enum": [
                        "ignore",
                        "always",
                        "always-and-inside-groups",
                        "never",
                      ],
                    },
                    "pathGroups": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "group": {
                            "enum": [
                              "builtin",
                              "external",
                              "internal",
                              "unknown",
                              "parent",
                              "sibling",
                              "index",
                              "object",
                              "type",
                            ],
                            "type": "string",
                          },
                          "pattern": {
                            "type": "string",
                          },
                          "patternOptions": {
                            "type": "object",
                          },
                          "position": {
                            "enum": [
                              "after",
                              "before",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "pattern",
                          "group",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "pathGroupsExcludedImportTypes": {
                      "type": "array",
                    },
                    "warnOnUnassignedImports": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer a default export if module exports a single name or multiple names.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/prefer-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "default": "single",
                      "enum": [
                        "single",
                        "any",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unambiguous": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/unambiguous.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "import/first": "error",
      "import/no-duplicates": "error",
      "import/no-mutable-exports": "error",
      "import/no-named-default": "error",
      "import/no-self-import": "error",
      "import/no-webpack-loader-syntax": "error",
      "import/order": "error",
    },
  },
  {
    "plugins": {
      "eslint-comments": {
        "configs": {
          "recommended": {
            "plugins": [
              "eslint-comments",
            ],
            "rules": {
              "eslint-comments/disable-enable-pair": "error",
              "eslint-comments/no-aggregating-enable": "error",
              "eslint-comments/no-duplicate-disable": "error",
              "eslint-comments/no-unlimited-disable": "error",
              "eslint-comments/no-unused-enable": "error",
            },
          },
        },
        "default": {
          "configs": {
            "recommended": {
              "plugins": [
                "eslint-comments",
              ],
              "rules": {
                "eslint-comments/disable-enable-pair": "error",
                "eslint-comments/no-aggregating-enable": "error",
                "eslint-comments/no-duplicate-disable": "error",
                "eslint-comments/no-unlimited-disable": "error",
                "eslint-comments/no-unused-enable": "error",
              },
            },
          },
          "rules": {
            "disable-enable-pair": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "require a \`eslint-enable\` comment for every \`eslint-disable\` comment",
                  "recommended": true,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/disable-enable-pair.html",
                },
                "fixable": null,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowWholeFile": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-aggregating-enable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "disallow a \`eslint-enable\` comment for multiple \`eslint-disable\` comments",
                  "recommended": true,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-aggregating-enable.html",
                },
                "fixable": null,
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-duplicate-disable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "disallow duplicate \`eslint-disable\` comments",
                  "recommended": true,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-duplicate-disable.html",
                },
                "fixable": null,
                "schema": [],
                "type": "problem",
              },
            },
            "no-restricted-disable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Stylistic Issues",
                  "description": "disallow \`eslint-disable\` comments about specific rules",
                  "recommended": false,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-restricted-disable.html",
                },
                "fixable": null,
                "schema": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-unlimited-disable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "disallow \`eslint-disable\` comments without rule names",
                  "recommended": true,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unlimited-disable.html",
                },
                "fixable": null,
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unused-disable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "disallow unused \`eslint-disable\` comments",
                  "recommended": false,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unused-disable.html",
                },
                "fixable": null,
                "schema": [],
                "type": "problem",
              },
            },
            "no-unused-enable": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "disallow unused \`eslint-enable\` comments",
                  "recommended": true,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-unused-enable.html",
                },
                "fixable": null,
                "schema": [],
                "type": "problem",
              },
            },
            "no-use": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Stylistic Issues",
                  "description": "disallow ESLint directive-comments",
                  "recommended": false,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/no-use.html",
                },
                "fixable": null,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "eslint",
                            "eslint-disable",
                            "eslint-disable-line",
                            "eslint-disable-next-line",
                            "eslint-enable",
                            "eslint-env",
                            "exported",
                            "global",
                            "globals",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "require-description": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Stylistic Issues",
                  "description": "require include descriptions in ESLint directive-comments",
                  "recommended": false,
                  "url": "https://mysticatea.github.io/eslint-plugin-eslint-comments/rules/require-description.html",
                },
                "fixable": null,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignore": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "eslint",
                            "eslint-disable",
                            "eslint-disable-line",
                            "eslint-disable-next-line",
                            "eslint-enable",
                            "eslint-env",
                            "exported",
                            "global",
                            "globals",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
          },
          "utils": {
            "patch": [Function],
          },
        },
      },
    },
    "rules": {
      "eslint-comments/no-aggregating-enable": "error",
      "eslint-comments/no-duplicate-disable": "error",
      "eslint-comments/no-unlimited-disable": "error",
      "eslint-comments/no-unused-enable": "error",
    },
  },
  {
    "files": [
      "**/*.json",
      "**/*.json5",
      "**/*.jsonc",
    ],
    "languageOptions": {
      "parser": {
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSONArrayExpression": [
            "elements",
          ],
          "JSONBinaryExpression": [
            "left",
            "right",
          ],
          "JSONExpressionStatement": [
            "expression",
          ],
          "JSONIdentifier": [],
          "JSONLiteral": [],
          "JSONObjectExpression": [
            "properties",
          ],
          "JSONProperty": [
            "key",
            "value",
          ],
          "JSONTemplateElement": [],
          "JSONTemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "JSONUnaryExpression": [
            "argument",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticJSONValue": [Function],
        "isExpression": [Function],
        "isNumberIdentifier": [Function],
        "isUndefinedIdentifier": [Function],
        "meta": {
          "name": "jsonc-eslint-parser",
          "version": "2.4.0",
        },
        "name": "jsonc-eslint-parser",
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "traverseNodes": [Function],
      },
    },
    "plugins": {
      "jsonc": {
        "configs": {
          "all": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "error",
              "jsonc/array-bracket-spacing": "error",
              "jsonc/array-element-newline": "error",
              "jsonc/auto": "error",
              "jsonc/comma-dangle": "error",
              "jsonc/comma-style": "error",
              "jsonc/indent": "error",
              "jsonc/key-name-casing": "error",
              "jsonc/key-spacing": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-irregular-whitespace": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-escape": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/object-curly-newline": "error",
              "jsonc/object-curly-spacing": "error",
              "jsonc/object-property-newline": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/sort-keys": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "auto-config": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/auto": "error",
            },
          },
          "base": {
            "overrides": [
              {
                "files": [
                  "*.json",
                  "*.json5",
                  "*.jsonc",
                ],
                "parser": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\jsonc-eslint-parser@2.4.0\\node_modules\\jsonc-eslint-parser\\lib\\index.js",
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "plugins": [
              "jsonc",
            ],
          },
          "prettier": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "off",
              "jsonc/array-bracket-spacing": "off",
              "jsonc/array-element-newline": "off",
              "jsonc/comma-dangle": "off",
              "jsonc/comma-style": "off",
              "jsonc/indent": "off",
              "jsonc/key-spacing": "off",
              "jsonc/no-floating-decimal": "off",
              "jsonc/object-curly-newline": "off",
              "jsonc/object-curly-spacing": "off",
              "jsonc/object-property-newline": "off",
              "jsonc/quote-props": "off",
              "jsonc/quotes": "off",
              "jsonc/space-unary-ops": "off",
            },
          },
          "recommended-with-json": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/comma-dangle": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-json5": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-jsonc": {
            "extends": [
              "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "default": {
          "configs": {
            "all": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "auto-config": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/auto": "error",
              },
            },
            "base": {
              "overrides": [
                {
                  "files": [
                    "*.json",
                    "*.json5",
                    "*.jsonc",
                  ],
                  "parser": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\jsonc-eslint-parser@2.4.0\\node_modules\\jsonc-eslint-parser\\lib\\index.js",
                  "rules": {
                    "no-unused-expressions": "off",
                    "no-unused-vars": "off",
                    "strict": "off",
                  },
                },
              ],
              "plugins": [
                "jsonc",
              ],
            },
            "prettier": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
            "recommended-with-json": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-json5": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-jsonc": {
              "extends": [
                "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-jsonc@2.11.2_eslint@8.56.0\\node_modules\\eslint-plugin-jsonc\\dist\\configs\\base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          },
          "getStaticJSONValue": [Function],
          "meta": {
            "name": "eslint-plugin-jsonc",
            "version": "2.11.2",
          },
          "parseForESLint": [Function],
          "parseJSON": [Function],
          "rules": {
            "array-bracket-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks after opening and before closing array brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingClosingLinebreak": "A linebreak is required before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-newline",
                  "ruleName": "array-bracket-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "array-bracket-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow or enforce spaces inside of brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInArrays": {
                          "type": "boolean",
                        },
                        "objectsInArrays": {
                          "type": "boolean",
                        },
                        "singleValue": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-spacing",
                  "ruleName": "array-bracket-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "array-element-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks between array elements",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingLineBreak": "There should be a linebreak after this element.",
                    "unexpectedLineBreak": "There should be no linebreak here.",
                  },
                  "schema": {
                    "definitions": {
                      "basicConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                              "consistent",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "minItems": {
                                "minimum": 0,
                                "type": [
                                  "integer",
                                  "null",
                                ],
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "ArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "ArrayPattern": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "JSONArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-element-newline",
                  "ruleName": "array-element-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "auto": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "apply jsonc rules similar to your configured ESLint core rules",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {},
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/auto",
                  "ruleName": "auto",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require or disallow trailing commas",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "missing": "Missing trailing comma.",
                    "unexpected": "Unexpected trailing comma.",
                  },
                  "schema": {
                    "additionalItems": false,
                    "definitions": {
                      "value": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                      "valueWithIgnore": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "ignore",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/value",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "arrays": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "exports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "functions": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "imports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "objects": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/comma-dangle",
                  "ruleName": "comma-dangle",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-style": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent comma style",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last.",
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "first",
                        "last",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "exceptions": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/comma-style",
                  "ruleName": "comma-style",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "indent": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent indentation",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "tab",
                          ],
                          "type": "string",
                        },
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "ArrayExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "CallExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "arguments": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionDeclaration": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "MemberExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "StaticBlock": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                        "SwitchCase": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "VariableDeclarator": {
                          "oneOf": [
                            {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "const": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "let": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "var": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "flatTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoreComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoredNodes": {
                          "items": {
                            "not": {
                              "pattern": ":exit$",
                            },
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "offsetTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "outerIIFEBody": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/indent",
                  "ruleName": "indent",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "key-name-casing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce naming convention to property key names",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "messages": {
                    "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "PascalCase": {
                          "default": false,
                          "type": "boolean",
                        },
                        "SCREAMING_SNAKE_CASE": {
                          "default": false,
                          "type": "boolean",
                        },
                        "camelCase": {
                          "default": true,
                          "type": "boolean",
                        },
                        "ignores": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "kebab-case": {
                          "default": false,
                          "type": "boolean",
                        },
                        "snake_case": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/key-name-casing",
                  "ruleName": "key-name-casing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "key-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing between keys and values in object literal properties",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                  },
                  "schema": [
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "align": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "afterColon": {
                                          "type": "boolean",
                                        },
                                        "beforeColon": {
                                          "type": "boolean",
                                        },
                                        "mode": {
                                          "enum": [
                                            "strict",
                                            "minimum",
                                          ],
                                          "type": "string",
                                        },
                                        "on": {
                                          "enum": [
                                            "colon",
                                            "value",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "align": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/key-spacing",
                  "ruleName": "key-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "no-bigint-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow BigInt literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "BigInt literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-bigint-literals",
                  "ruleName": "no-bigint-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-expression": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "The binary expressions are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-expression",
                  "ruleName": "no-binary-expression",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Binary numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-numeric-literals",
                  "ruleName": "no-binary-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-comments": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow comments",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                    ],
                  },
                  "messages": {
                    "unexpected": "Unexpected comment.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/no-comments",
                  "ruleName": "no-comments",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-dupe-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow duplicate keys in object literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpected": "Duplicate key '{{name}}'.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-dupe-keys",
                  "ruleName": "no-dupe-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-escape-sequence-in-identifier": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow escape sequences in identifiers.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Escape sequence in identifiers should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-escape-sequence-in-identifier",
                  "ruleName": "no-escape-sequence-in-identifier",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-floating-decimal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow leading or trailing decimal points in numeric literals",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": undefined,
                  "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-floating-decimal",
                  "ruleName": "no-floating-decimal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-hexadecimal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow hexadecimal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Hexadecimal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                  "ruleName": "no-hexadecimal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-infinity": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Infinity",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "Infinity should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-infinity",
                  "ruleName": "no-infinity",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-irregular-whitespace": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow irregular whitespace",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noIrregularWhitespace": "Irregular whitespace not allowed.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "skipComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipJSXText": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipRegExps": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipStrings": {
                          "default": true,
                          "type": "boolean",
                        },
                        "skipTemplates": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-irregular-whitespace",
                  "ruleName": "no-irregular-whitespace",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "default": true,
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-multi-str": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow multiline strings",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "multilineString": "Multiline support is limited to JSON5 only.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-multi-str",
                  "ruleName": "no-multi-str",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-nan": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow NaN",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "NaN should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-nan",
                  "ruleName": "no-nan",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-number-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow number property keys",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The number property keys are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-number-props",
                  "ruleName": "no-number-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-numeric-separators": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow numeric separators",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "Numeric separators are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-numeric-separators",
                  "ruleName": "no-numeric-separators",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-octal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow legacy octal literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noOctal": "Octal literals should not be used.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal",
                  "ruleName": "no-octal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal escape sequences in string literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-octal-escape",
                  "ruleName": "no-octal-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Octal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal-numeric-literals",
                  "ruleName": "no-octal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-parenthesized": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parentheses around the expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "Parentheses around expression should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-parenthesized",
                  "ruleName": "no-parenthesized",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-plus-sign": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow plus sign",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Plus sign should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-plus-sign",
                  "ruleName": "no-plus-sign",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-regexp-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow RegExp literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "RegExp literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-regexp-literals",
                  "ruleName": "no-regexp-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-sparse-arrays": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow sparse arrays",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-sparse-arrays",
                  "ruleName": "no-sparse-arrays",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-template-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow template literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The template literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-template-literals",
                  "ruleName": "no-template-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-undefined-value": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow \`undefined\`",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "\`undefined\` is not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-undefined-value",
                  "ruleName": "no-undefined-value",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unicode-codepoint-escapes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Unicode code point escape sequences.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Unicode code point escape sequence should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-unicode-codepoint-escapes",
                  "ruleName": "no-unicode-codepoint-escapes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow unnecessary escape usage",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": true,
                  "messages": {
                    "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                    "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                    "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                    "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-useless-escape",
                  "ruleName": "no-useless-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "object-curly-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent line breaks inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ExportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ImportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectExpression": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectPattern": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-newline",
                  "ruleName": "object-curly-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInObjects": {
                          "type": "boolean",
                        },
                        "objectsInObjects": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-spacing",
                  "ruleName": "object-curly-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-property-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce placing object properties on separate lines",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "propertiesOnNewline": "Object properties must go on a new line.",
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowAllPropertiesOnSameLine": {
                          "default": false,
                          "type": "boolean",
                        },
                        "allowMultiplePropertiesPerLine": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-property-newline",
                  "ruleName": "object-property-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "quote-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require quotes around object literal property names",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                  },
                  "schema": {
                    "anyOf": [
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                        ],
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                      },
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "keywords": {
                                "type": "boolean",
                              },
                              "numbers": {
                                "type": "boolean",
                              },
                              "unnecessary": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "maxItems": 2,
                        "minItems": 0,
                        "type": "array",
                      },
                    ],
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quote-props",
                  "ruleName": "quote-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "quotes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce use of double or single quotes",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "wrongQuotes": "Strings must use {{description}}.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "single",
                        "double",
                        "backtick",
                      ],
                      "type": "string",
                    },
                    {
                      "anyOf": [
                        {
                          "enum": [
                            "avoid-escape",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowTemplateLiterals": {
                              "type": "boolean",
                            },
                            "avoidEscape": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quotes",
                  "ruleName": "quotes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "sort-array-values": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require array values to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                  },
                  "schema": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "minValues": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                      "valuePattern": {
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-array-values",
                  "ruleName": "sort-array-values",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "sort-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require object keys to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                  },
                  "schema": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "hasProperties": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "order": {
                              "oneOf": [
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "keyPattern": {
                                            "type": "string",
                                          },
                                          "order": {
                                            "additionalProperties": false,
                                            "properties": {
                                              "caseSensitive": {
                                                "type": "boolean",
                                              },
                                              "natural": {
                                                "type": "boolean",
                                              },
                                              "type": {
                                                "enum": [
                                                  "asc",
                                                  "desc",
                                                ],
                                              },
                                            },
                                            "type": "object",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "natural": {
                                      "type": "boolean",
                                    },
                                    "type": {
                                      "enum": [
                                        "asc",
                                        "desc",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "pathPattern": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "pathPattern",
                            "order",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                      {
                        "additionalItems": false,
                        "items": [
                          {
                            "enum": [
                              "asc",
                              "desc",
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowLineSeparatedGroups": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "minKeys": {
                                "minimum": 2,
                                "type": "integer",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    ],
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-keys",
                  "ruleName": "sort-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "space-unary-ops": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow spaces after unary operators",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonwords": {
                          "default": false,
                          "type": "boolean",
                        },
                        "overrides": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                        "words": {
                          "default": true,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/space-unary-ops",
                  "ruleName": "space-unary-ops",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "valid-json-number": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow invalid number for JSON",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "invalid": "Invalid number for JSON.",
                    "invalidBinary": "Binary literals are not allowed in JSON.",
                    "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                    "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                    "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                    "invalidOctal": "Octal literals are not allowed in JSON.",
                    "invalidPlus": "Plus signs are not allowed in JSON.",
                    "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                    "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/valid-json-number",
                  "ruleName": "valid-json-number",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "vue-custom-block/no-parsing-error": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parsing errors in Vue custom blocks",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "json5",
                      "jsonc",
                    ],
                  },
                  "messages": {},
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                  "ruleName": "vue-custom-block/no-parsing-error",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
          },
          "traverseNodes": [Function],
        },
        "getStaticJSONValue": [Function],
        "meta": {
          "name": "eslint-plugin-jsonc",
          "version": "2.11.2",
        },
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks after opening and before closing array brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-newline",
                "ruleName": "array-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow or enforce spaces inside of brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-spacing",
                "ruleName": "array-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks between array elements",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-element-newline",
                "ruleName": "array-element-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "JSONArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "auto": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "apply jsonc rules similar to your configured ESLint core rules",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/auto",
                "ruleName": "auto",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
              },
              "fixable": "code",
              "messages": {},
              "schema": [],
              "type": "suggestion",
            },
          },
          "comma-dangle": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require or disallow trailing commas",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/comma-dangle",
                "ruleName": "comma-dangle",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
              },
              "fixable": "code",
              "messages": {
                "missing": "Missing trailing comma.",
                "unexpected": "Unexpected trailing comma.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "value": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                  "valueWithIgnore": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "ignore",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/value",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "arrays": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "exports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "functions": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "imports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "objects": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent comma style",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/comma-style",
                "ruleName": "comma-style",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent indentation",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "CallExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionDeclaration": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "StaticBlock": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    "SwitchCase": {
                      "default": 0,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "const": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "var": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "flatTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoredNodes": {
                      "items": {
                        "not": {
                          "pattern": ":exit$",
                        },
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "offsetTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce naming convention to property key names",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing between keys and values in object literal properties",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-bigint-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow BigInt literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-bigint-literals",
                "ruleName": "no-bigint-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
              },
              "messages": {
                "unexpected": "BigInt literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-expression": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-expression",
                "ruleName": "no-binary-expression",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "The binary expressions are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-numeric-literals",
                "ruleName": "no-binary-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Binary numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-comments": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow comments",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/no-comments",
                "ruleName": "no-comments",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
              },
              "messages": {
                "unexpected": "Unexpected comment.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-dupe-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow duplicate keys in object literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-dupe-keys",
                "ruleName": "no-dupe-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate key '{{name}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-escape-sequence-in-identifier": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow escape sequences in identifiers.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-escape-sequence-in-identifier",
                "ruleName": "no-escape-sequence-in-identifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Escape sequence in identifiers should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-floating-decimal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow leading or trailing decimal points in numeric literals",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-floating-decimal",
                "ruleName": "no-floating-decimal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hexadecimal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow hexadecimal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                "ruleName": "no-hexadecimal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Hexadecimal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-infinity": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Infinity",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-infinity",
                "ruleName": "no-infinity",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
              },
              "messages": {
                "disallow": "Infinity should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "default": true,
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow irregular whitespace",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noIrregularWhitespace": "Irregular whitespace not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipJSXText": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipRegExps": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipStrings": {
                      "default": true,
                      "type": "boolean",
                    },
                    "skipTemplates": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multi-str": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow multiline strings",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-multi-str",
                "ruleName": "no-multi-str",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "multilineString": "Multiline support is limited to JSON5 only.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-nan": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow NaN",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-nan",
                "ruleName": "no-nan",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
              },
              "messages": {
                "disallow": "NaN should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-number-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow number property keys",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-number-props",
                "ruleName": "no-number-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The number property keys are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-numeric-separators": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow numeric separators",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-numeric-separators",
                "ruleName": "no-numeric-separators",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Numeric separators are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-octal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow legacy octal literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noOctal": "Octal literals should not be used.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal escape sequences in string literals",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-octal-escape",
                "ruleName": "no-octal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal-numeric-literals",
                "ruleName": "no-octal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Octal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-parenthesized": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parentheses around the expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-parenthesized",
                "ruleName": "no-parenthesized",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "Parentheses around expression should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-plus-sign": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow plus sign",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-plus-sign",
                "ruleName": "no-plus-sign",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Plus sign should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-regexp-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow RegExp literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-regexp-literals",
                "ruleName": "no-regexp-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
              },
              "messages": {
                "unexpected": "RegExp literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-sparse-arrays": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow sparse arrays",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-sparse-arrays",
                "ruleName": "no-sparse-arrays",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedSparseArray": "Unexpected comma in middle of array.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-template-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow template literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-template-literals",
                "ruleName": "no-template-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The template literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-undefined-value": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow \`undefined\`",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-undefined-value",
                "ruleName": "no-undefined-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
              },
              "messages": {
                "unexpected": "\`undefined\` is not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unicode-codepoint-escapes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Unicode code point escape sequences.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-unicode-codepoint-escapes",
                "ruleName": "no-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Unicode code point escape sequence should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow unnecessary escape usage",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": true,
              "messages": {
                "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "object-curly-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-newline",
                "ruleName": "object-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "consistent": {
                              "type": "boolean",
                            },
                            "minProperties": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-spacing",
                "ruleName": "object-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-property-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce placing object properties on separate lines",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-property-newline",
                "ruleName": "object-property-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewline": "Object properties must go on a new line.",
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowMultiplePropertiesPerLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quote-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require quotes around object literal property names",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quote-props",
                "ruleName": "quote-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
              },
              "fixable": "code",
              "messages": {
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "keywords": {
                            "type": "boolean",
                          },
                          "numbers": {
                            "type": "boolean",
                          },
                          "unnecessary": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce use of double or single quotes",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "single",
                    "double",
                    "backtick",
                  ],
                  "type": "string",
                },
                {
                  "anyOf": [
                    {
                      "enum": [
                        "avoid-escape",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowTemplateLiterals": {
                          "type": "boolean",
                        },
                        "avoidEscape": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "sort-array-values": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require array values to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-array-values",
                "ruleName": "sort-array-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require object keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "space-unary-ops": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow spaces after unary operators",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/space-unary-ops",
                "ruleName": "space-unary-ops",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
              },
              "fixable": "whitespace",
              "messages": {
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonwords": {
                      "default": false,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                    "words": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "valid-json-number": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow invalid number for JSON",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/valid-json-number",
                "ruleName": "valid-json-number",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
              },
              "fixable": "code",
              "messages": {
                "invalid": "Invalid number for JSON.",
                "invalidBinary": "Binary literals are not allowed in JSON.",
                "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                "invalidOctal": "Octal literals are not allowed in JSON.",
                "invalidPlus": "Plus signs are not allowed in JSON.",
                "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "json5",
                  "jsonc",
                ],
                "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
        "traverseNodes": [Function],
      },
    },
    "rules": {
      "jsonc/no-bigint-literals": "error",
      "jsonc/no-binary-expression": "error",
      "jsonc/no-binary-numeric-literals": "error",
      "jsonc/no-dupe-keys": "error",
      "jsonc/no-escape-sequence-in-identifier": "error",
      "jsonc/no-floating-decimal": "error",
      "jsonc/no-hexadecimal-numeric-literals": "error",
      "jsonc/no-infinity": "error",
      "jsonc/no-multi-str": "error",
      "jsonc/no-nan": "error",
      "jsonc/no-number-props": "error",
      "jsonc/no-numeric-separators": "error",
      "jsonc/no-octal": "error",
      "jsonc/no-octal-numeric-literals": "error",
      "jsonc/no-parenthesized": "error",
      "jsonc/no-plus-sign": "error",
      "jsonc/no-regexp-literals": "error",
      "jsonc/no-sparse-arrays": "error",
      "jsonc/no-template-literals": "error",
      "jsonc/no-undefined-value": "error",
      "jsonc/no-unicode-codepoint-escapes": "error",
      "jsonc/no-useless-escape": "error",
      "jsonc/quote-props": "error",
      "jsonc/quotes": "error",
      "jsonc/space-unary-ops": "error",
      "jsonc/valid-json-number": "error",
      "jsonc/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "plugins": {
      "prettier": {
        "default": {
          "configs": {
            "recommended": {
              "extends": [
                "prettier",
              ],
              "plugins": [
                "prettier",
              ],
              "rules": {
                "arrow-body-style": "off",
                "prefer-arrow-callback": "off",
                "prettier/prettier": "error",
              },
            },
          },
          "meta": {
            "name": "eslint-plugin-prettier",
            "version": "5.1.3",
          },
          "rules": {
            "prettier": {
              "create": [Function],
              "meta": {
                "docs": {
                  "url": "https://github.com/prettier/eslint-plugin-prettier#options",
                },
                "fixable": "code",
                "messages": {
                  "delete": "Delete \`{{ deleteText }}\`",
                  "insert": "Insert \`{{ insertText }}\`",
                  "replace": "Replace \`{{ deleteText }}\` with \`{{ insertText }}\`",
                },
                "schema": [
                  {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  {
                    "additionalProperties": true,
                    "properties": {
                      "fileInfoOptions": {
                        "additionalProperties": true,
                        "properties": {},
                        "type": "object",
                      },
                      "usePrettierrc": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
          },
        },
      },
    },
    "rules": {
      "@babel/object-curly-spacing": "off",
      "@babel/semi": "off",
      "@typescript-eslint/block-spacing": "off",
      "@typescript-eslint/brace-style": "off",
      "@typescript-eslint/comma-dangle": "off",
      "@typescript-eslint/comma-spacing": "off",
      "@typescript-eslint/func-call-spacing": "off",
      "@typescript-eslint/indent": "off",
      "@typescript-eslint/key-spacing": "off",
      "@typescript-eslint/keyword-spacing": "off",
      "@typescript-eslint/lines-around-comment": 0,
      "@typescript-eslint/member-delimiter-style": "off",
      "@typescript-eslint/no-extra-parens": "off",
      "@typescript-eslint/no-extra-semi": "off",
      "@typescript-eslint/object-curly-spacing": "off",
      "@typescript-eslint/quotes": 0,
      "@typescript-eslint/semi": "off",
      "@typescript-eslint/space-before-blocks": "off",
      "@typescript-eslint/space-before-function-paren": "off",
      "@typescript-eslint/space-infix-ops": "off",
      "@typescript-eslint/type-annotation-spacing": "off",
      "array-bracket-newline": "off",
      "array-bracket-spacing": "off",
      "array-element-newline": "off",
      "arrow-body-style": "off",
      "arrow-parens": "off",
      "arrow-spacing": "off",
      "babel/object-curly-spacing": "off",
      "babel/quotes": 0,
      "babel/semi": "off",
      "block-spacing": "off",
      "brace-style": "off",
      "comma-dangle": "off",
      "comma-spacing": "off",
      "comma-style": "off",
      "computed-property-spacing": "off",
      "curly": 0,
      "dot-location": "off",
      "eol-last": "off",
      "flowtype/boolean-style": "off",
      "flowtype/delimiter-dangle": "off",
      "flowtype/generic-spacing": "off",
      "flowtype/object-type-curly-spacing": "off",
      "flowtype/object-type-delimiter": "off",
      "flowtype/quotes": "off",
      "flowtype/semi": "off",
      "flowtype/space-after-type-colon": "off",
      "flowtype/space-before-generic-bracket": "off",
      "flowtype/space-before-type-colon": "off",
      "flowtype/union-intersection-spacing": "off",
      "func-call-spacing": "off",
      "function-call-argument-newline": "off",
      "function-paren-newline": "off",
      "generator-star": "off",
      "generator-star-spacing": "off",
      "implicit-arrow-linebreak": "off",
      "indent": "off",
      "indent-legacy": "off",
      "jsx-quotes": "off",
      "key-spacing": "off",
      "keyword-spacing": "off",
      "linebreak-style": "off",
      "lines-around-comment": 0,
      "max-len": 0,
      "max-statements-per-line": "off",
      "multiline-ternary": "off",
      "new-parens": "off",
      "newline-per-chained-call": "off",
      "no-arrow-condition": "off",
      "no-comma-dangle": "off",
      "no-confusing-arrow": 0,
      "no-extra-parens": "off",
      "no-extra-semi": "off",
      "no-floating-decimal": "off",
      "no-mixed-operators": 0,
      "no-mixed-spaces-and-tabs": "off",
      "no-multi-spaces": "off",
      "no-multiple-empty-lines": "off",
      "no-reserved-keys": "off",
      "no-space-before-semi": "off",
      "no-spaced-func": "off",
      "no-tabs": 0,
      "no-trailing-spaces": "off",
      "no-unexpected-multiline": 0,
      "no-whitespace-before-property": "off",
      "no-wrap-func": "off",
      "nonblock-statement-body-position": "off",
      "object-curly-newline": "off",
      "object-curly-spacing": "off",
      "object-property-newline": "off",
      "one-var-declaration-per-line": "off",
      "operator-linebreak": "off",
      "padded-blocks": "off",
      "prefer-arrow-callback": "off",
      "prettier/prettier": "warn",
      "quote-props": "off",
      "quotes": 0,
      "react/jsx-child-element-spacing": "off",
      "react/jsx-closing-bracket-location": "off",
      "react/jsx-closing-tag-location": "off",
      "react/jsx-curly-newline": "off",
      "react/jsx-curly-spacing": "off",
      "react/jsx-equals-spacing": "off",
      "react/jsx-first-prop-new-line": "off",
      "react/jsx-indent": "off",
      "react/jsx-indent-props": "off",
      "react/jsx-max-props-per-line": "off",
      "react/jsx-newline": "off",
      "react/jsx-one-expression-per-line": "off",
      "react/jsx-props-no-multi-spaces": "off",
      "react/jsx-space-before-closing": "off",
      "react/jsx-tag-spacing": "off",
      "react/jsx-wrap-multilines": "off",
      "rest-spread-spacing": "off",
      "semi": "off",
      "semi-spacing": "off",
      "semi-style": "off",
      "space-after-function-name": "off",
      "space-after-keywords": "off",
      "space-before-blocks": "off",
      "space-before-function-paren": "off",
      "space-before-function-parentheses": "off",
      "space-before-keywords": "off",
      "space-in-brackets": "off",
      "space-in-parens": "off",
      "space-infix-ops": "off",
      "space-return-throw-case": "off",
      "space-unary-ops": "off",
      "space-unary-word-ops": "off",
      "standard/array-bracket-even-spacing": "off",
      "standard/computed-property-even-spacing": "off",
      "standard/object-curly-even-spacing": "off",
      "switch-colon-spacing": "off",
      "template-curly-spacing": "off",
      "template-tag-spacing": "off",
      "unicorn/empty-brace-spaces": "off",
      "unicorn/no-nested-ternary": "off",
      "unicorn/number-literal-case": "off",
      "unicorn/template-indent": 0,
      "vue/array-bracket-newline": "off",
      "vue/array-bracket-spacing": "off",
      "vue/array-element-newline": "off",
      "vue/arrow-spacing": "off",
      "vue/block-spacing": "off",
      "vue/block-tag-newline": "off",
      "vue/brace-style": "off",
      "vue/comma-dangle": "off",
      "vue/comma-spacing": "off",
      "vue/comma-style": "off",
      "vue/dot-location": "off",
      "vue/func-call-spacing": "off",
      "vue/html-closing-bracket-newline": "off",
      "vue/html-closing-bracket-spacing": "off",
      "vue/html-end-tags": "off",
      "vue/html-indent": "off",
      "vue/html-quotes": "off",
      "vue/html-self-closing": 0,
      "vue/key-spacing": "off",
      "vue/keyword-spacing": "off",
      "vue/max-attributes-per-line": "off",
      "vue/max-len": 0,
      "vue/multiline-html-element-content-newline": "off",
      "vue/multiline-ternary": "off",
      "vue/mustache-interpolation-spacing": "off",
      "vue/no-extra-parens": "off",
      "vue/no-multi-spaces": "off",
      "vue/no-spaces-around-equal-signs-in-attribute": "off",
      "vue/object-curly-newline": "off",
      "vue/object-curly-spacing": "off",
      "vue/object-property-newline": "off",
      "vue/operator-linebreak": "off",
      "vue/quote-props": "off",
      "vue/script-indent": "off",
      "vue/singleline-html-element-content-newline": "off",
      "vue/space-in-parens": "off",
      "vue/space-infix-ops": "off",
      "vue/space-unary-ops": "off",
      "vue/template-curly-spacing": "off",
      "wrap-iife": "off",
      "wrap-regex": "off",
      "yield-star-spacing": "off",
    },
  },
  {
    "plugins": {
      "sort-keys": {
        "default": {
          "rules": {
            "sort-keys-fix": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Stylistic Issues",
                  "description": "require object keys to be sorted",
                  "recommended": false,
                  "url": "https://github.com/namnm/eslint-plugin-sort-keys",
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "asc",
                      "desc",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "caseSensitive": {
                        "default": true,
                        "type": "boolean",
                      },
                      "minKeys": {
                        "default": 2,
                        "minimum": 2,
                        "type": "integer",
                      },
                      "natural": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
          },
        },
        "rules": {
          "sort-keys-fix": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "require object keys to be sorted",
                "recommended": false,
                "url": "https://github.com/namnm/eslint-plugin-sort-keys",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "asc",
                    "desc",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "minKeys": {
                      "default": 2,
                      "minimum": 2,
                      "type": "integer",
                    },
                    "natural": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
      },
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 2022,
      "globals": {
        "AbortController": false,
        "AbortSignal": false,
        "AggregateError": false,
        "AnalyserNode": false,
        "Animation": false,
        "AnimationEffectReadOnly": false,
        "AnimationEffectTiming": false,
        "AnimationEffectTimingReadOnly": false,
        "AnimationEvent": false,
        "AnimationPlaybackEvent": false,
        "AnimationTimeline": false,
        "ApplicationCache": false,
        "ApplicationCacheErrorEvent": false,
        "Array": false,
        "ArrayBuffer": false,
        "Atomics": false,
        "Attr": false,
        "Audio": false,
        "AudioBuffer": false,
        "AudioBufferSourceNode": false,
        "AudioContext": false,
        "AudioDestinationNode": false,
        "AudioListener": false,
        "AudioNode": false,
        "AudioParam": false,
        "AudioProcessingEvent": false,
        "AudioScheduledSourceNode": false,
        "AudioWorkletGlobalScope": false,
        "AudioWorkletNode": false,
        "AudioWorkletProcessor": false,
        "BarProp": false,
        "BaseAudioContext": false,
        "BatteryManager": false,
        "BeforeUnloadEvent": false,
        "BigInt": false,
        "BigInt64Array": false,
        "BigUint64Array": false,
        "BiquadFilterNode": false,
        "Blob": false,
        "BlobEvent": false,
        "Boolean": false,
        "BroadcastChannel": false,
        "BudgetService": false,
        "Buffer": false,
        "ByteLengthQueuingStrategy": false,
        "CSS": false,
        "CSSConditionRule": false,
        "CSSFontFaceRule": false,
        "CSSGroupingRule": false,
        "CSSImportRule": false,
        "CSSKeyframeRule": false,
        "CSSKeyframesRule": false,
        "CSSMatrixComponent": false,
        "CSSMediaRule": false,
        "CSSNamespaceRule": false,
        "CSSPageRule": false,
        "CSSPerspective": false,
        "CSSRotate": false,
        "CSSRule": false,
        "CSSRuleList": false,
        "CSSScale": false,
        "CSSSkew": false,
        "CSSSkewX": false,
        "CSSSkewY": false,
        "CSSStyleDeclaration": false,
        "CSSStyleRule": false,
        "CSSStyleSheet": false,
        "CSSSupportsRule": false,
        "CSSTransformValue": false,
        "CSSTranslate": false,
        "Cache": false,
        "CacheStorage": false,
        "CanvasCaptureMediaStreamTrack": false,
        "CanvasGradient": false,
        "CanvasPattern": false,
        "CanvasRenderingContext2D": false,
        "ChannelMergerNode": false,
        "ChannelSplitterNode": false,
        "CharacterData": false,
        "ClipboardEvent": false,
        "ClipboardItem": false,
        "CloseEvent": false,
        "Comment": false,
        "CompositionEvent": false,
        "CompressionStream": false,
        "ConstantSourceNode": false,
        "ConvolverNode": false,
        "CountQueuingStrategy": false,
        "Credential": false,
        "CredentialsContainer": false,
        "Crypto": false,
        "CryptoKey": false,
        "CustomElementRegistry": false,
        "CustomEvent": false,
        "DOMError": false,
        "DOMException": false,
        "DOMImplementation": false,
        "DOMMatrix": false,
        "DOMMatrixReadOnly": false,
        "DOMParser": false,
        "DOMPoint": false,
        "DOMPointReadOnly": false,
        "DOMQuad": false,
        "DOMRect": false,
        "DOMRectList": false,
        "DOMRectReadOnly": false,
        "DOMStringList": false,
        "DOMStringMap": false,
        "DOMTokenList": false,
        "DataTransfer": false,
        "DataTransferItem": false,
        "DataTransferItemList": false,
        "DataView": false,
        "Date": false,
        "DecompressionStream": false,
        "DelayNode": false,
        "DeviceMotionEvent": false,
        "DeviceOrientationEvent": false,
        "Document": false,
        "DocumentFragment": false,
        "DocumentType": false,
        "DragEvent": false,
        "DynamicsCompressorNode": false,
        "Element": false,
        "Error": false,
        "ErrorEvent": false,
        "EvalError": false,
        "Event": false,
        "EventSource": false,
        "EventTarget": false,
        "File": false,
        "FileList": false,
        "FileReader": false,
        "FinalizationRegistry": false,
        "Float32Array": false,
        "Float64Array": false,
        "FocusEvent": false,
        "FontFace": false,
        "FontFaceSetLoadEvent": false,
        "FormData": false,
        "FormDataEvent": false,
        "Function": false,
        "GainNode": false,
        "Gamepad": false,
        "GamepadButton": false,
        "GamepadEvent": false,
        "HTMLAllCollection": false,
        "HTMLAnchorElement": false,
        "HTMLAreaElement": false,
        "HTMLAudioElement": false,
        "HTMLBRElement": false,
        "HTMLBaseElement": false,
        "HTMLBodyElement": false,
        "HTMLButtonElement": false,
        "HTMLCanvasElement": false,
        "HTMLCollection": false,
        "HTMLContentElement": false,
        "HTMLDListElement": false,
        "HTMLDataElement": false,
        "HTMLDataListElement": false,
        "HTMLDetailsElement": false,
        "HTMLDialogElement": false,
        "HTMLDirectoryElement": false,
        "HTMLDivElement": false,
        "HTMLDocument": false,
        "HTMLElement": false,
        "HTMLEmbedElement": false,
        "HTMLFieldSetElement": false,
        "HTMLFontElement": false,
        "HTMLFormControlsCollection": false,
        "HTMLFormElement": false,
        "HTMLFrameElement": false,
        "HTMLFrameSetElement": false,
        "HTMLHRElement": false,
        "HTMLHeadElement": false,
        "HTMLHeadingElement": false,
        "HTMLHtmlElement": false,
        "HTMLIFrameElement": false,
        "HTMLImageElement": false,
        "HTMLInputElement": false,
        "HTMLLIElement": false,
        "HTMLLabelElement": false,
        "HTMLLegendElement": false,
        "HTMLLinkElement": false,
        "HTMLMapElement": false,
        "HTMLMarqueeElement": false,
        "HTMLMediaElement": false,
        "HTMLMenuElement": false,
        "HTMLMetaElement": false,
        "HTMLMeterElement": false,
        "HTMLModElement": false,
        "HTMLOListElement": false,
        "HTMLObjectElement": false,
        "HTMLOptGroupElement": false,
        "HTMLOptionElement": false,
        "HTMLOptionsCollection": false,
        "HTMLOutputElement": false,
        "HTMLParagraphElement": false,
        "HTMLParamElement": false,
        "HTMLPictureElement": false,
        "HTMLPreElement": false,
        "HTMLProgressElement": false,
        "HTMLQuoteElement": false,
        "HTMLScriptElement": false,
        "HTMLSelectElement": false,
        "HTMLShadowElement": false,
        "HTMLSlotElement": false,
        "HTMLSourceElement": false,
        "HTMLSpanElement": false,
        "HTMLStyleElement": false,
        "HTMLTableCaptionElement": false,
        "HTMLTableCellElement": false,
        "HTMLTableColElement": false,
        "HTMLTableElement": false,
        "HTMLTableRowElement": false,
        "HTMLTableSectionElement": false,
        "HTMLTemplateElement": false,
        "HTMLTextAreaElement": false,
        "HTMLTimeElement": false,
        "HTMLTitleElement": false,
        "HTMLTrackElement": false,
        "HTMLUListElement": false,
        "HTMLUnknownElement": false,
        "HTMLVideoElement": false,
        "HashChangeEvent": false,
        "Headers": false,
        "History": false,
        "IDBCursor": false,
        "IDBCursorWithValue": false,
        "IDBDatabase": false,
        "IDBFactory": false,
        "IDBIndex": false,
        "IDBKeyRange": false,
        "IDBObjectStore": false,
        "IDBOpenDBRequest": false,
        "IDBRequest": false,
        "IDBTransaction": false,
        "IDBVersionChangeEvent": false,
        "IIRFilterNode": false,
        "IdleDeadline": false,
        "Image": false,
        "ImageBitmap": false,
        "ImageBitmapRenderingContext": false,
        "ImageCapture": false,
        "ImageData": false,
        "Infinity": false,
        "InputEvent": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "IntersectionObserver": false,
        "IntersectionObserverEntry": false,
        "Intl": false,
        "JSON": false,
        "KeyboardEvent": false,
        "KeyframeEffect": false,
        "KeyframeEffectReadOnly": false,
        "Location": false,
        "MIDIAccess": false,
        "MIDIConnectionEvent": false,
        "MIDIInput": false,
        "MIDIInputMap": false,
        "MIDIMessageEvent": false,
        "MIDIOutput": false,
        "MIDIOutputMap": false,
        "MIDIPort": false,
        "Map": false,
        "Math": false,
        "MediaDeviceInfo": false,
        "MediaDevices": false,
        "MediaElementAudioSourceNode": false,
        "MediaEncryptedEvent": false,
        "MediaError": false,
        "MediaKeyMessageEvent": false,
        "MediaKeySession": false,
        "MediaKeyStatusMap": false,
        "MediaKeySystemAccess": false,
        "MediaList": false,
        "MediaMetadata": false,
        "MediaQueryList": false,
        "MediaQueryListEvent": false,
        "MediaRecorder": false,
        "MediaSettingsRange": false,
        "MediaSource": false,
        "MediaStream": false,
        "MediaStreamAudioDestinationNode": false,
        "MediaStreamAudioSourceNode": false,
        "MediaStreamConstraints": false,
        "MediaStreamEvent": false,
        "MediaStreamTrack": false,
        "MediaStreamTrackEvent": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "MimeType": false,
        "MimeTypeArray": false,
        "MouseEvent": false,
        "MutationEvent": false,
        "MutationObserver": false,
        "MutationRecord": false,
        "NaN": false,
        "NamedNodeMap": false,
        "NavigationPreloadManager": false,
        "Navigator": false,
        "NavigatorUAData": false,
        "NetworkInformation": false,
        "Node": false,
        "NodeFilter": false,
        "NodeIterator": false,
        "NodeList": false,
        "Notification": false,
        "Number": false,
        "Object": false,
        "OfflineAudioCompletionEvent": false,
        "OfflineAudioContext": false,
        "OffscreenCanvas": true,
        "OffscreenCanvasRenderingContext2D": false,
        "Option": false,
        "OscillatorNode": false,
        "OverconstrainedError": false,
        "PageTransitionEvent": false,
        "PannerNode": false,
        "Path2D": false,
        "PaymentAddress": false,
        "PaymentRequest": false,
        "PaymentRequestUpdateEvent": false,
        "PaymentResponse": false,
        "Performance": false,
        "PerformanceEntry": false,
        "PerformanceLongTaskTiming": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceNavigation": false,
        "PerformanceNavigationTiming": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformancePaintTiming": false,
        "PerformanceResourceTiming": false,
        "PerformanceTiming": false,
        "PeriodicWave": false,
        "PermissionStatus": false,
        "Permissions": false,
        "PhotoCapabilities": false,
        "Plugin": false,
        "PluginArray": false,
        "PointerEvent": false,
        "PopStateEvent": false,
        "Presentation": false,
        "PresentationAvailability": false,
        "PresentationConnection": false,
        "PresentationConnectionAvailableEvent": false,
        "PresentationConnectionCloseEvent": false,
        "PresentationConnectionList": false,
        "PresentationReceiver": false,
        "PresentationRequest": false,
        "ProcessingInstruction": false,
        "ProgressEvent": false,
        "Promise": false,
        "PromiseRejectionEvent": false,
        "Proxy": false,
        "PushManager": false,
        "PushSubscription": false,
        "PushSubscriptionOptions": false,
        "RTCCertificate": false,
        "RTCDataChannel": false,
        "RTCDataChannelEvent": false,
        "RTCDtlsTransport": false,
        "RTCIceCandidate": false,
        "RTCIceGatherer": false,
        "RTCIceTransport": false,
        "RTCPeerConnection": false,
        "RTCPeerConnectionIceEvent": false,
        "RTCRtpContributingSource": false,
        "RTCRtpReceiver": false,
        "RTCRtpSender": false,
        "RTCSctpTransport": false,
        "RTCSessionDescription": false,
        "RTCStatsReport": false,
        "RTCTrackEvent": false,
        "RadioNodeList": false,
        "Range": false,
        "RangeError": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "ReferenceError": false,
        "Reflect": false,
        "RegExp": false,
        "RemotePlayback": false,
        "Request": false,
        "ResizeObserver": false,
        "ResizeObserverEntry": false,
        "Response": false,
        "SVGAElement": false,
        "SVGAngle": false,
        "SVGAnimateElement": false,
        "SVGAnimateMotionElement": false,
        "SVGAnimateTransformElement": false,
        "SVGAnimatedAngle": false,
        "SVGAnimatedBoolean": false,
        "SVGAnimatedEnumeration": false,
        "SVGAnimatedInteger": false,
        "SVGAnimatedLength": false,
        "SVGAnimatedLengthList": false,
        "SVGAnimatedNumber": false,
        "SVGAnimatedNumberList": false,
        "SVGAnimatedPreserveAspectRatio": false,
        "SVGAnimatedRect": false,
        "SVGAnimatedString": false,
        "SVGAnimatedTransformList": false,
        "SVGAnimationElement": false,
        "SVGCircleElement": false,
        "SVGClipPathElement": false,
        "SVGComponentTransferFunctionElement": false,
        "SVGDefsElement": false,
        "SVGDescElement": false,
        "SVGDiscardElement": false,
        "SVGElement": false,
        "SVGEllipseElement": false,
        "SVGFEBlendElement": false,
        "SVGFEColorMatrixElement": false,
        "SVGFEComponentTransferElement": false,
        "SVGFECompositeElement": false,
        "SVGFEConvolveMatrixElement": false,
        "SVGFEDiffuseLightingElement": false,
        "SVGFEDisplacementMapElement": false,
        "SVGFEDistantLightElement": false,
        "SVGFEDropShadowElement": false,
        "SVGFEFloodElement": false,
        "SVGFEFuncAElement": false,
        "SVGFEFuncBElement": false,
        "SVGFEFuncGElement": false,
        "SVGFEFuncRElement": false,
        "SVGFEGaussianBlurElement": false,
        "SVGFEImageElement": false,
        "SVGFEMergeElement": false,
        "SVGFEMergeNodeElement": false,
        "SVGFEMorphologyElement": false,
        "SVGFEOffsetElement": false,
        "SVGFEPointLightElement": false,
        "SVGFESpecularLightingElement": false,
        "SVGFESpotLightElement": false,
        "SVGFETileElement": false,
        "SVGFETurbulenceElement": false,
        "SVGFilterElement": false,
        "SVGForeignObjectElement": false,
        "SVGGElement": false,
        "SVGGeometryElement": false,
        "SVGGradientElement": false,
        "SVGGraphicsElement": false,
        "SVGImageElement": false,
        "SVGLength": false,
        "SVGLengthList": false,
        "SVGLineElement": false,
        "SVGLinearGradientElement": false,
        "SVGMPathElement": false,
        "SVGMarkerElement": false,
        "SVGMaskElement": false,
        "SVGMatrix": false,
        "SVGMetadataElement": false,
        "SVGNumber": false,
        "SVGNumberList": false,
        "SVGPathElement": false,
        "SVGPatternElement": false,
        "SVGPoint": false,
        "SVGPointList": false,
        "SVGPolygonElement": false,
        "SVGPolylineElement": false,
        "SVGPreserveAspectRatio": false,
        "SVGRadialGradientElement": false,
        "SVGRect": false,
        "SVGRectElement": false,
        "SVGSVGElement": false,
        "SVGScriptElement": false,
        "SVGSetElement": false,
        "SVGStopElement": false,
        "SVGStringList": false,
        "SVGStyleElement": false,
        "SVGSwitchElement": false,
        "SVGSymbolElement": false,
        "SVGTSpanElement": false,
        "SVGTextContentElement": false,
        "SVGTextElement": false,
        "SVGTextPathElement": false,
        "SVGTextPositioningElement": false,
        "SVGTitleElement": false,
        "SVGTransform": false,
        "SVGTransformList": false,
        "SVGUnitTypes": false,
        "SVGUseElement": false,
        "SVGViewElement": false,
        "Screen": false,
        "ScreenOrientation": false,
        "ScriptProcessorNode": false,
        "SecurityPolicyViolationEvent": false,
        "Selection": false,
        "ServiceWorker": false,
        "ServiceWorkerContainer": false,
        "ServiceWorkerRegistration": false,
        "Set": false,
        "ShadowRoot": false,
        "SharedArrayBuffer": false,
        "SharedWorker": false,
        "SourceBuffer": false,
        "SourceBufferList": false,
        "SpeechSynthesisEvent": false,
        "SpeechSynthesisUtterance": false,
        "StaticRange": false,
        "StereoPannerNode": false,
        "Storage": false,
        "StorageEvent": false,
        "StorageManager": false,
        "String": false,
        "StyleSheet": false,
        "StyleSheetList": false,
        "SubmitEvent": false,
        "SubtleCrypto": false,
        "Symbol": false,
        "SyntaxError": false,
        "TaskAttributionTiming": false,
        "Text": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TextEvent": false,
        "TextMetrics": false,
        "TextTrack": false,
        "TextTrackCue": false,
        "TextTrackCueList": false,
        "TextTrackList": false,
        "TimeRanges": false,
        "ToggleEvent": false,
        "Touch": false,
        "TouchEvent": false,
        "TouchList": false,
        "TrackEvent": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "TransitionEvent": false,
        "TreeWalker": false,
        "TypeError": false,
        "UIEvent": false,
        "URIError": false,
        "URL": false,
        "URLSearchParams": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "VTTCue": false,
        "ValidityState": false,
        "VisualViewport": false,
        "WaveShaperNode": false,
        "WeakMap": false,
        "WeakRef": false,
        "WeakSet": false,
        "WebAssembly": false,
        "WebGL2RenderingContext": false,
        "WebGLActiveInfo": false,
        "WebGLBuffer": false,
        "WebGLContextEvent": false,
        "WebGLFramebuffer": false,
        "WebGLProgram": false,
        "WebGLQuery": false,
        "WebGLRenderbuffer": false,
        "WebGLRenderingContext": false,
        "WebGLSampler": false,
        "WebGLShader": false,
        "WebGLShaderPrecisionFormat": false,
        "WebGLSync": false,
        "WebGLTexture": false,
        "WebGLTransformFeedback": false,
        "WebGLUniformLocation": false,
        "WebGLVertexArrayObject": false,
        "WebSocket": false,
        "WheelEvent": false,
        "Window": false,
        "Worker": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "XMLDocument": false,
        "XMLHttpRequest": false,
        "XMLHttpRequestEventTarget": false,
        "XMLHttpRequestUpload": false,
        "XMLSerializer": false,
        "XPathEvaluator": false,
        "XPathExpression": false,
        "XPathResult": false,
        "XRAnchor": false,
        "XRBoundedReferenceSpace": false,
        "XRCPUDepthInformation": false,
        "XRDepthInformation": false,
        "XRFrame": false,
        "XRInputSource": false,
        "XRInputSourceArray": false,
        "XRInputSourceEvent": false,
        "XRInputSourcesChangeEvent": false,
        "XRPose": false,
        "XRReferenceSpace": false,
        "XRReferenceSpaceEvent": false,
        "XRRenderState": false,
        "XRRigidTransform": false,
        "XRSession": false,
        "XRSessionEvent": false,
        "XRSpace": false,
        "XRSystem": false,
        "XRView": false,
        "XRViewerPose": false,
        "XRViewport": false,
        "XRWebGLBinding": false,
        "XRWebGLDepthInformation": false,
        "XRWebGLLayer": false,
        "XSLTProcessor": false,
        "__dirname": false,
        "__filename": false,
        "addEventListener": false,
        "alert": false,
        "applicationCache": false,
        "atob": false,
        "blur": false,
        "btoa": false,
        "caches": false,
        "cancelAnimationFrame": false,
        "cancelIdleCallback": false,
        "clearImmediate": false,
        "clearInterval": false,
        "clearTimeout": false,
        "clientInformation": false,
        "close": false,
        "closed": false,
        "confirm": false,
        "console": false,
        "constructor": false,
        "createImageBitmap": false,
        "crypto": false,
        "customElements": false,
        "decodeURI": false,
        "decodeURIComponent": false,
        "defaultStatus": false,
        "defaultstatus": false,
        "devicePixelRatio": false,
        "dispatchEvent": false,
        "document": "readonly",
        "encodeURI": false,
        "encodeURIComponent": false,
        "escape": false,
        "eval": false,
        "event": false,
        "exports": true,
        "external": false,
        "fetch": false,
        "find": false,
        "focus": false,
        "frameElement": false,
        "frames": false,
        "getComputedStyle": false,
        "getSelection": false,
        "global": false,
        "globalThis": false,
        "hasOwnProperty": false,
        "history": false,
        "indexedDB": false,
        "innerHeight": false,
        "innerWidth": false,
        "isFinite": false,
        "isNaN": false,
        "isPrototypeOf": false,
        "isSecureContext": false,
        "length": false,
        "localStorage": false,
        "location": true,
        "locationbar": false,
        "matchMedia": false,
        "menubar": false,
        "module": false,
        "moveBy": false,
        "moveTo": false,
        "name": false,
        "navigator": "readonly",
        "offscreenBuffering": false,
        "onabort": true,
        "onafterprint": true,
        "onanimationend": true,
        "onanimationiteration": true,
        "onanimationstart": true,
        "onappinstalled": true,
        "onauxclick": true,
        "onbeforeinstallprompt": true,
        "onbeforeprint": true,
        "onbeforeunload": true,
        "onblur": true,
        "oncancel": true,
        "oncanplay": true,
        "oncanplaythrough": true,
        "onchange": true,
        "onclick": true,
        "onclose": true,
        "oncontextmenu": true,
        "oncuechange": true,
        "ondblclick": true,
        "ondevicemotion": true,
        "ondeviceorientation": true,
        "ondeviceorientationabsolute": true,
        "ondrag": true,
        "ondragend": true,
        "ondragenter": true,
        "ondragleave": true,
        "ondragover": true,
        "ondragstart": true,
        "ondrop": true,
        "ondurationchange": true,
        "onemptied": true,
        "onended": true,
        "onerror": true,
        "onfocus": true,
        "ongotpointercapture": true,
        "onhashchange": true,
        "oninput": true,
        "oninvalid": true,
        "onkeydown": true,
        "onkeypress": true,
        "onkeyup": true,
        "onlanguagechange": true,
        "onload": true,
        "onloadeddata": true,
        "onloadedmetadata": true,
        "onloadstart": true,
        "onlostpointercapture": true,
        "onmessage": true,
        "onmessageerror": true,
        "onmousedown": true,
        "onmouseenter": true,
        "onmouseleave": true,
        "onmousemove": true,
        "onmouseout": true,
        "onmouseover": true,
        "onmouseup": true,
        "onmousewheel": true,
        "onoffline": true,
        "ononline": true,
        "onpagehide": true,
        "onpageshow": true,
        "onpause": true,
        "onplay": true,
        "onplaying": true,
        "onpointercancel": true,
        "onpointerdown": true,
        "onpointerenter": true,
        "onpointerleave": true,
        "onpointermove": true,
        "onpointerout": true,
        "onpointerover": true,
        "onpointerup": true,
        "onpopstate": true,
        "onprogress": true,
        "onratechange": true,
        "onrejectionhandled": true,
        "onreset": true,
        "onresize": true,
        "onscroll": true,
        "onsearch": true,
        "onseeked": true,
        "onseeking": true,
        "onselect": true,
        "onstalled": true,
        "onstorage": true,
        "onsubmit": true,
        "onsuspend": true,
        "ontimeupdate": true,
        "ontoggle": true,
        "ontransitionend": true,
        "onunhandledrejection": true,
        "onunload": true,
        "onvolumechange": true,
        "onwaiting": true,
        "onwheel": true,
        "open": false,
        "openDatabase": false,
        "opener": false,
        "origin": false,
        "outerHeight": false,
        "outerWidth": false,
        "pageXOffset": false,
        "pageYOffset": false,
        "parent": false,
        "parseFloat": false,
        "parseInt": false,
        "performance": false,
        "personalbar": false,
        "postMessage": false,
        "print": false,
        "process": false,
        "prompt": false,
        "propertyIsEnumerable": false,
        "queueMicrotask": false,
        "registerProcessor": false,
        "removeEventListener": false,
        "reportError": false,
        "requestAnimationFrame": false,
        "requestIdleCallback": false,
        "require": false,
        "resizeBy": false,
        "resizeTo": false,
        "screen": false,
        "screenLeft": false,
        "screenTop": false,
        "screenX": false,
        "screenY": false,
        "scroll": false,
        "scrollBy": false,
        "scrollTo": false,
        "scrollX": false,
        "scrollY": false,
        "scrollbars": false,
        "self": false,
        "sessionStorage": false,
        "setImmediate": false,
        "setInterval": false,
        "setTimeout": false,
        "speechSynthesis": false,
        "status": false,
        "statusbar": false,
        "stop": false,
        "structuredClone": false,
        "styleMedia": false,
        "toLocaleString": false,
        "toString": false,
        "toolbar": false,
        "top": false,
        "undefined": false,
        "unescape": false,
        "valueOf": false,
        "visualViewport": false,
        "window": "readonly",
      },
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true,
        },
        "ecmaVersion": 2022,
        "sourceType": "module",
      },
      "sourceType": "module",
    },
    "linterOptions": {
      "reportUnusedDisableDirectives": true,
    },
    "plugins": {
      "unused-imports": {
        "default": {
          "rules": {
            "no-unused-imports": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": false,
                  "recommended": "recommended",
                  "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
                },
                "fixable": "code",
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "enum": [
                              "all",
                              "after-used",
                              "none",
                            ],
                            "type": "string",
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                          },
                          "caughtErrors": {
                            "enum": [
                              "all",
                              "none",
                            ],
                            "type": "string",
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                          },
                          "vars": {
                            "enum": [
                              "all",
                              "local",
                            ],
                            "type": "string",
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
              "schema": undefined,
            },
            "no-unused-imports-ts": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": false,
                  "recommended": "recommended",
                  "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
                },
                "fixable": "code",
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "enum": [
                              "all",
                              "after-used",
                              "none",
                            ],
                            "type": "string",
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                          },
                          "caughtErrors": {
                            "enum": [
                              "all",
                              "none",
                            ],
                            "type": "string",
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                          },
                          "vars": {
                            "enum": [
                              "all",
                              "local",
                            ],
                            "type": "string",
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
              "schema": undefined,
            },
            "no-unused-vars": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": false,
                  "recommended": "recommended",
                  "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
                },
                "fixable": "code",
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "enum": [
                              "all",
                              "after-used",
                              "none",
                            ],
                            "type": "string",
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                          },
                          "caughtErrors": {
                            "enum": [
                              "all",
                              "none",
                            ],
                            "type": "string",
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                          },
                          "vars": {
                            "enum": [
                              "all",
                              "local",
                            ],
                            "type": "string",
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
              "schema": undefined,
            },
            "no-unused-vars-ts": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": false,
                  "recommended": "recommended",
                  "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
                },
                "fixable": "code",
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "enum": [
                              "all",
                              "after-used",
                              "none",
                            ],
                            "type": "string",
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                          },
                          "caughtErrors": {
                            "enum": [
                              "all",
                              "none",
                            ],
                            "type": "string",
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                          },
                          "vars": {
                            "enum": [
                              "all",
                              "local",
                            ],
                            "type": "string",
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
              "schema": undefined,
            },
          },
        },
        "rules": {
          "no-unused-imports": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": false,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "type": "string",
                        },
                        "caughtErrors": {
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "type": "string",
                        },
                        "ignoreRestSiblings": {
                          "type": "boolean",
                        },
                        "vars": {
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
            "schema": undefined,
          },
          "no-unused-imports-ts": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": false,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "type": "string",
                        },
                        "caughtErrors": {
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "type": "string",
                        },
                        "ignoreRestSiblings": {
                          "type": "boolean",
                        },
                        "vars": {
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
            "schema": undefined,
          },
          "no-unused-vars": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": false,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "type": "string",
                        },
                        "caughtErrors": {
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "type": "string",
                        },
                        "ignoreRestSiblings": {
                          "type": "boolean",
                        },
                        "vars": {
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
            "schema": undefined,
          },
          "no-unused-vars-ts": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": false,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "type": "string",
                        },
                        "caughtErrors": {
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "type": "string",
                        },
                        "ignoreRestSiblings": {
                          "type": "boolean",
                        },
                        "vars": {
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
            "schema": undefined,
          },
        },
      },
    },
    "rules": {
      "accessor-pairs": [
        "error",
        {
          "enforceForClassMembers": true,
          "setWithoutGet": true,
        },
      ],
      "array-callback-return": "error",
      "block-scoped-var": "error",
      "constructor-super": "error",
      "default-case-last": "error",
      "dot-notation": [
        "error",
        {
          "allowKeywords": true,
        },
      ],
      "eqeqeq": [
        "error",
        "smart",
      ],
      "new-cap": [
        "error",
        {
          "capIsNew": false,
          "newIsCap": true,
          "properties": true,
        },
      ],
      "no-alert": "error",
      "no-array-constructor": "error",
      "no-async-promise-executor": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": [
        "error",
        "always",
      ],
      "no-console": [
        "error",
        {
          "allow": [
            "warn",
            "error",
          ],
        },
      ],
      "no-const-assign": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-delete-var": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": [
        "error",
        {
          "allowEmptyCatch": true,
        },
      ],
      "no-empty-character-class": "error",
      "no-empty-pattern": "error",
      "no-eval": "error",
      "no-ex-assign": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-boolean-cast": "error",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-implied-eval": "error",
      "no-import-assign": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-iterator": "error",
      "no-labels": [
        "error",
        {
          "allowLoop": false,
          "allowSwitch": false,
        },
      ],
      "no-lone-blocks": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-object": "error",
      "no-new-symbol": "error",
      "no-new-wrappers": "error",
      "no-obj-calls": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-proto": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": [
        "error",
        {
          "builtinGlobals": false,
        },
      ],
      "no-regex-spaces": "error",
      "no-restricted-globals": [
        "error",
        {
          "message": "Use \`globalThis\` instead.",
          "name": "global",
        },
        {
          "message": "Use \`globalThis\` instead.",
          "name": "self",
        },
      ],
      "no-restricted-properties": [
        "error",
        {
          "message": "Use \`Object.getPrototypeOf\` or \`Object.setPrototypeOf\` instead.",
          "property": "__proto__",
        },
        {
          "message": "Use \`Object.defineProperty\` instead.",
          "property": "__defineGetter__",
        },
        {
          "message": "Use \`Object.defineProperty\` instead.",
          "property": "__defineSetter__",
        },
        {
          "message": "Use \`Object.getOwnPropertyDescriptor\` instead.",
          "property": "__lookupGetter__",
        },
        {
          "message": "Use \`Object.getOwnPropertyDescriptor\` instead.",
          "property": "__lookupSetter__",
        },
      ],
      "no-restricted-syntax": [
        "error",
        "DebuggerStatement",
        "LabeledStatement",
        "WithStatement",
        "TSEnumDeclaration[const=true]",
        "TSExportAssignment",
      ],
      "no-self-assign": [
        "error",
        {
          "props": true,
        },
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-this-before-super": "error",
      "no-throw-literal": "error",
      "no-undef": "error",
      "no-undef-init": "error",
      "no-unexpected-multiline": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": [
        "error",
        {
          "defaultAssignment": false,
        },
      ],
      "no-unreachable": "error",
      "no-unreachable-loop": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": true,
          "allowTaggedTemplates": true,
          "allowTernary": true,
        },
      ],
      "no-unused-vars": [
        "error",
        {
          "args": "none",
          "caughtErrors": "none",
          "ignoreRestSiblings": true,
          "vars": "all",
        },
      ],
      "no-use-before-define": [
        "error",
        {
          "classes": false,
          "functions": false,
          "variables": true,
        },
      ],
      "no-useless-backreference": "error",
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "no-with": "error",
      "object-shorthand": [
        "error",
        "always",
        {
          "avoidQuotes": true,
          "ignoreConstructors": false,
        },
      ],
      "one-var": [
        "error",
        {
          "initialized": "never",
        },
      ],
      "prefer-arrow-callback": [
        "error",
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true,
        },
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "all",
          "ignoreReadBeforeAssign": true,
        },
      ],
      "prefer-exponentiation-operator": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-regex-literals": [
        "error",
        {
          "disallowRedundantWrapping": true,
        },
      ],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "sort-imports": [
        "error",
        {
          "allowSeparatedGroups": false,
          "ignoreCase": false,
          "ignoreDeclarationSort": true,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single",
          ],
        },
      ],
      "symbol-description": "error",
      "unicode-bom": [
        "error",
        "never",
      ],
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "error",
        {
          "args": "after-used",
          "argsIgnorePattern": "^_",
          "vars": "all",
          "varsIgnorePattern": "^_",
        },
      ],
      "use-isnan": [
        "error",
        {
          "enforceForIndexOf": true,
          "enforceForSwitchCase": true,
        },
      ],
      "valid-typeof": [
        "error",
        {
          "requireStringLiterals": true,
        },
      ],
      "vars-on-top": "error",
      "yoda": [
        "error",
        "never",
      ],
    },
  },
  {
    "files": [
      "**/*.?([cm])ts",
      "**/*.?([cm])tsx",
    ],
    "languageOptions": {
      "parser": {
        "clearCaches": [Function],
        "createProgram": [Function],
        "meta": {
          "name": "typescript-eslint/parser",
          "version": "6.18.1",
        },
        "parse": [Function],
        "parseForESLint": [Function],
        "version": "6.18.1",
      },
      "parserOptions": {
        "sourceType": "module",
      },
    },
    "plugins": {
      "@typescript-eslint": {
        "default": {
          "configs": {
            "all": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "@typescript-eslint/class-methods-use-this": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/consistent-type-exports": "error",
                "@typescript-eslint/consistent-type-imports": "error",
                "@typescript-eslint/default-param-last": "error",
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/explicit-function-return-type": "error",
                "@typescript-eslint/explicit-member-accessibility": "error",
                "@typescript-eslint/explicit-module-boundary-types": "error",
                "@typescript-eslint/init-declarations": "error",
                "@typescript-eslint/max-params": "error",
                "@typescript-eslint/member-ordering": "error",
                "@typescript-eslint/method-signature-style": "error",
                "@typescript-eslint/naming-convention": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "@typescript-eslint/no-confusing-void-expression": "error",
                "@typescript-eslint/no-dupe-class-members": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-import-type-side-effects": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "@typescript-eslint/no-invalid-this": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "@typescript-eslint/no-loop-func": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-magic-numbers": "error",
                "@typescript-eslint/no-meaningless-void-operator": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-mixed-enums": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-redeclare": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-restricted-imports": "error",
                "@typescript-eslint/no-shadow": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-throw-literal": "error",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-unnecessary-condition": "error",
                "@typescript-eslint/no-unnecessary-qualifier": "error",
                "@typescript-eslint/no-unnecessary-type-arguments": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "@typescript-eslint/no-unused-expressions": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-use-before-define": "error",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-useless-empty-export": "error",
                "@typescript-eslint/no-useless-template-literals": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/non-nullable-type-assertion-style": "error",
                "@typescript-eslint/parameter-properties": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-destructuring": "error",
                "@typescript-eslint/prefer-enum-initializers": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/prefer-nullish-coalescing": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "@typescript-eslint/prefer-readonly": "error",
                "@typescript-eslint/prefer-readonly-parameter-types": "error",
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-regexp-exec": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error",
                "@typescript-eslint/prefer-ts-expect-error": "error",
                "@typescript-eslint/promise-function-async": "error",
                "@typescript-eslint/require-array-sort-compare": "error",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/return-await": "error",
                "@typescript-eslint/sort-type-constituents": "error",
                "@typescript-eslint/strict-boolean-expressions": "error",
                "@typescript-eslint/switch-exhaustiveness-check": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/typedef": "error",
                "@typescript-eslint/unbound-method": "error",
                "@typescript-eslint/unified-signatures": "error",
                "class-methods-use-this": "off",
                "default-param-last": "off",
                "dot-notation": "off",
                "init-declarations": "off",
                "max-params": "off",
                "no-array-constructor": "off",
                "no-dupe-class-members": "off",
                "no-empty-function": "off",
                "no-implied-eval": "off",
                "no-invalid-this": "off",
                "no-loop-func": "off",
                "no-loss-of-precision": "off",
                "no-magic-numbers": "off",
                "no-redeclare": "off",
                "no-restricted-imports": "off",
                "no-return-await": "off",
                "no-shadow": "off",
                "no-throw-literal": "off",
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "no-use-before-define": "off",
                "no-useless-constructor": "off",
                "prefer-destructuring": "off",
                "require-await": "off",
              },
            },
            "base": {
              "parser": "@typescript-eslint/parser",
              "parserOptions": {
                "sourceType": "module",
              },
              "plugins": [
                "@typescript-eslint",
              ],
            },
            "disable-type-checked": {
              "parserOptions": {
                "program": null,
                "project": null,
              },
              "rules": {
                "@typescript-eslint/await-thenable": "off",
                "@typescript-eslint/consistent-type-exports": "off",
                "@typescript-eslint/dot-notation": "off",
                "@typescript-eslint/naming-convention": "off",
                "@typescript-eslint/no-base-to-string": "off",
                "@typescript-eslint/no-confusing-void-expression": "off",
                "@typescript-eslint/no-duplicate-type-constituents": "off",
                "@typescript-eslint/no-floating-promises": "off",
                "@typescript-eslint/no-for-in-array": "off",
                "@typescript-eslint/no-implied-eval": "off",
                "@typescript-eslint/no-meaningless-void-operator": "off",
                "@typescript-eslint/no-misused-promises": "off",
                "@typescript-eslint/no-mixed-enums": "off",
                "@typescript-eslint/no-redundant-type-constituents": "off",
                "@typescript-eslint/no-throw-literal": "off",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
                "@typescript-eslint/no-unnecessary-condition": "off",
                "@typescript-eslint/no-unnecessary-qualifier": "off",
                "@typescript-eslint/no-unnecessary-type-arguments": "off",
                "@typescript-eslint/no-unnecessary-type-assertion": "off",
                "@typescript-eslint/no-unsafe-argument": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-enum-comparison": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "@typescript-eslint/no-unsafe-unary-minus": "off",
                "@typescript-eslint/no-useless-template-literals": "off",
                "@typescript-eslint/non-nullable-type-assertion-style": "off",
                "@typescript-eslint/prefer-destructuring": "off",
                "@typescript-eslint/prefer-includes": "off",
                "@typescript-eslint/prefer-nullish-coalescing": "off",
                "@typescript-eslint/prefer-optional-chain": "off",
                "@typescript-eslint/prefer-readonly": "off",
                "@typescript-eslint/prefer-readonly-parameter-types": "off",
                "@typescript-eslint/prefer-reduce-type-parameter": "off",
                "@typescript-eslint/prefer-regexp-exec": "off",
                "@typescript-eslint/prefer-return-this-type": "off",
                "@typescript-eslint/prefer-string-starts-ends-with": "off",
                "@typescript-eslint/promise-function-async": "off",
                "@typescript-eslint/require-array-sort-compare": "off",
                "@typescript-eslint/require-await": "off",
                "@typescript-eslint/restrict-plus-operands": "off",
                "@typescript-eslint/restrict-template-expressions": "off",
                "@typescript-eslint/return-await": "off",
                "@typescript-eslint/strict-boolean-expressions": "off",
                "@typescript-eslint/switch-exhaustiveness-check": "off",
                "@typescript-eslint/unbound-method": "off",
              },
            },
            "eslint-recommended": {
              "overrides": [
                {
                  "files": [
                    "*.ts",
                    "*.tsx",
                    "*.mts",
                    "*.cts",
                  ],
                  "rules": {
                    "constructor-super": "off",
                    "getter-return": "off",
                    "no-const-assign": "off",
                    "no-dupe-args": "off",
                    "no-dupe-class-members": "off",
                    "no-dupe-keys": "off",
                    "no-func-assign": "off",
                    "no-import-assign": "off",
                    "no-new-symbol": "off",
                    "no-obj-calls": "off",
                    "no-redeclare": "off",
                    "no-setter-return": "off",
                    "no-this-before-super": "off",
                    "no-undef": "off",
                    "no-unreachable": "off",
                    "no-unsafe-negation": "off",
                    "no-var": "error",
                    "prefer-const": "error",
                    "prefer-rest-params": "error",
                    "prefer-spread": "error",
                  },
                },
              ],
            },
            "recommended": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "no-array-constructor": "off",
                "no-loss-of-precision": "off",
                "no-unused-vars": "off",
              },
            },
            "recommended-requiring-type-checking": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error",
                "no-array-constructor": "off",
                "no-implied-eval": "off",
                "no-loss-of-precision": "off",
                "no-unused-vars": "off",
                "require-await": "off",
              },
            },
            "recommended-type-checked": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error",
                "no-array-constructor": "off",
                "no-implied-eval": "off",
                "no-loss-of-precision": "off",
                "no-unused-vars": "off",
                "require-await": "off",
              },
            },
            "strict": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-ts-expect-error": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unified-signatures": "error",
                "no-array-constructor": "off",
                "no-loss-of-precision": "off",
                "no-unused-vars": "off",
                "no-useless-constructor": "off",
              },
            },
            "strict-type-checked": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-types": "error",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-confusing-void-expression": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "@typescript-eslint/no-loss-of-precision": "error",
                "@typescript-eslint/no-meaningless-void-operator": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-mixed-enums": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-throw-literal": "error",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-unnecessary-condition": "error",
                "@typescript-eslint/no-unnecessary-type-arguments": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-useless-template-literals": "error",
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/prefer-ts-expect-error": "error",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error",
                "@typescript-eslint/unified-signatures": "error",
                "no-array-constructor": "off",
                "no-implied-eval": "off",
                "no-loss-of-precision": "off",
                "no-throw-literal": "off",
                "no-unused-vars": "off",
                "no-useless-constructor": "off",
                "require-await": "off",
              },
            },
            "stylistic": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "no-empty-function": "off",
              },
            },
            "stylistic-type-checked": {
              "extends": [
                "./configs/base",
                "./configs/eslint-recommended",
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "@typescript-eslint/non-nullable-type-assertion-style": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/prefer-nullish-coalescing": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error",
                "dot-notation": "off",
                "no-empty-function": "off",
              },
            },
          },
          "rules": {
            "adjacent-overload-signatures": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Require that function overload signatures be consecutive",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
                },
                "messages": {
                  "adjacentSignature": "All {{name}} signatures should be adjacent.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "array-type": {
              "create": [Function],
              "defaultOptions": [
                {
                  "default": "array",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require consistently using either \`T[]\` or \`Array<T>\` for arrays",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/array-type",
                },
                "fixable": "code",
                "messages": {
                  "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                  "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                  "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                  "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
                },
                "schema": [
                  {
                    "$defs": {
                      "arrayOption": {
                        "enum": [
                          "array",
                          "generic",
                          "array-simple",
                        ],
                        "type": "string",
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "default": {
                        "$ref": "#/items/0/$defs/arrayOption",
                        "description": "The array type expected for mutable cases.",
                      },
                      "readonly": {
                        "$ref": "#/items/0/$defs/arrayOption",
                        "description": "The array type expected for readonly cases. If omitted, the value for \`default\` will be used.",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "await-thenable": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow awaiting a value that is not a Thenable",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/await-thenable",
                },
                "hasSuggestions": true,
                "messages": {
                  "await": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
                  "removeAwait": "Remove unnecessary \`await\`.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "ban-ts-comment": {
              "create": [Function],
              "defaultOptions": [
                {
                  "minimumDescriptionLength": 3,
                  "ts-check": false,
                  "ts-expect-error": "allow-with-description",
                  "ts-ignore": true,
                  "ts-nocheck": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow \`@ts-<directive>\` comments or require descriptions after directives",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/ban-ts-comment",
                },
                "hasSuggestions": true,
                "messages": {
                  "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
                  "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
                  "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
                  "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                  "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
                },
                "schema": [
                  {
                    "$defs": {
                      "directiveConfigSchema": {
                        "oneOf": [
                          {
                            "default": true,
                            "type": "boolean",
                          },
                          {
                            "enum": [
                              "allow-with-description",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "descriptionFormat": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "minimumDescriptionLength": {
                        "default": 3,
                        "type": "number",
                      },
                      "ts-check": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema",
                      },
                      "ts-expect-error": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema",
                      },
                      "ts-ignore": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema",
                      },
                      "ts-nocheck": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "ban-tslint-comment": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow \`// tslint:<rule-flag>\` comments",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
                },
                "fixable": "code",
                "messages": {
                  "commentDetected": "tslint comment detected: "{{ text }}"",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "ban-types": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "docs": {
                  "description": "Disallow certain types",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/ban-types",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "bannedTypeMessage": "Don't use \`{{name}}\` as a type.{{customMessage}}",
                  "bannedTypeReplacement": "Replace \`{{name}}\` with \`{{replacement}}\`.",
                },
                "schema": [
                  {
                    "$defs": {
                      "banConfig": {
                        "oneOf": [
                          {
                            "description": "Bans the type with the default message",
                            "type": "null",
                          },
                          {
                            "description": "Un-bans the type (useful when paired with \`extendDefaults\`)",
                            "enum": [
                              false,
                            ],
                            "type": "boolean",
                          },
                          {
                            "description": "Bans the type with the default message",
                            "enum": [
                              true,
                            ],
                            "type": "boolean",
                          },
                          {
                            "description": "Bans the type with a custom message",
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "description": "Bans a type",
                            "properties": {
                              "fixWith": {
                                "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                                "type": "string",
                              },
                              "message": {
                                "description": "Custom error message",
                                "type": "string",
                              },
                              "suggest": {
                                "additionalItems": false,
                                "description": "Types to suggest replacing with.",
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "extendDefaults": {
                        "type": "boolean",
                      },
                      "types": {
                        "additionalProperties": {
                          "$ref": "#/items/0/$defs/banConfig",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "block-spacing": {
              "create": [Function],
              "defaultOptions": [
                "always",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/block-spacing",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "extra": "Unexpected space(s) {{location}} '{{token}}'.",
                  "missing": "Requires a space {{location}} '{{token}}'.",
                },
                "replacedBy": [
                  "@stylistic/ts/block-spacing",
                ],
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "brace-style": {
              "create": [Function],
              "defaultOptions": [
                "1tbs",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent brace style for blocks",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/brace-style",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "blockSameLine": "Statement inside of curly braces should be on next line.",
                  "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                  "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                  "sameLineClose": "Closing curly brace appears on the same line as the subsequent block.",
                  "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                  "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                },
                "replacedBy": [
                  "@stylistic/ts/brace-style",
                ],
                "schema": [
                  {
                    "enum": [
                      "1tbs",
                      "stroustrup",
                      "allman",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowSingleLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "class-literal-property-style": {
              "create": [Function],
              "defaultOptions": [
                "fields",
              ],
              "meta": {
                "docs": {
                  "description": "Enforce that literals on classes are exposed in a consistent style",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/class-literal-property-style",
                },
                "hasSuggestions": true,
                "messages": {
                  "preferFieldStyle": "Literals should be exposed using readonly fields.",
                  "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                  "preferGetterStyle": "Literals should be exposed using getters.",
                  "preferGetterStyleSuggestion": "Replace the literals with getters.",
                },
                "schema": [
                  {
                    "enum": [
                      "fields",
                      "getters",
                    ],
                    "type": "string",
                  },
                ],
                "type": "problem",
              },
            },
            "class-methods-use-this": {
              "create": [Function],
              "defaultOptions": [
                {
                  "enforceForClassFields": true,
                  "exceptMethods": [],
                  "ignoreClassesThatImplementAnInterface": false,
                  "ignoreOverrideMethods": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce that class methods utilize \`this\`",
                  "extendsBaseRule": true,
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/class-methods-use-this",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "missingThis": "Expected 'this' to be used by class {{name}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "enforceForClassFields": {
                        "default": true,
                        "description": "Enforces that functions used as instance field initializers utilize \`this\`",
                        "type": "boolean",
                      },
                      "exceptMethods": {
                        "description": "Allows specified method names to be ignored with this rule",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "ignoreClassesThatImplementAnInterface": {
                        "description": "Ignore classes that specifically implement some interface",
                        "oneOf": [
                          {
                            "description": "Ignore all classes that implement an interface",
                            "type": "boolean",
                          },
                          {
                            "description": "Ignore only the public fields of classes that implement an interface",
                            "enum": [
                              "public-fields",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ignoreOverrideMethods": {
                        "description": "Ingore members marked with the \`override\` modifier",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "defaultOptions": [
                "never",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require or disallow trailing commas",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/comma-dangle",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "replacedBy": [
                  "@stylistic/ts/comma-dangle",
                ],
                "schema": {
                  "$defs": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                        "ignore",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalItems": false,
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "enums": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "generics": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                            "tuples": {
                              "$ref": "#/$defs/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-spacing": {
              "create": [Function],
              "defaultOptions": [
                {
                  "after": true,
                  "before": false,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing before and after commas",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/comma-spacing",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "A space is required {{loc}} ','.",
                  "unexpected": "There should be no space {{loc}} ','.",
                },
                "replacedBy": [
                  "@stylistic/ts/comma-spacing",
                ],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "default": true,
                        "type": "boolean",
                      },
                      "before": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "consistent-generic-constructors": {
              "create": [Function],
              "defaultOptions": [
                "constructor",
              ],
              "meta": {
                "docs": {
                  "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
                },
                "fixable": "code",
                "messages": {
                  "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                  "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
                },
                "schema": [
                  {
                    "enum": [
                      "type-annotation",
                      "constructor",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "consistent-indexed-object-style": {
              "create": [Function],
              "defaultOptions": [
                "record",
              ],
              "meta": {
                "docs": {
                  "description": "Require or disallow the \`Record\` type",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
                },
                "fixable": "code",
                "messages": {
                  "preferIndexSignature": "An index signature is preferred over a record.",
                  "preferRecord": "A record is preferred over an index signature.",
                },
                "schema": [
                  {
                    "enum": [
                      "record",
                      "index-signature",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "consistent-type-assertions": {
              "create": [Function],
              "defaultOptions": [
                {
                  "assertionStyle": "as",
                  "objectLiteralTypeAssertions": "allow",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce consistent usage of type assertions",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                  "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                  "never": "Do not use any type assertions.",
                  "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                  "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                  "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "assertionStyle": {
                            "enum": [
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "assertionStyle",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "assertionStyle": {
                            "enum": [
                              "as",
                              "angle-bracket",
                            ],
                            "type": "string",
                          },
                          "objectLiteralTypeAssertions": {
                            "enum": [
                              "allow",
                              "allow-as-parameter",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "assertionStyle",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "consistent-type-definitions": {
              "create": [Function],
              "defaultOptions": [
                "interface",
              ],
              "meta": {
                "docs": {
                  "description": "Enforce type definitions to consistently use either \`interface\` or \`type\`",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
                },
                "fixable": "code",
                "messages": {
                  "interfaceOverType": "Use an \`interface\` instead of a \`type\`.",
                  "typeOverInterface": "Use a \`type\` instead of an \`interface\`.",
                },
                "schema": [
                  {
                    "enum": [
                      "interface",
                      "type",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "consistent-type-exports": {
              "create": [Function],
              "defaultOptions": [
                {
                  "fixMixedExportsWithInlineTypeSpecifier": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce consistent usage of type exports",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/consistent-type-exports",
                },
                "fixable": "code",
                "messages": {
                  "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using \`export type\`.",
                  "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using \`export type\`.",
                  "typeOverValue": "All exports in the declaration are only used as types. Use \`export type\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "fixMixedExportsWithInlineTypeSpecifier": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "consistent-type-imports": {
              "create": [Function],
              "defaultOptions": [
                {
                  "disallowTypeAnnotations": true,
                  "fixStyle": "separate-type-imports",
                  "prefer": "type-imports",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce consistent usage of type imports",
                  "url": "https://typescript-eslint.io/rules/consistent-type-imports",
                },
                "fixable": "code",
                "messages": {
                  "aImportInDecoMeta": "Type import {{typeImports}} is used by decorator metadata.",
                  "aImportIsOnlyTypes": "Import {{typeImports}} is only used as types.",
                  "noImportTypeAnnotations": "\`import()\` type annotations are forbidden.",
                  "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as types.",
                  "someImportsInDecoMeta": "Type imports {{typeImports}} are used by decorator metadata.",
                  "typeOverValue": "All imports in the declaration are only used as types. Use \`import type\`.",
                  "valueOverType": "Use an \`import\` instead of an \`import type\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "disallowTypeAnnotations": {
                        "type": "boolean",
                      },
                      "fixStyle": {
                        "enum": [
                          "separate-type-imports",
                          "inline-type-imports",
                        ],
                        "type": "string",
                      },
                      "prefer": {
                        "enum": [
                          "type-imports",
                          "no-type-imports",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "default-param-last": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce default parameters to be last",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/default-param-last",
                },
                "messages": {
                  "shouldBeLast": "Default parameters should be last.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "dot-notation": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowIndexSignaturePropertyAccess": false,
                  "allowKeywords": true,
                  "allowPattern": "",
                  "allowPrivateClassPropertyAccess": false,
                  "allowProtectedClassPropertyAccess": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce dot notation whenever possible",
                  "extendsBaseRule": true,
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/dot-notation",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "useBrackets": ".{{key}} is a syntax error.",
                  "useDot": "[{{key}}] is better written in dot notation.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowIndexSignaturePropertyAccess": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowKeywords": {
                        "default": true,
                        "type": "boolean",
                      },
                      "allowPattern": {
                        "default": "",
                        "type": "string",
                      },
                      "allowPrivateClassPropertyAccess": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowProtectedClassPropertyAccess": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "explicit-function-return-type": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                  "allowDirectConstAssertionInArrowFunctions": true,
                  "allowExpressions": false,
                  "allowFunctionsWithoutTypeParameters": false,
                  "allowHigherOrderFunctions": true,
                  "allowIIFEs": false,
                  "allowTypedFunctionExpressions": true,
                  "allowedNames": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require explicit return types on functions and class methods",
                  "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
                },
                "messages": {
                  "missingReturnType": "Missing return type on function.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                        "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
                        "type": "boolean",
                      },
                      "allowDirectConstAssertionInArrowFunctions": {
                        "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
                        "type": "boolean",
                      },
                      "allowExpressions": {
                        "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                        "type": "boolean",
                      },
                      "allowFunctionsWithoutTypeParameters": {
                        "description": "Whether to ignore functions that don't have generic type parameters.",
                        "type": "boolean",
                      },
                      "allowHigherOrderFunctions": {
                        "description": "Whether to ignore functions immediately returning another function expression.",
                        "type": "boolean",
                      },
                      "allowIIFEs": {
                        "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                        "type": "boolean",
                      },
                      "allowTypedFunctionExpressions": {
                        "description": "Whether to ignore type annotations on the variable of function expressions.",
                        "type": "boolean",
                      },
                      "allowedNames": {
                        "description": "An array of function/method names that will not have their arguments or return values checked.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "explicit-member-accessibility": {
              "create": [Function],
              "defaultOptions": [
                {
                  "accessibility": "explicit",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require explicit accessibility modifiers on class properties and methods",
                  "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                  "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                  "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
                },
                "schema": [
                  {
                    "$defs": {
                      "accessibilityLevel": {
                        "oneOf": [
                          {
                            "description": "Always require an accessor.",
                            "enum": [
                              "explicit",
                            ],
                            "type": "string",
                          },
                          {
                            "description": "Require an accessor except when public.",
                            "enum": [
                              "no-public",
                            ],
                            "type": "string",
                          },
                          {
                            "description": "Never check whether there is an accessor.",
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "accessibility": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                      "ignoredMethodNames": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "overrides": {
                        "additionalProperties": false,
                        "properties": {
                          "accessors": {
                            "$ref": "#/items/0/$defs/accessibilityLevel",
                          },
                          "constructors": {
                            "$ref": "#/items/0/$defs/accessibilityLevel",
                          },
                          "methods": {
                            "$ref": "#/items/0/$defs/accessibilityLevel",
                          },
                          "parameterProperties": {
                            "$ref": "#/items/0/$defs/accessibilityLevel",
                          },
                          "properties": {
                            "$ref": "#/items/0/$defs/accessibilityLevel",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "explicit-module-boundary-types": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowArgumentsExplicitlyTypedAsAny": false,
                  "allowDirectConstAssertionInArrowFunctions": true,
                  "allowHigherOrderFunctions": true,
                  "allowTypedFunctionExpressions": true,
                  "allowedNames": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                  "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
                },
                "messages": {
                  "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                  "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                  "missingArgType": "Argument '{{name}}' should be typed.",
                  "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                  "missingReturnType": "Missing return type on function.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowArgumentsExplicitlyTypedAsAny": {
                        "description": "Whether to ignore arguments that are explicitly typed as \`any\`.",
                        "type": "boolean",
                      },
                      "allowDirectConstAssertionInArrowFunctions": {
                        "description": "Whether to ignore return type annotations on body-less arrow functions that return an \`as const\` type assertion.
You must still type the parameters of the function.",
                        "type": "boolean",
                      },
                      "allowHigherOrderFunctions": {
                        "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                        "type": "boolean",
                      },
                      "allowTypedFunctionExpressions": {
                        "description": "Whether to ignore type annotations on the variable of a function expresion.",
                        "type": "boolean",
                      },
                      "allowedNames": {
                        "description": "An array of function/method names that will not have their arguments or return values checked.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "func-call-spacing": {
              "create": [Function],
              "defaultOptions": [
                "never",
                {},
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require or disallow spacing between function identifiers and their invocations",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/func-call-spacing",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "Missing space between function name and paren.",
                  "unexpectedNewline": "Unexpected newline between function name and paren.",
                  "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                },
                "replacedBy": [
                  "@stylistic/ts/func-call-spacing",
                ],
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowNewlines": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "indent": {
              "create": [Function],
              "defaultOptions": [
                4,
                {
                  "SwitchCase": 1,
                  "flatTernaryExpressions": false,
                  "ignoredNodes": [],
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent indentation",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/indent",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "replacedBy": [
                  "@stylistic/ts/indent",
                ],
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "init-declarations": {
              "create": [Function],
              "defaultOptions": [
                "always",
              ],
              "meta": {
                "docs": {
                  "description": "Require or disallow initialization in variable declarations",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/init-declarations",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                  "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "never",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreForLoopInit": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "key-spacing": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/key-spacing",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "replacedBy": [
                  "@stylistic/ts/key-spacing",
                ],
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "keyword-spacing": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing before and after keywords",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/keyword-spacing",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "expectedAfter": "Expected space(s) after "{{value}}".",
                  "expectedBefore": "Expected space(s) before "{{value}}".",
                  "unexpectedAfter": "Unexpected space(s) after "{{value}}".",
                  "unexpectedBefore": "Unexpected space(s) before "{{value}}".",
                },
                "replacedBy": [
                  "@stylistic/ts/keyword-spacing",
                ],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "default": true,
                        "type": "boolean",
                      },
                      "before": {
                        "default": true,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": false,
                        "properties": {
                          "abstract": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "as": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "async": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "await": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "boolean": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "break": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "byte": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "case": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "catch": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "char": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "class": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "const": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "continue": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "debugger": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "default": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "delete": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "do": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "double": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "else": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "enum": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "export": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "extends": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "false": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "final": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "finally": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "float": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "for": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "from": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "function": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "get": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "goto": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "if": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "implements": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "import": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "in": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "instanceof": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "int": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "interface": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "let": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "long": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "native": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "new": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "null": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "of": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "package": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "private": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "protected": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "public": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "return": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "set": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "short": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "static": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "super": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "switch": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "synchronized": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "this": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "throw": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "throws": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "transient": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "true": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "try": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "type": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "typeof": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "var": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "void": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "volatile": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "while": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "with": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "yield": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "lines-around-comment": {
              "create": [Function],
              "defaultOptions": [
                {
                  "beforeBlockComment": true,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require empty lines around comments",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/lines-around-comment",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "after": "Expected line after comment.",
                  "before": "Expected line before comment.",
                },
                "replacedBy": [
                  "@stylistic/ts/lines-around-comment",
                ],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "afterBlockComment": {
                        "default": false,
                        "type": "boolean",
                      },
                      "afterLineComment": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowArrayEnd": {
                        "type": "boolean",
                      },
                      "allowArrayStart": {
                        "type": "boolean",
                      },
                      "allowBlockEnd": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowBlockStart": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowClassEnd": {
                        "type": "boolean",
                      },
                      "allowClassStart": {
                        "type": "boolean",
                      },
                      "allowEnumEnd": {
                        "type": "boolean",
                      },
                      "allowEnumStart": {
                        "type": "boolean",
                      },
                      "allowInterfaceEnd": {
                        "type": "boolean",
                      },
                      "allowInterfaceStart": {
                        "type": "boolean",
                      },
                      "allowModuleEnd": {
                        "type": "boolean",
                      },
                      "allowModuleStart": {
                        "type": "boolean",
                      },
                      "allowObjectEnd": {
                        "type": "boolean",
                      },
                      "allowObjectStart": {
                        "type": "boolean",
                      },
                      "allowTypeEnd": {
                        "type": "boolean",
                      },
                      "allowTypeStart": {
                        "type": "boolean",
                      },
                      "applyDefaultIgnorePatterns": {
                        "type": "boolean",
                      },
                      "beforeBlockComment": {
                        "default": true,
                        "type": "boolean",
                      },
                      "beforeLineComment": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignorePattern": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "lines-between-class-members": {
              "create": [Function],
              "defaultOptions": [
                "always",
                {
                  "exceptAfterOverload": true,
                  "exceptAfterSingleLine": false,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require or disallow an empty line between class members",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/lines-between-class-members",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "always": "Expected blank line between class members.",
                  "never": "Unexpected blank line between class members.",
                },
                "replacedBy": [
                  "@stylistic/ts/lines-between-class-members",
                ],
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "enforce": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "blankLine": {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                },
                                "next": {
                                  "enum": [
                                    "method",
                                    "field",
                                    "*",
                                  ],
                                },
                                "prev": {
                                  "enum": [
                                    "method",
                                    "field",
                                    "*",
                                  ],
                                },
                              },
                              "required": [
                                "blankLine",
                                "prev",
                                "next",
                              ],
                              "type": "object",
                            },
                            "minItems": 1,
                            "type": "array",
                          },
                        },
                        "required": [
                          "enforce",
                        ],
                        "type": "object",
                      },
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptAfterOverload": {
                        "default": true,
                        "type": "boolean",
                      },
                      "exceptAfterSingleLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "max-params": {
              "create": [Function],
              "defaultOptions": [
                {
                  "countVoidThis": false,
                  "max": 3,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce a maximum number of parameters in function definitions",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/max-params",
                },
                "messages": {
                  "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "countVoidThis": {
                        "type": "boolean",
                      },
                      "max": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "maximum": {
                        "minimum": 0,
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "member-delimiter-style": {
              "create": [Function],
              "defaultOptions": [
                {
                  "multiline": {
                    "delimiter": "semi",
                    "requireLast": true,
                  },
                  "multilineDetection": "brackets",
                  "singleline": {
                    "delimiter": "semi",
                    "requireLast": false,
                  },
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require a specific member delimiter style for interfaces and type literals",
                  "url": "https://typescript-eslint.io/rules/member-delimiter-style",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedComma": "Expected a comma.",
                  "expectedSemi": "Expected a semicolon.",
                  "unexpectedComma": "Unexpected separator (,).",
                  "unexpectedSemi": "Unexpected separator (;).",
                },
                "replacedBy": [
                  "@stylistic/ts/member-delimiter-style",
                ],
                "schema": [
                  {
                    "$defs": {
                      "delimiterConfig": {
                        "additionalProperties": false,
                        "properties": {
                          "multiline": {
                            "additionalProperties": false,
                            "properties": {
                              "delimiter": {
                                "$ref": "#/items/0/$defs/multiLineOption",
                              },
                              "requireLast": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "singleline": {
                            "additionalProperties": false,
                            "properties": {
                              "delimiter": {
                                "$ref": "#/items/0/$defs/singleLineOption",
                              },
                              "requireLast": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      "multiLineOption": {
                        "enum": [
                          "none",
                          "semi",
                          "comma",
                        ],
                        "type": "string",
                      },
                      "singleLineOption": {
                        "enum": [
                          "semi",
                          "comma",
                        ],
                        "type": "string",
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "multiline": {
                        "additionalProperties": false,
                        "properties": {
                          "delimiter": {
                            "$ref": "#/items/0/$defs/multiLineOption",
                          },
                          "requireLast": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                      "multilineDetection": {
                        "enum": [
                          "brackets",
                          "last-member",
                        ],
                        "type": "string",
                      },
                      "overrides": {
                        "additionalProperties": false,
                        "properties": {
                          "interface": {
                            "$ref": "#/items/0/$defs/delimiterConfig",
                          },
                          "typeLiteral": {
                            "$ref": "#/items/0/$defs/delimiterConfig",
                          },
                        },
                        "type": "object",
                      },
                      "singleline": {
                        "additionalProperties": false,
                        "properties": {
                          "delimiter": {
                            "$ref": "#/items/0/$defs/singleLineOption",
                          },
                          "requireLast": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "member-ordering": {
              "create": [Function],
              "defaultOptions": [
                {
                  "default": [
                    "signature",
                    "call-signature",
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "#private-static-field",
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "#private-instance-field",
                    "public-abstract-field",
                    "protected-abstract-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "#private-field",
                    "static-field",
                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",
                    "static-initialization",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    "public-static-accessor",
                    "protected-static-accessor",
                    "private-static-accessor",
                    "#private-static-accessor",
                    "public-decorated-accessor",
                    "protected-decorated-accessor",
                    "private-decorated-accessor",
                    "public-instance-accessor",
                    "protected-instance-accessor",
                    "private-instance-accessor",
                    "#private-instance-accessor",
                    "public-abstract-accessor",
                    "protected-abstract-accessor",
                    "public-accessor",
                    "protected-accessor",
                    "private-accessor",
                    "#private-accessor",
                    "static-accessor",
                    "instance-accessor",
                    "abstract-accessor",
                    "decorated-accessor",
                    "accessor",
                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "#private-static-get",
                    "public-decorated-get",
                    "protected-decorated-get",
                    "private-decorated-get",
                    "public-instance-get",
                    "protected-instance-get",
                    "private-instance-get",
                    "#private-instance-get",
                    "public-abstract-get",
                    "protected-abstract-get",
                    "public-get",
                    "protected-get",
                    "private-get",
                    "#private-get",
                    "static-get",
                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",
                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "#private-static-set",
                    "public-decorated-set",
                    "protected-decorated-set",
                    "private-decorated-set",
                    "public-instance-set",
                    "protected-instance-set",
                    "private-instance-set",
                    "#private-instance-set",
                    "public-abstract-set",
                    "protected-abstract-set",
                    "public-set",
                    "protected-set",
                    "private-set",
                    "#private-set",
                    "static-set",
                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "#private-static-method",
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "#private-instance-method",
                    "public-abstract-method",
                    "protected-abstract-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "#private-method",
                    "static-method",
                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method",
                  ],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require a consistent member declaration order",
                  "url": "https://typescript-eslint.io/rules/member-ordering",
                },
                "messages": {
                  "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                  "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                  "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
                },
                "schema": [
                  {
                    "$defs": {
                      "allItems": {
                        "enum": [
                          "readonly-signature",
                          "signature",
                          "readonly-field",
                          "public-readonly-field",
                          "public-decorated-readonly-field",
                          "decorated-readonly-field",
                          "static-readonly-field",
                          "public-static-readonly-field",
                          "instance-readonly-field",
                          "public-instance-readonly-field",
                          "abstract-readonly-field",
                          "public-abstract-readonly-field",
                          "protected-readonly-field",
                          "protected-decorated-readonly-field",
                          "protected-static-readonly-field",
                          "protected-instance-readonly-field",
                          "protected-abstract-readonly-field",
                          "private-readonly-field",
                          "private-decorated-readonly-field",
                          "private-static-readonly-field",
                          "private-instance-readonly-field",
                          "#private-readonly-field",
                          "#private-static-readonly-field",
                          "#private-instance-readonly-field",
                          "field",
                          "public-field",
                          "public-decorated-field",
                          "decorated-field",
                          "static-field",
                          "public-static-field",
                          "instance-field",
                          "public-instance-field",
                          "abstract-field",
                          "public-abstract-field",
                          "protected-field",
                          "protected-decorated-field",
                          "protected-static-field",
                          "protected-instance-field",
                          "protected-abstract-field",
                          "private-field",
                          "private-decorated-field",
                          "private-static-field",
                          "private-instance-field",
                          "#private-field",
                          "#private-static-field",
                          "#private-instance-field",
                          "method",
                          "public-method",
                          "public-decorated-method",
                          "decorated-method",
                          "static-method",
                          "public-static-method",
                          "instance-method",
                          "public-instance-method",
                          "abstract-method",
                          "public-abstract-method",
                          "protected-method",
                          "protected-decorated-method",
                          "protected-static-method",
                          "protected-instance-method",
                          "protected-abstract-method",
                          "private-method",
                          "private-decorated-method",
                          "private-static-method",
                          "private-instance-method",
                          "#private-method",
                          "#private-static-method",
                          "#private-instance-method",
                          "call-signature",
                          "constructor",
                          "public-constructor",
                          "protected-constructor",
                          "private-constructor",
                          "accessor",
                          "public-accessor",
                          "public-decorated-accessor",
                          "decorated-accessor",
                          "static-accessor",
                          "public-static-accessor",
                          "instance-accessor",
                          "public-instance-accessor",
                          "abstract-accessor",
                          "public-abstract-accessor",
                          "protected-accessor",
                          "protected-decorated-accessor",
                          "protected-static-accessor",
                          "protected-instance-accessor",
                          "protected-abstract-accessor",
                          "private-accessor",
                          "private-decorated-accessor",
                          "private-static-accessor",
                          "private-instance-accessor",
                          "#private-accessor",
                          "#private-static-accessor",
                          "#private-instance-accessor",
                          "get",
                          "public-get",
                          "public-decorated-get",
                          "decorated-get",
                          "static-get",
                          "public-static-get",
                          "instance-get",
                          "public-instance-get",
                          "abstract-get",
                          "public-abstract-get",
                          "protected-get",
                          "protected-decorated-get",
                          "protected-static-get",
                          "protected-instance-get",
                          "protected-abstract-get",
                          "private-get",
                          "private-decorated-get",
                          "private-static-get",
                          "private-instance-get",
                          "#private-get",
                          "#private-static-get",
                          "#private-instance-get",
                          "set",
                          "public-set",
                          "public-decorated-set",
                          "decorated-set",
                          "static-set",
                          "public-static-set",
                          "instance-set",
                          "public-instance-set",
                          "abstract-set",
                          "public-abstract-set",
                          "protected-set",
                          "protected-decorated-set",
                          "protected-static-set",
                          "protected-instance-set",
                          "protected-abstract-set",
                          "private-set",
                          "private-decorated-set",
                          "private-static-set",
                          "private-instance-set",
                          "#private-set",
                          "#private-static-set",
                          "#private-instance-set",
                          "static-initialization",
                          "static-static-initialization",
                          "public-static-static-initialization",
                          "instance-static-initialization",
                          "public-instance-static-initialization",
                          "abstract-static-initialization",
                          "public-abstract-static-initialization",
                          "protected-static-static-initialization",
                          "protected-instance-static-initialization",
                          "protected-abstract-static-initialization",
                          "private-static-static-initialization",
                          "private-instance-static-initialization",
                          "#private-static-static-initialization",
                          "#private-instance-static-initialization",
                        ],
                        "type": "string",
                      },
                      "baseConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "$ref": "#/items/0/$defs/allItems",
                                },
                                {
                                  "items": {
                                    "$ref": "#/items/0/$defs/allItems",
                                  },
                                  "type": "array",
                                },
                              ],
                            },
                            "type": "array",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "memberTypes": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/items/0/$defs/allItems",
                                        },
                                        {
                                          "items": {
                                            "$ref": "#/items/0/$defs/allItems",
                                          },
                                          "type": "array",
                                        },
                                      ],
                                    },
                                    "type": "array",
                                  },
                                  {
                                    "enum": [
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "optionalityOrder": {
                                "$ref": "#/items/0/$defs/optionalityOrderOptions",
                              },
                              "order": {
                                "$ref": "#/items/0/$defs/orderOptions",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "optionalityOrderOptions": {
                        "enum": [
                          "optional-first",
                          "required-first",
                        ],
                        "type": "string",
                      },
                      "orderOptions": {
                        "enum": [
                          "alphabetically",
                          "alphabetically-case-insensitive",
                          "as-written",
                          "natural",
                          "natural-case-insensitive",
                        ],
                        "type": "string",
                      },
                      "typeItems": {
                        "enum": [
                          "readonly-signature",
                          "signature",
                          "readonly-field",
                          "field",
                          "method",
                          "constructor",
                        ],
                        "type": "string",
                      },
                      "typesConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "$ref": "#/items/0/$defs/typeItems",
                                },
                                {
                                  "items": {
                                    "$ref": "#/items/0/$defs/typeItems",
                                  },
                                  "type": "array",
                                },
                              ],
                            },
                            "type": "array",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "memberTypes": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/items/0/$defs/typeItems",
                                        },
                                        {
                                          "items": {
                                            "$ref": "#/items/0/$defs/typeItems",
                                          },
                                          "type": "array",
                                        },
                                      ],
                                    },
                                    "type": "array",
                                  },
                                  {
                                    "enum": [
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "optionalityOrder": {
                                "$ref": "#/items/0/$defs/optionalityOrderOptions",
                              },
                              "order": {
                                "$ref": "#/items/0/$defs/orderOptions",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "classExpressions": {
                        "$ref": "#/items/0/$defs/baseConfig",
                      },
                      "classes": {
                        "$ref": "#/items/0/$defs/baseConfig",
                      },
                      "default": {
                        "$ref": "#/items/0/$defs/baseConfig",
                      },
                      "interfaces": {
                        "$ref": "#/items/0/$defs/typesConfig",
                      },
                      "typeLiterals": {
                        "$ref": "#/items/0/$defs/typesConfig",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "method-signature-style": {
              "create": [Function],
              "defaultOptions": [
                "property",
              ],
              "meta": {
                "docs": {
                  "description": "Enforce using a particular method signature syntax",
                  "url": "https://typescript-eslint.io/rules/method-signature-style",
                },
                "fixable": "code",
                "messages": {
                  "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                  "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
                },
                "schema": [
                  {
                    "enum": [
                      "property",
                      "method",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "naming-convention": {
              "create": [Function],
              "defaultOptions": [
                {
                  "format": [
                    "camelCase",
                  ],
                  "leadingUnderscore": "allow",
                  "selector": "default",
                  "trailingUnderscore": "allow",
                },
                {
                  "format": [
                    "camelCase",
                    "PascalCase",
                  ],
                  "selector": "import",
                },
                {
                  "format": [
                    "camelCase",
                    "UPPER_CASE",
                  ],
                  "leadingUnderscore": "allow",
                  "selector": "variable",
                  "trailingUnderscore": "allow",
                },
                {
                  "format": [
                    "PascalCase",
                  ],
                  "selector": "typeLike",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce naming conventions for everything across a codebase",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/naming-convention",
                },
                "messages": {
                  "doesNotMatchFormat": "{{type}} name \`{{name}}\` must match one of the following formats: {{formats}}",
                  "doesNotMatchFormatTrimmed": "{{type}} name \`{{name}}\` trimmed as \`{{processedName}}\` must match one of the following formats: {{formats}}",
                  "missingAffix": "{{type}} name \`{{name}}\` must have one of the following {{position}}es: {{affixes}}",
                  "missingUnderscore": "{{type}} name \`{{name}}\` must have {{count}} {{position}} underscore(s).",
                  "satisfyCustom": "{{type}} name \`{{name}}\` must {{regexMatch}} the RegExp: {{regex}}",
                  "unexpectedUnderscore": "{{type}} name \`{{name}}\` must not have a {{position}} underscore.",
                },
                "schema": {
                  "$defs": {
                    "formatOptionsConfig": {
                      "oneOf": [
                        {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/predefinedFormats",
                          },
                          "type": "array",
                        },
                        {
                          "type": "null",
                        },
                      ],
                    },
                    "matchRegexConfig": {
                      "additionalProperties": false,
                      "properties": {
                        "match": {
                          "type": "boolean",
                        },
                        "regex": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "match",
                        "regex",
                      ],
                      "type": "object",
                    },
                    "predefinedFormats": {
                      "enum": [
                        "camelCase",
                        "strictCamelCase",
                        "PascalCase",
                        "StrictPascalCase",
                        "snake_case",
                        "UPPER_CASE",
                      ],
                      "type": "string",
                    },
                    "prefixSuffixConfig": {
                      "additionalItems": false,
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "typeModifiers": {
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array",
                      ],
                      "type": "string",
                    },
                    "underscoreOptions": {
                      "enum": [
                        "forbid",
                        "allow",
                        "require",
                        "requireDouble",
                        "allowDouble",
                        "allowSingleOrDouble",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalItems": false,
                  "items": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "description": "Multiple selectors in one config",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "readonly",
                                "static",
                                "public",
                                "protected",
                                "private",
                                "#private",
                                "abstract",
                                "destructured",
                                "global",
                                "exported",
                                "unused",
                                "requiresQuotes",
                                "override",
                                "async",
                                "default",
                                "namespace",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "default",
                                "variableLike",
                                "memberLike",
                                "typeLike",
                                "method",
                                "property",
                                "variable",
                                "function",
                                "parameter",
                                "parameterProperty",
                                "accessor",
                                "enumMember",
                                "classMethod",
                                "objectLiteralMethod",
                                "typeMethod",
                                "classProperty",
                                "objectLiteralProperty",
                                "typeProperty",
                                "class",
                                "interface",
                                "typeAlias",
                                "enum",
                                "typeParameter",
                                "import",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'default'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "readonly",
                                "static",
                                "public",
                                "protected",
                                "private",
                                "#private",
                                "abstract",
                                "destructured",
                                "global",
                                "exported",
                                "unused",
                                "requiresQuotes",
                                "override",
                                "async",
                                "default",
                                "namespace",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "default",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'variableLike'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "unused",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "variableLike",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'variable'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "destructured",
                                "exported",
                                "global",
                                "unused",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "variable",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'function'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "exported",
                                "global",
                                "unused",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "function",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'parameter'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "destructured",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "parameter",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'memberLike'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "memberLike",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'classProperty'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "classProperty",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'objectLiteralProperty'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "public",
                                "requiresQuotes",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "objectLiteralProperty",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeProperty'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "public",
                                "readonly",
                                "requiresQuotes",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "typeProperty",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'parameterProperty'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "private",
                                "protected",
                                "public",
                                "readonly",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "parameterProperty",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'property'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "property",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'classMethod'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "classMethod",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'objectLiteralMethod'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "public",
                                "requiresQuotes",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "objectLiteralMethod",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeMethod'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "public",
                                "requiresQuotes",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "typeMethod",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'method'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "method",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'accessor'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "accessor",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "types": {
                            "additionalItems": false,
                            "items": {
                              "$ref": "#/$defs/typeModifiers",
                            },
                            "type": "array",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'enumMember'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "requiresQuotes",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "enumMember",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeLike'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "exported",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "typeLike",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'class'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "exported",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "class",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'interface'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "exported",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "interface",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeAlias'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "exported",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "typeAlias",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'enum'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "exported",
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "enum",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeParameter'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "unused",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "typeParameter",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'import'",
                        "properties": {
                          "custom": {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                          "failureMessage": {
                            "type": "string",
                          },
                          "filter": {
                            "oneOf": [
                              {
                                "minLength": 1,
                                "type": "string",
                              },
                              {
                                "$ref": "#/$defs/matchRegexConfig",
                              },
                            ],
                          },
                          "format": {
                            "$ref": "#/$defs/formatOptionsConfig",
                          },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "default",
                                "namespace",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "prefix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "selector": {
                            "enum": [
                              "import",
                            ],
                            "type": "string",
                          },
                          "suffix": {
                            "$ref": "#/$defs/prefixSuffixConfig",
                          },
                          "trailingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions",
                          },
                        },
                        "required": [
                          "selector",
                          "format",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "no-array-constructor": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow generic \`Array\` constructors",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-array-constructor",
                },
                "fixable": "code",
                "messages": {
                  "useLiteral": "The array literal notation [] is preferable.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-base-to-string": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoredTypeNames": [
                    "Error",
                    "RegExp",
                    "URL",
                    "URLSearchParams",
                  ],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require \`.toString()\` to only be called on objects which provide useful information when stringified",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-base-to-string",
                },
                "messages": {
                  "baseToString": "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoredTypeNames": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-confusing-non-null-assertion": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow non-null assertion in locations that may be confusing",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "confusingAssign": "Confusing combinations of non-null assertion and equal test like "a! = b", which looks very similar to not equal "a != b".",
                  "confusingEqual": "Confusing combinations of non-null assertion and equal test like "a! == b", which looks very similar to not equal "a !== b".",
                  "notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
                  "notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
                  "wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion "!" and "=" together.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-confusing-void-expression": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "docs": {
                  "description": "Require expressions of type void to appear in statement position",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                  "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                  "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the \`void\` operator.",
                  "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the \`return\` statement.",
                  "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the \`return\` statement.",
                  "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the \`void\` operator.",
                  "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the \`void\` operator.",
                  "voidExprWrapVoid": "Mark with an explicit \`void\` operator.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreArrowShorthand": {
                        "type": "boolean",
                      },
                      "ignoreVoidOperator": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-dupe-class-members": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow duplicate class members",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate name '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-duplicate-enum-values": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow duplicate enum member values",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
                },
                "hasSuggestions": false,
                "messages": {
                  "duplicateValue": "Duplicate enum member value {{value}}.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-duplicate-type-constituents": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreIntersections": false,
                  "ignoreUnions": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow duplicate constituents of union or intersection types",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
                },
                "fixable": "code",
                "messages": {
                  "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIntersections": {
                        "type": "boolean",
                      },
                      "ignoreUnions": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-dynamic-delete": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow using the \`delete\` operator on computed key expressions",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
                },
                "fixable": "code",
                "messages": {
                  "dynamicDelete": "Do not delete dynamically computed property keys.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-empty-function": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow empty functions",
                  "extendsBaseRule": true,
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-empty-function",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Unexpected empty {{name}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "enum": [
                            "functions",
                            "arrowFunctions",
                            "generatorFunctions",
                            "methods",
                            "generatorMethods",
                            "getters",
                            "setters",
                            "constructors",
                            "private-constructors",
                            "protected-constructors",
                            "asyncFunctions",
                            "asyncMethods",
                            "decoratedFunctions",
                            "overrideMethods",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-empty-interface": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowSingleExtends": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow the declaration of empty interfaces",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-empty-interface",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "noEmpty": "An empty interface is equivalent to \`{}\`.",
                  "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowSingleExtends": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-explicit-any": {
              "create": [Function],
              "defaultOptions": [
                {
                  "fixToUnknown": false,
                  "ignoreRestArgs": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow the \`any\` type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-explicit-any",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "suggestNever": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                  "suggestUnknown": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
                  "unexpectedAny": "Unexpected any. Specify a different type.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "fixToUnknown": {
                        "description": "Whether to enable auto-fixing in which the \`any\` type is converted to the \`unknown\` type.",
                        "type": "boolean",
                      },
                      "ignoreRestArgs": {
                        "description": "Whether to ignore rest parameter arrays.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-extra-non-null-assertion": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow extra non-null assertions",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
                },
                "fixable": "code",
                "messages": {
                  "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-extra-parens": {
              "create": [Function],
              "defaultOptions": [
                "all",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Disallow unnecessary parentheses",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-extra-parens",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Unnecessary parentheses around expression.",
                },
                "replacedBy": [
                  "@stylistic/ts/no-extra-parens",
                ],
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "functions",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "all",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowParensAfterCommentPattern": {
                              "type": "string",
                            },
                            "conditionalAssign": {
                              "type": "boolean",
                            },
                            "enforceForArrowConditionals": {
                              "type": "boolean",
                            },
                            "enforceForFunctionPrototypeMethods": {
                              "type": "boolean",
                            },
                            "enforceForNewInMemberExpressions": {
                              "type": "boolean",
                            },
                            "enforceForSequenceExpressions": {
                              "type": "boolean",
                            },
                            "ignoreJSX": {
                              "enum": [
                                "none",
                                "all",
                                "single-line",
                                "multi-line",
                              ],
                            },
                            "nestedBinaryExpressions": {
                              "type": "boolean",
                            },
                            "returnAssign": {
                              "type": "boolean",
                            },
                            "ternaryOperandBinaryExpressions": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "no-extra-semi": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Disallow unnecessary semicolons",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-extra-semi",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Unnecessary semicolon.",
                },
                "replacedBy": [
                  "@stylistic/ts/no-extra-semi",
                ],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-extraneous-class": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowConstructorOnly": false,
                  "allowEmpty": false,
                  "allowStaticOnly": false,
                  "allowWithDecorator": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow classes used as namespaces",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-extraneous-class",
                },
                "messages": {
                  "empty": "Unexpected empty class.",
                  "onlyConstructor": "Unexpected class with only a constructor.",
                  "onlyStatic": "Unexpected class with only static properties.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowConstructorOnly": {
                        "description": "Whether to allow extraneous classes that contain only a constructor.",
                        "type": "boolean",
                      },
                      "allowEmpty": {
                        "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                        "type": "boolean",
                      },
                      "allowStaticOnly": {
                        "description": "Whether to allow extraneous classes that only contain static members.",
                        "type": "boolean",
                      },
                      "allowWithDecorator": {
                        "description": "Whether to allow extraneous classes that include a decorator.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-floating-promises": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreIIFE": false,
                  "ignoreVoid": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require Promise-like statements to be handled appropriately",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-floating-promises",
                },
                "hasSuggestions": true,
                "messages": {
                  "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                  "floatingFixAwait": "Add await operator.",
                  "floatingFixVoid": "Add void operator to ignore.",
                  "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                  "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
                  "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                  "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator. A rejection handler that is not a function will be ignored.",
                  "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIIFE": {
                        "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                        "type": "boolean",
                      },
                      "ignoreVoid": {
                        "description": "Whether to ignore \`void\` expressions.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-for-in-array": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow iterating over an array with a for-in loop",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-for-in-array",
                },
                "messages": {
                  "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-implied-eval": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow the use of \`eval()\`-like methods",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-implied-eval",
                },
                "messages": {
                  "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                  "noImpliedEvalError": "Implied eval. Consider passing a function.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-import-type-side-effects": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                  "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
                },
                "fixable": "code",
                "messages": {
                  "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-inferrable-types": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreParameters": false,
                  "ignoreProperties": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-inferrable-types",
                },
                "fixable": "code",
                "messages": {
                  "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreParameters": {
                        "type": "boolean",
                      },
                      "ignoreProperties": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-invalid-this": {
              "create": [Function],
              "defaultOptions": [
                {
                  "capIsConstructor": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow \`this\` keywords outside of classes or class-like objects",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-invalid-this",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedThis": "Unexpected 'this'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "capIsConstructor": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-invalid-void-type": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAsThisParameter": false,
                  "allowInGenericTypeArguments": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow \`void\` type outside of generic or return types",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
                },
                "messages": {
                  "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                  "invalidVoidNotReturn": "void is only valid as a return type.",
                  "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                  "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of \`this\` parameter.",
                  "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a \`this\` parameter.",
                  "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAsThisParameter": {
                        "type": "boolean",
                      },
                      "allowInGenericTypeArguments": {
                        "oneOf": [
                          {
                            "type": "boolean",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "minItems": 1,
                            "type": "array",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-loop-func": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow function declarations that contain unsafe references inside loop statements",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-loop-func",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-loss-of-precision": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow literal numbers that lose precision",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "noLossOfPrecision": "This number literal will lose precision at runtime.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-magic-numbers": {
              "create": [Function],
              "defaultOptions": [
                {
                  "detectObjects": false,
                  "enforceConst": false,
                  "ignore": [],
                  "ignoreArrayIndexes": false,
                  "ignoreEnums": false,
                  "ignoreNumericLiteralTypes": false,
                  "ignoreReadonlyClassProperties": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow magic numbers",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-magic-numbers",
                },
                "messages": {
                  "noMagic": "No magic number: {{raw}}.",
                  "useConst": "Number constants declarations must use 'const'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "detectObjects": {
                        "default": false,
                        "type": "boolean",
                      },
                      "enforceConst": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "number",
                            },
                            {
                              "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                              "type": "string",
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignoreArrayIndexes": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreClassFieldInitialValues": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreDefaultValues": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreEnums": {
                        "type": "boolean",
                      },
                      "ignoreNumericLiteralTypes": {
                        "type": "boolean",
                      },
                      "ignoreReadonlyClassProperties": {
                        "type": "boolean",
                      },
                      "ignoreTypeIndexes": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-meaningless-void-operator": {
              "create": [Function],
              "defaultOptions": [
                {
                  "checkNever": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow the \`void\` operator except when used to discard a value",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                  "removeVoid": "Remove 'void'",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checkNever": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-misused-new": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce valid definition of \`new\` and \`constructor\`",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-misused-new",
                },
                "messages": {
                  "errorMessageClass": "Class cannot have method named \`new\`.",
                  "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-misused-promises": {
              "create": [Function],
              "defaultOptions": [
                {
                  "checksConditionals": true,
                  "checksSpreads": true,
                  "checksVoidReturn": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow Promises in places not designed to handle them",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-misused-promises",
                },
                "messages": {
                  "conditional": "Expected non-Promise value in a boolean conditional.",
                  "spread": "Expected a non-Promise value to be spreaded in an object.",
                  "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                  "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                  "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                  "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                  "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checksConditionals": {
                        "type": "boolean",
                      },
                      "checksSpreads": {
                        "type": "boolean",
                      },
                      "checksVoidReturn": {
                        "oneOf": [
                          {
                            "type": "boolean",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "arguments": {
                                "type": "boolean",
                              },
                              "attributes": {
                                "type": "boolean",
                              },
                              "properties": {
                                "type": "boolean",
                              },
                              "returns": {
                                "type": "boolean",
                              },
                              "variables": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-mixed-enums": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow enums from having both number and string members",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-mixed-enums",
                },
                "messages": {
                  "mixed": "Mixing number and string enums can be confusing.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-namespace": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowDeclarations": false,
                  "allowDefinitionFiles": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow TypeScript namespaces",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-namespace",
                },
                "messages": {
                  "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowDeclarations": {
                        "description": "Whether to allow \`declare\` with custom TypeScript namespaces.",
                        "type": "boolean",
                      },
                      "allowDefinitionFiles": {
                        "description": "Whether to allow \`declare\` with custom TypeScript namespaces inside definition files.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-non-null-asserted-nullish-coalescing": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                  "suggestRemovingNonNull": "Remove the non-null assertion.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-non-null-asserted-optional-chain": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow non-null assertions after an optional chain expression",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                  "suggestRemovingNonNull": "You should remove the non-null assertion.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-non-null-assertion": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow non-null assertions using the \`!\` postfix operator",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNull": "Forbidden non-null assertion.",
                  "suggestOptionalChain": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-redeclare": {
              "create": [Function],
              "defaultOptions": [
                {
                  "builtinGlobals": true,
                  "ignoreDeclarationMerge": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow variable redeclaration",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-redeclare",
                },
                "messages": {
                  "redeclared": "'{{id}}' is already defined.",
                  "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                  "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "builtinGlobals": {
                        "type": "boolean",
                      },
                      "ignoreDeclarationMerge": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-redundant-type-constituents": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow members of unions and intersections that do nothing or override type information",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
                },
                "messages": {
                  "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                  "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                  "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                  "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-require-imports": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow invocation of \`require()\`",
                  "url": "https://typescript-eslint.io/rules/no-require-imports",
                },
                "messages": {
                  "noRequireImports": "A \`require()\` style import is forbidden.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "description": "Patterns of import paths to allow requiring from.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-restricted-imports": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow specified modules when loaded by \`import\`",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-restricted-imports",
                },
                "fixable": undefined,
                "messages": {
                  "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                  "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                  "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                  "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                  "path": "'{{importSource}}' import is restricted from being used.",
                  "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                  "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                  "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                  "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                  "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                  "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                  "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                  "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                  "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowTypeImports": {
                                "description": "Disallow value imports, but allow type-only imports.",
                                "type": "boolean",
                              },
                              "importNames": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "message": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "name": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "name",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "paths": {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "allowTypeImports": {
                                        "description": "Disallow value imports, but allow type-only imports.",
                                        "type": "boolean",
                                      },
                                      "importNames": {
                                        "items": {
                                          "type": "string",
                                        },
                                        "type": "array",
                                      },
                                      "message": {
                                        "minLength": 1,
                                        "type": "string",
                                      },
                                      "name": {
                                        "type": "string",
                                      },
                                    },
                                    "required": [
                                      "name",
                                    ],
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "patterns": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                {
                                  "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "allowTypeImports": {
                                        "description": "Disallow value imports, but allow type-only imports.",
                                        "type": "boolean",
                                      },
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "group": {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                      "importNamePattern": {
                                        "type": "string",
                                      },
                                      "importNames": {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                      "message": {
                                        "minLength": 1,
                                        "type": "string",
                                      },
                                    },
                                    "required": [
                                      "group",
                                    ],
                                    "type": "object",
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "no-shadow": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                  "builtinGlobals": false,
                  "hoist": "functions",
                  "ignoreFunctionTypeParameterNameValueShadow": true,
                  "ignoreOnInitialization": false,
                  "ignoreTypeValueShadow": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-shadow",
                },
                "messages": {
                  "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                  "noShadowGlobal": "'{{name}}' is already a global variable.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "builtinGlobals": {
                        "type": "boolean",
                      },
                      "hoist": {
                        "enum": [
                          "all",
                          "functions",
                          "never",
                        ],
                        "type": "string",
                      },
                      "ignoreFunctionTypeParameterNameValueShadow": {
                        "type": "boolean",
                      },
                      "ignoreOnInitialization": {
                        "type": "boolean",
                      },
                      "ignoreTypeValueShadow": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-this-alias": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowDestructuring": true,
                  "allowedNames": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow aliasing \`this\`",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-this-alias",
                },
                "messages": {
                  "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                  "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowDestructuring": {
                        "description": "Whether to ignore destructurings, such as \`const { props, state } = this\`.",
                        "type": "boolean",
                      },
                      "allowedNames": {
                        "description": "Names to ignore, such as ["self"] for \`const self = this;\`.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-throw-literal": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowThrowingAny": true,
                  "allowThrowingUnknown": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow throwing literals as exceptions",
                  "extendsBaseRule": true,
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-throw-literal",
                },
                "messages": {
                  "object": "Expected an error object to be thrown.",
                  "undef": "Do not throw undefined.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowThrowingAny": {
                        "type": "boolean",
                      },
                      "allowThrowingUnknown": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-type-alias": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAliases": "never",
                  "allowCallbacks": "never",
                  "allowConditionalTypes": "never",
                  "allowConstructors": "never",
                  "allowGenerics": "never",
                  "allowLiterals": "never",
                  "allowMappedTypes": "never",
                  "allowTupleTypes": "never",
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Disallow type aliases",
                  "url": "https://typescript-eslint.io/rules/no-type-alias",
                },
                "messages": {
                  "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                  "noTypeAlias": "Type {{alias}} are not allowed.",
                },
                "schema": [
                  {
                    "$defs": {
                      "expandedOptions": {
                        "enum": [
                          "always",
                          "never",
                          "in-unions",
                          "in-intersections",
                          "in-unions-and-intersections",
                        ],
                        "type": "string",
                      },
                      "simpleOptions": {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "allowAliases": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow direct one-to-one type aliases.",
                      },
                      "allowCallbacks": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases for callbacks.",
                      },
                      "allowConditionalTypes": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases for conditional types.",
                      },
                      "allowConstructors": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases with constructors.",
                      },
                      "allowGenerics": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases with generic types.",
                      },
                      "allowLiterals": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with object literal types.",
                      },
                      "allowMappedTypes": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with mapped types.",
                      },
                      "allowTupleTypes": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with tuple types.",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unnecessary-boolean-literal-compare": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowComparingNullableBooleansToFalse": true,
                  "allowComparingNullableBooleansToTrue": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow unnecessary equality comparisons against boolean literals",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
                },
                "fixable": "code",
                "messages": {
                  "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                  "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                  "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                  "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                  "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowComparingNullableBooleansToFalse": {
                        "description": "Whether to allow comparisons between nullable boolean variables and \`false\`.",
                        "type": "boolean",
                      },
                      "allowComparingNullableBooleansToTrue": {
                        "description": "Whether to allow comparisons between nullable boolean variables and \`true\`.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unnecessary-condition": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowConstantLoopConditions": false,
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow conditionals where the type is always truthy or always falsy",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
                },
                "fixable": "code",
                "messages": {
                  "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                  "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                  "alwaysNullish": "Unnecessary conditional, left-hand side of \`??\` operator is always \`null\` or \`undefined\`.",
                  "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                  "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                  "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
                  "never": "Unnecessary conditional, value is \`never\`.",
                  "neverNullish": "Unnecessary conditional, expected left-hand side of \`??\` operator to be possibly null or undefined.",
                  "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                  "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                  "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowConstantLoopConditions": {
                        "description": "Whether to ignore constant loop conditions, such as \`while (true)\`.",
                        "type": "boolean",
                      },
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unnecessary-qualifier": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow unnecessary namespace qualifiers",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
                },
                "fixable": "code",
                "messages": {
                  "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unnecessary-type-arguments": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow type arguments that are equal to the default",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
                },
                "fixable": "code",
                "messages": {
                  "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unnecessary-type-assertion": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "docs": {
                  "description": "Disallow type assertions that do not change the type of an expression",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
                },
                "fixable": "code",
                "messages": {
                  "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                  "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "typesToIgnore": {
                        "description": "A list of type names to ignore.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unnecessary-type-constraint": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow unnecessary constraints on generic types",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
                },
                "hasSuggestions": true,
                "messages": {
                  "removeUnnecessaryConstraint": "Remove the unnecessary \`{{constraint}}\` constraint.",
                  "unnecessaryConstraint": "Constraining the generic type \`{{name}}\` to \`{{constraint}}\` does nothing and is unnecessary.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unsafe-argument": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow calling a function with a value with type \`any\`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
                },
                "messages": {
                  "unsafeArgument": "Unsafe argument of type \`{{sender}}\` assigned to a parameter of type \`{{receiver}}\`.",
                  "unsafeArraySpread": "Unsafe spread of an \`any\` array type.",
                  "unsafeSpread": "Unsafe spread of an \`any\` type.",
                  "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is of type \`{{sender}}\` and is assigned to a parameter of type \`{{receiver}}\`.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-assignment": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow assigning a value with type \`any\` to variables and properties",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
                },
                "messages": {
                  "anyAssignment": "Unsafe assignment of an \`any\` value.",
                  "anyAssignmentThis": "Unsafe assignment of an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                  "unsafeArrayPattern": "Unsafe array destructuring of an \`any\` array value.",
                  "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an \`any\` value.",
                  "unsafeArraySpread": "Unsafe spread of an \`any\` value in an array.",
                  "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-call": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow calling a value with type \`any\`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-call",
                },
                "messages": {
                  "unsafeCall": "Unsafe call of an \`any\` typed value.",
                  "unsafeCallThis": "Unsafe call of an \`any\` typed value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                  "unsafeNew": "Unsafe construction of an any type value.",
                  "unsafeTemplateTag": "Unsafe any typed template tag.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-declaration-merging": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow unsafe declaration merging",
                  "recommended": "recommended",
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
                },
                "messages": {
                  "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-enum-comparison": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow comparing an enum value with a non-enum value",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
                },
                "hasSuggestions": true,
                "messages": {
                  "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                  "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                  "replaceValueWithEnum": "Replace with an enum value comparison.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unsafe-member-access": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow member access on a value with type \`any\`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
                },
                "messages": {
                  "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an any value.",
                  "unsafeMemberExpression": "Unsafe member access {{property}} on an \`any\` value.",
                  "unsafeThisMemberExpression": "Unsafe member access {{property}} on an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-return": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow returning a value with type \`any\` from a function",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-return",
                },
                "messages": {
                  "unsafeReturn": "Unsafe return of an \`{{type}}\` typed value.",
                  "unsafeReturnAssignment": "Unsafe return of type \`{{sender}}\` from function with return type \`{{receiver}}\`.",
                  "unsafeReturnThis": "Unsafe return of an \`{{type}}\` typed value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unsafe-unary-minus": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Require unary negation to take a number",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
                },
                "messages": {
                  "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unused-expressions": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowShortCircuit": false,
                  "allowTaggedTemplates": false,
                  "allowTernary": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow unused expressions",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-unused-expressions",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowShortCircuit": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowTaggedTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowTernary": {
                        "default": false,
                        "type": "boolean",
                      },
                      "enforceForJSX": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unused-vars": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": false,
                  "recommended": "recommended",
                  "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
                },
                "fixable": "code",
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "enum": [
                              "all",
                              "after-used",
                              "none",
                            ],
                            "type": "string",
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                          },
                          "caughtErrors": {
                            "enum": [
                              "all",
                              "none",
                            ],
                            "type": "string",
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                          },
                          "vars": {
                            "enum": [
                              "all",
                              "local",
                            ],
                            "type": "string",
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
            },
            "no-use-before-define": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowNamedExports": false,
                  "classes": true,
                  "enums": true,
                  "functions": true,
                  "ignoreTypeReferences": true,
                  "typedefs": true,
                  "variables": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow the use of variables before they are defined",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-use-before-define",
                },
                "messages": {
                  "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "nofunc",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowNamedExports": {
                            "type": "boolean",
                          },
                          "classes": {
                            "type": "boolean",
                          },
                          "enums": {
                            "type": "boolean",
                          },
                          "functions": {
                            "type": "boolean",
                          },
                          "ignoreTypeReferences": {
                            "type": "boolean",
                          },
                          "typedefs": {
                            "type": "boolean",
                          },
                          "variables": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "problem",
              },
            },
            "no-useless-constructor": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow unnecessary constructors",
                  "extendsBaseRule": true,
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-useless-constructor",
                },
                "hasSuggestions": undefined,
                "messages": {
                  "noUselessConstructor": "Useless constructor.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-empty-export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow empty exports that don't change anything in a module file",
                  "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "uselessExport": "Empty export does nothing and can be removed.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-useless-template-literals": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow unnecessary template literals",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-useless-template-literals",
                },
                "messages": {
                  "noUselessTemplateLiteral": "Template literal expression is unnecessary and can be simplified.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-var-requires": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow \`require\` statements except in import statements",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-var-requires",
                },
                "messages": {
                  "noVarReqs": "Require statement not part of import statement.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "description": "Patterns of import paths to allow requiring from.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "non-nullable-type-assertion-style": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce non-null assertions over explicit type casts",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
                },
                "fixable": "code",
                "messages": {
                  "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "defaultOptions": [
                "never",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing inside braces",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/object-curly-spacing",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "replacedBy": [
                  "@stylistic/ts/object-curly-spacing",
                ],
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "padding-line-between-statements": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require or disallow padding lines between statements",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/padding-line-between-statements",
                },
                "fixable": "whitespace",
                "hasSuggestions": false,
                "messages": {
                  "expectedBlankLine": "Expected blank line before this statement.",
                  "unexpectedBlankLine": "Unexpected blank line before this statement.",
                },
                "replacedBy": [
                  "@stylistic/ts/padding-line-between-statements",
                ],
                "schema": {
                  "$defs": {
                    "paddingType": {
                      "enum": [
                        "any",
                        "never",
                        "always",
                      ],
                      "type": "string",
                    },
                    "statementType": {
                      "anyOf": [
                        {
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "interface",
                            "type",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "*",
                              "block-like",
                              "exports",
                              "require",
                              "directive",
                              "expression",
                              "iife",
                              "multiline-block-like",
                              "multiline-expression",
                              "multiline-const",
                              "multiline-let",
                              "multiline-var",
                              "singleline-const",
                              "singleline-let",
                              "singleline-var",
                              "block",
                              "empty",
                              "function",
                              "break",
                              "case",
                              "class",
                              "const",
                              "continue",
                              "debugger",
                              "default",
                              "do",
                              "export",
                              "for",
                              "if",
                              "import",
                              "let",
                              "return",
                              "switch",
                              "throw",
                              "try",
                              "var",
                              "while",
                              "with",
                              "interface",
                              "type",
                            ],
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      ],
                    },
                  },
                  "additionalItems": false,
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "blankLine": {
                        "$ref": "#/$defs/paddingType",
                      },
                      "next": {
                        "$ref": "#/$defs/statementType",
                      },
                      "prev": {
                        "$ref": "#/$defs/statementType",
                      },
                    },
                    "required": [
                      "blankLine",
                      "prev",
                      "next",
                    ],
                    "type": "object",
                  },
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "parameter-properties": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                  "prefer": "class-property",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require or disallow parameter properties in class constructors",
                  "url": "https://typescript-eslint.io/rules/parameter-properties",
                },
                "messages": {
                  "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                  "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
                },
                "schema": [
                  {
                    "$defs": {
                      "modifier": {
                        "enum": [
                          "readonly",
                          "private",
                          "protected",
                          "public",
                          "private readonly",
                          "protected readonly",
                          "public readonly",
                        ],
                        "type": "string",
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "$ref": "#/items/0/$defs/modifier",
                        },
                        "type": "array",
                      },
                      "prefer": {
                        "enum": [
                          "class-property",
                          "parameter-property",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "prefer-as-const": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce the use of \`as const\` over literal type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/prefer-as-const",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "preferConstAssertion": "Expected a \`const\` instead of a literal type assertion.",
                  "variableConstAssertion": "Expected a \`const\` assertion instead of a literal type annotation.",
                  "variableSuggest": "You should use \`as const\` instead of type annotation.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-destructuring": {
              "create": [Function],
              "defaultOptions": [
                {
                  "AssignmentExpression": {
                    "array": true,
                    "object": true,
                  },
                  "VariableDeclarator": {
                    "array": true,
                    "object": true,
                  },
                },
                {},
              ],
              "meta": {
                "docs": {
                  "description": "Require destructuring from arrays and/or objects",
                  "extendsBaseRule": true,
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-destructuring",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "preferDestructuring": "Use {{type}} destructuring.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "AssignmentExpression": {
                            "additionalProperties": false,
                            "properties": {
                              "array": {
                                "type": "boolean",
                              },
                              "object": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "VariableDeclarator": {
                            "additionalProperties": false,
                            "properties": {
                              "array": {
                                "type": "boolean",
                              },
                              "object": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "array": {
                            "type": "boolean",
                          },
                          "object": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  {
                    "properties": {
                      "enforceForDeclarationWithTypeAnnotation": {
                        "type": "boolean",
                      },
                      "enforceForRenamedProperties": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-enum-initializers": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Require each enum member value to be explicitly initialized",
                  "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
                },
                "hasSuggestions": true,
                "messages": {
                  "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                  "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-for-of": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce the use of \`for-of\` loop over the standard \`for\` loop where possible",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/prefer-for-of",
                },
                "messages": {
                  "preferForOf": "Expected a \`for-of\` loop instead of a \`for\` loop with this simple iteration.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-function-type": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce using function types instead of interfaces with call signatures",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/prefer-function-type",
                },
                "fixable": "code",
                "messages": {
                  "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                  "unexpectedThisOnFunctionOnlyInterface": "\`this\` refers to the function type '{{ interfaceName }}', did you intend to use a generic \`this\` parameter like \`<Self>(this: Self, ...) => Self\` instead?",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-includes": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce \`includes\` method over \`indexOf\` method",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-includes",
                },
                "fixable": "code",
                "messages": {
                  "preferIncludes": "Use 'includes()' method instead.",
                  "preferStringIncludes": "Use \`String#includes()\` method with a string instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-literal-enum-member": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowBitwiseExpressions": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require all enum members to be literal values",
                  "recommended": "strict",
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
                },
                "messages": {
                  "notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc).",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowBitwiseExpressions": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-namespace-keyword": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Require using \`namespace\` keyword over \`module\` keyword to declare custom TypeScript modules",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
                },
                "fixable": "code",
                "messages": {
                  "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-nullish-coalescing": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                  "ignoreConditionalTests": false,
                  "ignoreMixedLogicalExpressions": false,
                  "ignorePrimitives": {
                    "bigint": false,
                    "boolean": false,
                    "number": false,
                    "string": false,
                  },
                  "ignoreTernaryTests": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
                },
                "hasSuggestions": true,
                "messages": {
                  "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                  "preferNullishOverOr": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
                  "preferNullishOverTernary": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.",
                  "suggestNullish": "Fix to nullish coalescing operator (\`??\`).",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                      },
                      "ignoreConditionalTests": {
                        "type": "boolean",
                      },
                      "ignoreMixedLogicalExpressions": {
                        "type": "boolean",
                      },
                      "ignorePrimitives": {
                        "oneOf": [
                          {
                            "properties": {
                              "bigint": {
                                "type": "boolean",
                              },
                              "boolean": {
                                "type": "boolean",
                              },
                              "number": {
                                "type": "boolean",
                              },
                              "string": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "enum": [
                              true,
                            ],
                            "type": "boolean",
                          },
                        ],
                      },
                      "ignoreTernaryTests": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-optional-chain": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                  "checkAny": true,
                  "checkBigInt": true,
                  "checkBoolean": true,
                  "checkNumber": true,
                  "checkString": true,
                  "checkUnknown": true,
                  "requireNullish": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "optionalChainSuggest": "Change to an optional chain.",
                  "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                        "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                        "type": "boolean",
                      },
                      "checkAny": {
                        "description": "Check operands that are typed as \`any\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "checkBigInt": {
                        "description": "Check operands that are typed as \`bigint\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "checkBoolean": {
                        "description": "Check operands that are typed as \`boolean\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "checkNumber": {
                        "description": "Check operands that are typed as \`number\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "checkString": {
                        "description": "Check operands that are typed as \`string\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "checkUnknown": {
                        "description": "Check operands that are typed as \`unknown\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                      "requireNullish": {
                        "description": "Skip operands that are not typed with \`null\` and/or \`undefined\` when inspecting "loose boolean" operands.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-readonly": {
              "create": [Function],
              "defaultOptions": [
                {
                  "onlyInlineLambdas": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require private members to be marked as \`readonly\` if they're never modified outside of the constructor",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-readonly",
                },
                "fixable": "code",
                "messages": {
                  "preferReadonly": "Member '{{name}}' is never reassigned; mark it as \`readonly\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "onlyInlineLambdas": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-readonly-parameter-types": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allow": [],
                  "checkParameterProperties": true,
                  "ignoreInferredTypes": false,
                  "treatMethodsAsReadonly": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require function parameters to be typed as \`readonly\` to prevent accidental mutation of inputs",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
                },
                "messages": {
                  "shouldBeReadonly": "Parameter should be a read only type.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "oneOf": [
                            {
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": {
                                  "enum": [
                                    "file",
                                  ],
                                  "type": "string",
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  ],
                                },
                                "path": {
                                  "type": "string",
                                },
                              },
                              "required": [
                                "from",
                                "name",
                              ],
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": {
                                  "enum": [
                                    "lib",
                                  ],
                                  "type": "string",
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  ],
                                },
                              },
                              "required": [
                                "from",
                                "name",
                              ],
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": {
                                  "enum": [
                                    "package",
                                  ],
                                  "type": "string",
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  ],
                                },
                                "package": {
                                  "type": "string",
                                },
                              },
                              "required": [
                                "from",
                                "name",
                                "package",
                              ],
                              "type": "object",
                            },
                          ],
                        },
                        "type": "array",
                      },
                      "checkParameterProperties": {
                        "type": "boolean",
                      },
                      "ignoreInferredTypes": {
                        "type": "boolean",
                      },
                      "treatMethodsAsReadonly": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-reduce-type-parameter": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce using type parameter when calling \`Array#reduce\` instead of casting",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
                },
                "fixable": "code",
                "messages": {
                  "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "prefer-regexp-exec": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce \`RegExp#exec\` over \`String#match\` if no global flag is provided",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
                },
                "fixable": "code",
                "messages": {
                  "regExpExecOverStringMatch": "Use the \`RegExp#exec()\` method instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-return-this-type": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce that \`this\` is used when only \`this\` type is returned",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
                },
                "fixable": "code",
                "messages": {
                  "useThisType": "Use \`this\` type instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-string-starts-ends-with": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce using \`String#startsWith\` and \`String#endsWith\` over other equivalent methods of checking substrings",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
                },
                "fixable": "code",
                "messages": {
                  "preferEndsWith": "Use the 'String#endsWith' method instead.",
                  "preferStartsWith": "Use 'String#startsWith' method instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-ts-expect-error": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce using \`@ts-expect-error\` over \`@ts-ignore\`",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
                },
                "fixable": "code",
                "messages": {
                  "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "promise-function-async": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAny": true,
                  "allowedPromiseNames": [],
                  "checkArrowFunctions": true,
                  "checkFunctionDeclarations": true,
                  "checkFunctionExpressions": true,
                  "checkMethodDeclarations": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require any function or method that returns a Promise to be marked async",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/promise-function-async",
                },
                "fixable": "code",
                "messages": {
                  "missingAsync": "Functions that return promises must be async.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "description": "Whether to consider \`any\` and \`unknown\` to be Promises.",
                        "type": "boolean",
                      },
                      "allowedPromiseNames": {
                        "description": "Any extra names of classes or interfaces to be considered Promises.",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "checkArrowFunctions": {
                        "type": "boolean",
                      },
                      "checkFunctionDeclarations": {
                        "type": "boolean",
                      },
                      "checkFunctionExpressions": {
                        "type": "boolean",
                      },
                      "checkMethodDeclarations": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "quotes": {
              "create": [Function],
              "defaultOptions": [
                "double",
                {
                  "allowTemplateLiterals": false,
                  "avoidEscape": false,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce the consistent use of either backticks, double, or single quotes",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/quotes",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "replacedBy": [
                  "@stylistic/ts/quotes",
                ],
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "require-array-sort-compare": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreStringArrays": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require \`Array#sort\` and \`Array#toSorted\` calls to always provide a \`compareFunction\`",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
                },
                "messages": {
                  "requireCompare": "Require 'compare' argument.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreStringArrays": {
                        "description": "Whether to ignore arrays in which all elements are strings.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "require-await": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Disallow async functions which have no \`await\` expression",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/require-await",
                },
                "messages": {
                  "missingAwait": "{{name}} has no 'await' expression.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "restrict-plus-operands": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAny": true,
                  "allowBoolean": true,
                  "allowNullish": true,
                  "allowNumberAndString": true,
                  "allowRegExp": true,
                  "skipCompoundAssignments": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require both operands of addition to be the same type and be \`bigint\`, \`number\`, or \`string\`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
                },
                "messages": {
                  "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got \`{{left}}\` + \`{{right}}\`.",
                  "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got \`{{type}}\`.",
                  "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got \`{{left}}\` + \`{{right}}\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "description": "Whether to allow \`any\` typed values.",
                        "type": "boolean",
                      },
                      "allowBoolean": {
                        "description": "Whether to allow \`boolean\` typed values.",
                        "type": "boolean",
                      },
                      "allowNullish": {
                        "description": "Whether to allow potentially \`null\` or \`undefined\` typed values.",
                        "type": "boolean",
                      },
                      "allowNumberAndString": {
                        "description": "Whether to allow \`bigint\`/\`number\` typed values and \`string\` typed values to be added together.",
                        "type": "boolean",
                      },
                      "allowRegExp": {
                        "description": "Whether to allow \`regexp\` typed values.",
                        "type": "boolean",
                      },
                      "skipCompoundAssignments": {
                        "description": "Whether to skip compound assignments such as \`+=\`.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "restrict-template-expressions": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAny": true,
                  "allowBoolean": true,
                  "allowNullish": true,
                  "allowNumber": true,
                  "allowRegExp": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce template literal expressions to be of \`string\` type",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
                },
                "messages": {
                  "invalidType": "Invalid type "{{type}}" of template literal expression.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "description": "Whether to allow \`any\` typed values in template expressions.",
                        "type": "boolean",
                      },
                      "allowBoolean": {
                        "description": "Whether to allow \`boolean\` typed values in template expressions.",
                        "type": "boolean",
                      },
                      "allowNever": {
                        "description": "Whether to allow \`never\` typed values in template expressions.",
                        "type": "boolean",
                      },
                      "allowNullish": {
                        "description": "Whether to allow \`nullish\` typed values in template expressions.",
                        "type": "boolean",
                      },
                      "allowNumber": {
                        "description": "Whether to allow \`number\` typed values in template expressions.",
                        "type": "boolean",
                      },
                      "allowRegExp": {
                        "description": "Whether to allow \`regexp\` typed values in template expressions.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "return-await": {
              "create": [Function],
              "defaultOptions": [
                "in-try-catch",
              ],
              "meta": {
                "docs": {
                  "description": "Enforce consistent returning of awaited values",
                  "extendsBaseRule": "no-return-await",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/return-await",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                  "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                  "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                },
                "schema": [
                  {
                    "enum": [
                      "in-try-catch",
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                ],
                "type": "problem",
              },
            },
            "semi": {
              "create": [Function],
              "defaultOptions": [
                "always",
                {
                  "beforeStatementContinuationChars": "any",
                  "omitLastInOneLineBlock": false,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require or disallow semicolons instead of ASI",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/semi",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "extraSemi": "Extra semicolon.",
                  "missingSemi": "Missing semicolon.",
                },
                "replacedBy": [
                  "@stylistic/ts/semi",
                ],
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "never",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "beforeStatementContinuationChars": {
                              "enum": [
                                "always",
                                "any",
                                "never",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "omitLastInOneLineBlock": {
                              "type": "boolean",
                            },
                            "omitLastInOneLineClassBody": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "sort-type-constituents": {
              "create": [Function],
              "defaultOptions": [
                {
                  "checkIntersections": true,
                  "checkUnions": true,
                  "groupOrder": [
                    "named",
                    "keyword",
                    "operator",
                    "literal",
                    "function",
                    "import",
                    "conditional",
                    "object",
                    "tuple",
                    "intersection",
                    "union",
                    "nullish",
                  ],
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                  "url": "https://typescript-eslint.io/rules/sort-type-constituents",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "notSorted": "{{type}} type constituents must be sorted.",
                  "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                  "suggestFix": "Sort constituents of type (removes all comments).",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checkIntersections": {
                        "description": "Whether to check intersection types.",
                        "type": "boolean",
                      },
                      "checkUnions": {
                        "description": "Whether to check union types.",
                        "type": "boolean",
                      },
                      "groupOrder": {
                        "description": "Ordering of the groups.",
                        "items": {
                          "enum": [
                            "conditional",
                            "function",
                            "import",
                            "intersection",
                            "keyword",
                            "nullish",
                            "literal",
                            "named",
                            "object",
                            "operator",
                            "tuple",
                            "union",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "space-before-blocks": {
              "create": [Function],
              "defaultOptions": [
                "always",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing before blocks",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/space-before-blocks",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "missingSpace": "Missing space before opening brace.",
                  "unexpectedSpace": "Unexpected space before opening brace.",
                },
                "replacedBy": [
                  "@stylistic/ts/space-before-blocks",
                ],
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "classes": {
                            "enum": [
                              "always",
                              "never",
                              "off",
                            ],
                          },
                          "functions": {
                            "enum": [
                              "always",
                              "never",
                              "off",
                            ],
                          },
                          "keywords": {
                            "enum": [
                              "always",
                              "never",
                              "off",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "space-before-function-paren": {
              "create": [Function],
              "defaultOptions": [
                "always",
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Enforce consistent spacing before function parenthesis",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/space-before-function-paren",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "Missing space before function parentheses.",
                  "unexpected": "Unexpected space before function parentheses.",
                },
                "replacedBy": [
                  "@stylistic/ts/space-before-function-paren",
                ],
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "anonymous": {
                            "enum": [
                              "always",
                              "never",
                              "ignore",
                            ],
                            "type": "string",
                          },
                          "asyncArrow": {
                            "enum": [
                              "always",
                              "never",
                              "ignore",
                            ],
                            "type": "string",
                          },
                          "named": {
                            "enum": [
                              "always",
                              "never",
                              "ignore",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "space-infix-ops": {
              "create": [Function],
              "defaultOptions": [
                {
                  "int32Hint": false,
                },
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require spacing around infix operators",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/space-infix-ops",
                },
                "fixable": "whitespace",
                "hasSuggestions": undefined,
                "messages": {
                  "missingSpace": "Operator '{{operator}}' must be spaced.",
                },
                "replacedBy": [
                  "@stylistic/ts/space-infix-ops",
                ],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "int32Hint": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "strict-boolean-expressions": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowAny": false,
                  "allowNullableBoolean": false,
                  "allowNullableEnum": false,
                  "allowNullableNumber": false,
                  "allowNullableObject": true,
                  "allowNullableString": false,
                  "allowNumber": true,
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                  "allowString": true,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow certain types in boolean expressions",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
                  "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
                  "conditionErrorNullableEnum": "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                  "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                  "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
                  "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
                  "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                  "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
                  "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
                  "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                  "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
                  "conditionFixCastBoolean": "Explicitly cast value to a boolean (\`Boolean(value)\`)",
                  "conditionFixCompareEmptyString": "Change condition to check for empty string (\`value !== ""\`)",
                  "conditionFixCompareFalse": "Change condition to check if false (\`value === false\`)",
                  "conditionFixCompareNaN": "Change condition to check for NaN (\`!Number.isNaN(value)\`)",
                  "conditionFixCompareNullish": "Change condition to check for null/undefined (\`value != null\`)",
                  "conditionFixCompareStringLength": "Change condition to check string's length (\`value.length !== 0\`)",
                  "conditionFixCompareTrue": "Change condition to check if true (\`value === true\`)",
                  "conditionFixCompareZero": "Change condition to check for 0 (\`value !== 0\`)",
                  "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (\`value ?? ""\`)",
                  "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (\`value ?? false\`)",
                  "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (\`value ?? 0\`)",
                  "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "type": "boolean",
                      },
                      "allowNullableBoolean": {
                        "type": "boolean",
                      },
                      "allowNullableEnum": {
                        "type": "boolean",
                      },
                      "allowNullableNumber": {
                        "type": "boolean",
                      },
                      "allowNullableObject": {
                        "type": "boolean",
                      },
                      "allowNullableString": {
                        "type": "boolean",
                      },
                      "allowNumber": {
                        "type": "boolean",
                      },
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                      },
                      "allowString": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "switch-exhaustiveness-check": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowDefaultCaseForExhaustiveSwitch": true,
                  "requireDefaultForNonUnion": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require switch-case statements to be exhaustive",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
                },
                "hasSuggestions": true,
                "messages": {
                  "addMissingCases": "Add branches for missing cases.",
                  "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                  "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowDefaultCaseForExhaustiveSwitch": {
                        "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                        "type": "boolean",
                      },
                      "requireDefaultForNonUnion": {
                        "description": "If 'true', require a 'default' clause for switches on non-union types.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "triple-slash-reference": {
              "create": [Function],
              "defaultOptions": [
                {
                  "lib": "always",
                  "path": "never",
                  "types": "prefer-import",
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/triple-slash-reference",
                },
                "messages": {
                  "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use \`import\` style instead.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "lib": {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                      "path": {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                      "types": {
                        "enum": [
                          "always",
                          "never",
                          "prefer-import",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "type-annotation-spacing": {
              "create": [Function],
              "defaultOptions": [
                {},
              ],
              "meta": {
                "deprecated": true,
                "docs": {
                  "description": "Require consistent spacing around type annotations",
                  "url": "https://typescript-eslint.io/rules/type-annotation-spacing",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                  "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                  "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                  "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                  "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'.",
                },
                "replacedBy": [
                  "@stylistic/ts/type-annotation-spacing",
                ],
                "schema": [
                  {
                    "$defs": {
                      "spacingConfig": {
                        "additionalProperties": false,
                        "properties": {
                          "after": {
                            "type": "boolean",
                          },
                          "before": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "type": "boolean",
                      },
                      "before": {
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": false,
                        "properties": {
                          "arrow": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                          "colon": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                          "parameter": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                          "property": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                          "returnType": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                          "variable": {
                            "$ref": "#/items/0/$defs/spacingConfig",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "typedef": {
              "create": [Function],
              "defaultOptions": [
                {
                  "arrayDestructuring": false,
                  "arrowParameter": false,
                  "memberVariableDeclaration": false,
                  "objectDestructuring": false,
                  "parameter": false,
                  "propertyDeclaration": false,
                  "variableDeclaration": false,
                  "variableDeclarationIgnoreFunction": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Require type annotations in certain places",
                  "url": "https://typescript-eslint.io/rules/typedef",
                },
                "messages": {
                  "expectedTypedef": "Expected a type annotation.",
                  "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arrayDestructuring": {
                        "type": "boolean",
                      },
                      "arrowParameter": {
                        "type": "boolean",
                      },
                      "memberVariableDeclaration": {
                        "type": "boolean",
                      },
                      "objectDestructuring": {
                        "type": "boolean",
                      },
                      "parameter": {
                        "type": "boolean",
                      },
                      "propertyDeclaration": {
                        "type": "boolean",
                      },
                      "variableDeclaration": {
                        "type": "boolean",
                      },
                      "variableDeclarationIgnoreFunction": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "unbound-method": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreStatic": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Enforce unbound methods are called with their expected scope",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/unbound-method",
                },
                "messages": {
                  "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
                  "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreStatic": {
                        "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "unified-signatures": {
              "create": [Function],
              "defaultOptions": [
                {
                  "ignoreDifferentlyNamedParameters": false,
                },
              ],
              "meta": {
                "docs": {
                  "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/unified-signatures",
                },
                "messages": {
                  "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                  "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                  "singleParameterDifference": "{{failureStringStart}} taking \`{{type1}} | {{type2}}\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreDifferentlyNamedParameters": {
                        "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
          },
        },
      },
    },
    "rules": {
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/ban-types": "off",
      "@typescript-eslint/consistent-type-definitions": [
        "error",
        "interface",
      ],
      "@typescript-eslint/consistent-type-imports": [
        "error",
        {
          "disallowTypeAnnotations": false,
          "prefer": "type-imports",
        },
      ],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-duplicate-enum-values": "error",
      "@typescript-eslint/no-dynamic-delete": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@typescript-eslint/no-extraneous-class": "error",
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/no-loss-of-precision": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/no-this-alias": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-declaration-merging": "error",
      "@typescript-eslint/no-unused-vars": "error",
      "@typescript-eslint/no-use-before-define": [
        "error",
        {
          "classes": false,
          "functions": false,
          "variables": true,
        },
      ],
      "@typescript-eslint/no-useless-constructor": "error",
      "@typescript-eslint/no-var-requires": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-literal-enum-member": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/triple-slash-reference": "error",
      "@typescript-eslint/unified-signatures": "error",
      "no-array-constructor": "off",
      "no-loss-of-precision": "off",
      "no-unused-vars": "off",
      "no-useless-constructor": "off",
    },
  },
  {
    "files": [
      "**/*.d.ts",
    ],
    "rules": {
      "eslint-comments/no-unlimited-disable": "off",
      "import/no-duplicates": "off",
      "no-restricted-syntax": "off",
      "unused-imports/no-unused-vars": "off",
    },
  },
  {
    "files": [
      "**/*.{test,spec}.ts?(x)",
    ],
    "rules": {
      "no-unused-expressions": "off",
    },
  },
  {
    "files": [
      "**/*.js",
      "**/*.cjs",
    ],
    "rules": {
      "@typescript-eslint/no-require-imports": "off",
      "@typescript-eslint/no-var-requires": "off",
    },
  },
  {
    "files": [
      "**/*.vue",
    ],
    "languageOptions": {
      "parser": {
        "AST": {
          "KEYS": {
            "ArrayExpression": [
              "elements",
            ],
            "ArrayPattern": [
              "elements",
            ],
            "ArrowFunctionExpression": [
              "params",
              "body",
            ],
            "AssignmentExpression": [
              "left",
              "right",
            ],
            "AssignmentPattern": [
              "left",
              "right",
            ],
            "AwaitExpression": [
              "argument",
            ],
            "BinaryExpression": [
              "left",
              "right",
            ],
            "BlockStatement": [
              "body",
            ],
            "BreakStatement": [
              "label",
            ],
            "CallExpression": [
              "callee",
              "arguments",
            ],
            "CatchClause": [
              "param",
              "body",
            ],
            "ChainExpression": [
              "expression",
            ],
            "ClassBody": [
              "body",
            ],
            "ClassDeclaration": [
              "id",
              "superClass",
              "body",
            ],
            "ClassExpression": [
              "id",
              "superClass",
              "body",
            ],
            "ConditionalExpression": [
              "test",
              "consequent",
              "alternate",
            ],
            "ContinueStatement": [
              "label",
            ],
            "DebuggerStatement": [],
            "DoWhileStatement": [
              "body",
              "test",
            ],
            "EmptyStatement": [],
            "ExperimentalRestProperty": [
              "argument",
            ],
            "ExperimentalSpreadProperty": [
              "argument",
            ],
            "ExportAllDeclaration": [
              "exported",
              "source",
            ],
            "ExportDefaultDeclaration": [
              "declaration",
            ],
            "ExportNamedDeclaration": [
              "declaration",
              "specifiers",
              "source",
            ],
            "ExportSpecifier": [
              "exported",
              "local",
            ],
            "ExpressionStatement": [
              "expression",
            ],
            "ForInStatement": [
              "left",
              "right",
              "body",
            ],
            "ForOfStatement": [
              "left",
              "right",
              "body",
            ],
            "ForStatement": [
              "init",
              "test",
              "update",
              "body",
            ],
            "FunctionDeclaration": [
              "id",
              "params",
              "body",
            ],
            "FunctionExpression": [
              "id",
              "params",
              "body",
            ],
            "Identifier": [],
            "IfStatement": [
              "test",
              "consequent",
              "alternate",
            ],
            "ImportDeclaration": [
              "specifiers",
              "source",
            ],
            "ImportDefaultSpecifier": [
              "local",
            ],
            "ImportExpression": [
              "source",
            ],
            "ImportNamespaceSpecifier": [
              "local",
            ],
            "ImportSpecifier": [
              "imported",
              "local",
            ],
            "JSXAttribute": [
              "name",
              "value",
            ],
            "JSXClosingElement": [
              "name",
            ],
            "JSXClosingFragment": [],
            "JSXElement": [
              "openingElement",
              "children",
              "closingElement",
            ],
            "JSXEmptyExpression": [],
            "JSXExpressionContainer": [
              "expression",
            ],
            "JSXFragment": [
              "openingFragment",
              "children",
              "closingFragment",
            ],
            "JSXIdentifier": [],
            "JSXMemberExpression": [
              "object",
              "property",
            ],
            "JSXNamespacedName": [
              "namespace",
              "name",
            ],
            "JSXOpeningElement": [
              "name",
              "attributes",
            ],
            "JSXOpeningFragment": [],
            "JSXSpreadAttribute": [
              "argument",
            ],
            "JSXSpreadChild": [
              "expression",
            ],
            "JSXText": [],
            "LabeledStatement": [
              "label",
              "body",
            ],
            "Literal": [],
            "LogicalExpression": [
              "left",
              "right",
            ],
            "MemberExpression": [
              "object",
              "property",
            ],
            "MetaProperty": [
              "meta",
              "property",
            ],
            "MethodDefinition": [
              "key",
              "value",
            ],
            "NewExpression": [
              "callee",
              "arguments",
            ],
            "ObjectExpression": [
              "properties",
            ],
            "ObjectPattern": [
              "properties",
            ],
            "PrivateIdentifier": [],
            "Program": [
              "body",
            ],
            "Property": [
              "key",
              "value",
            ],
            "PropertyDefinition": [
              "key",
              "value",
            ],
            "RestElement": [
              "argument",
            ],
            "ReturnStatement": [
              "argument",
            ],
            "SequenceExpression": [
              "expressions",
            ],
            "SpreadElement": [
              "argument",
            ],
            "StaticBlock": [
              "body",
            ],
            "Super": [],
            "SwitchCase": [
              "test",
              "consequent",
            ],
            "SwitchStatement": [
              "discriminant",
              "cases",
            ],
            "TaggedTemplateExpression": [
              "tag",
              "quasi",
            ],
            "TemplateElement": [],
            "TemplateLiteral": [
              "quasis",
              "expressions",
            ],
            "ThisExpression": [],
            "ThrowStatement": [
              "argument",
            ],
            "TryStatement": [
              "block",
              "handler",
              "finalizer",
            ],
            "UnaryExpression": [
              "argument",
            ],
            "UpdateExpression": [
              "argument",
            ],
            "VAttribute": [
              "key",
              "value",
            ],
            "VDirectiveKey": [
              "name",
              "argument",
              "modifiers",
            ],
            "VDocumentFragment": [
              "children",
            ],
            "VElement": [
              "startTag",
              "children",
              "endTag",
            ],
            "VEndTag": [],
            "VExpressionContainer": [
              "expression",
            ],
            "VFilter": [
              "callee",
              "arguments",
            ],
            "VFilterSequenceExpression": [
              "expression",
              "filters",
            ],
            "VForExpression": [
              "left",
              "right",
            ],
            "VIdentifier": [],
            "VLiteral": [],
            "VOnExpression": [
              "body",
            ],
            "VSlotScopeExpression": [
              "params",
            ],
            "VStartTag": [
              "attributes",
            ],
            "VText": [],
            "VariableDeclaration": [
              "declarations",
            ],
            "VariableDeclarator": [
              "id",
              "init",
            ],
            "WhileStatement": [
              "test",
              "body",
            ],
            "WithStatement": [
              "object",
              "body",
            ],
            "YieldExpression": [
              "argument",
            ],
          },
          "NS": {
            "HTML": "http://www.w3.org/1999/xhtml",
            "MathML": "http://www.w3.org/1998/Math/MathML",
            "SVG": "http://www.w3.org/2000/svg",
            "XLink": "http://www.w3.org/1999/xlink",
            "XML": "http://www.w3.org/XML/1998/namespace",
            "XMLNS": "http://www.w3.org/2000/xmlns/",
          },
          "ParseError": [Function],
          "getFallbackKeys": [Function],
          "traverseNodes": [Function],
        },
        "meta": {
          "name": "vue-eslint-parser",
          "version": "9.4.0",
        },
        "parse": [Function],
        "parseForESLint": [Function],
      },
    },
    "plugins": {
      "vue": {
        "default": {
          "configs": {
            "base": {
              "env": {
                "browser": true,
                "es6": true,
              },
              "parser": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\vue-eslint-parser@9.4.0_eslint@8.56.0\\node_modules\\vue-eslint-parser\\index.js",
              "parserOptions": {
                "ecmaVersion": 2020,
                "sourceType": "module",
              },
              "plugins": [
                "vue",
              ],
              "rules": {
                "vue/comment-directive": "error",
                "vue/jsx-uses-vars": "error",
              },
            },
            "essential": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\base.js",
              "rules": {
                "vue/multi-word-component-names": "error",
                "vue/no-arrow-functions-in-watch": "error",
                "vue/no-async-in-computed-properties": "error",
                "vue/no-child-content": "error",
                "vue/no-computed-properties-in-data": "error",
                "vue/no-custom-modifiers-on-v-model": "error",
                "vue/no-dupe-keys": "error",
                "vue/no-dupe-v-else-if": "error",
                "vue/no-duplicate-attributes": "error",
                "vue/no-export-in-script-setup": "error",
                "vue/no-multiple-template-root": "error",
                "vue/no-mutating-props": "error",
                "vue/no-parsing-error": "error",
                "vue/no-ref-as-operand": "error",
                "vue/no-reserved-component-names": "error",
                "vue/no-reserved-keys": "error",
                "vue/no-reserved-props": [
                  "error",
                  {
                    "vueVersion": 2,
                  },
                ],
                "vue/no-shared-component-data": "error",
                "vue/no-side-effects-in-computed-properties": "error",
                "vue/no-template-key": "error",
                "vue/no-textarea-mustache": "error",
                "vue/no-unused-components": "error",
                "vue/no-unused-vars": "error",
                "vue/no-use-computed-property-like-method": "error",
                "vue/no-use-v-if-with-v-for": "error",
                "vue/no-useless-template-attributes": "error",
                "vue/no-v-for-template-key": "error",
                "vue/no-v-model-argument": "error",
                "vue/no-v-text-v-html-on-component": "error",
                "vue/require-component-is": "error",
                "vue/require-prop-type-constructor": "error",
                "vue/require-render-return": "error",
                "vue/require-v-for-key": "error",
                "vue/require-valid-default-prop": "error",
                "vue/return-in-computed-property": "error",
                "vue/return-in-emits-validator": "error",
                "vue/use-v-on-exact": "error",
                "vue/valid-attribute-name": "error",
                "vue/valid-define-emits": "error",
                "vue/valid-define-props": "error",
                "vue/valid-model-definition": "error",
                "vue/valid-next-tick": "error",
                "vue/valid-template-root": "error",
                "vue/valid-v-bind": "error",
                "vue/valid-v-bind-sync": "error",
                "vue/valid-v-cloak": "error",
                "vue/valid-v-else": "error",
                "vue/valid-v-else-if": "error",
                "vue/valid-v-for": "error",
                "vue/valid-v-html": "error",
                "vue/valid-v-if": "error",
                "vue/valid-v-model": "error",
                "vue/valid-v-on": "error",
                "vue/valid-v-once": "error",
                "vue/valid-v-pre": "error",
                "vue/valid-v-show": "error",
                "vue/valid-v-slot": "error",
                "vue/valid-v-text": "error",
              },
            },
            "no-layout-rules": {
              "rules": {
                "vue/array-bracket-newline": "off",
                "vue/array-bracket-spacing": "off",
                "vue/array-element-newline": "off",
                "vue/arrow-spacing": "off",
                "vue/block-spacing": "off",
                "vue/block-tag-newline": "off",
                "vue/brace-style": "off",
                "vue/comma-dangle": "off",
                "vue/comma-spacing": "off",
                "vue/comma-style": "off",
                "vue/define-macros-order": "off",
                "vue/dot-location": "off",
                "vue/first-attribute-linebreak": "off",
                "vue/func-call-spacing": "off",
                "vue/html-closing-bracket-newline": "off",
                "vue/html-closing-bracket-spacing": "off",
                "vue/html-comment-content-newline": "off",
                "vue/html-comment-content-spacing": "off",
                "vue/html-comment-indent": "off",
                "vue/html-indent": "off",
                "vue/html-quotes": "off",
                "vue/html-self-closing": "off",
                "vue/key-spacing": "off",
                "vue/keyword-spacing": "off",
                "vue/max-attributes-per-line": "off",
                "vue/max-len": "off",
                "vue/multiline-html-element-content-newline": "off",
                "vue/multiline-ternary": "off",
                "vue/mustache-interpolation-spacing": "off",
                "vue/new-line-between-multi-line-property": "off",
                "vue/no-extra-parens": "off",
                "vue/no-multi-spaces": "off",
                "vue/no-spaces-around-equal-signs-in-attribute": "off",
                "vue/object-curly-newline": "off",
                "vue/object-curly-spacing": "off",
                "vue/object-property-newline": "off",
                "vue/operator-linebreak": "off",
                "vue/padding-line-between-blocks": "off",
                "vue/padding-line-between-tags": "off",
                "vue/padding-lines-in-component-definition": "off",
                "vue/quote-props": "off",
                "vue/script-indent": "off",
                "vue/singleline-html-element-content-newline": "off",
                "vue/space-in-parens": "off",
                "vue/space-infix-ops": "off",
                "vue/space-unary-ops": "off",
                "vue/template-curly-spacing": "off",
                "vue/v-for-delimiter-style": "off",
              },
            },
            "recommended": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\strongly-recommended.js",
              "rules": {
                "vue/attributes-order": "warn",
                "vue/component-tags-order": "warn",
                "vue/no-lone-template": "warn",
                "vue/no-multiple-slot-args": "warn",
                "vue/no-v-html": "warn",
                "vue/order-in-components": "warn",
                "vue/this-in-template": "warn",
              },
            },
            "strongly-recommended": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\essential.js",
              "rules": {
                "vue/attribute-hyphenation": "warn",
                "vue/component-definition-name-casing": "warn",
                "vue/first-attribute-linebreak": "warn",
                "vue/html-closing-bracket-newline": "warn",
                "vue/html-closing-bracket-spacing": "warn",
                "vue/html-end-tags": "warn",
                "vue/html-indent": "warn",
                "vue/html-quotes": "warn",
                "vue/html-self-closing": "warn",
                "vue/max-attributes-per-line": "warn",
                "vue/multiline-html-element-content-newline": "warn",
                "vue/mustache-interpolation-spacing": "warn",
                "vue/no-multi-spaces": "warn",
                "vue/no-spaces-around-equal-signs-in-attribute": "warn",
                "vue/no-template-shadow": "warn",
                "vue/one-component-per-file": "warn",
                "vue/prop-name-casing": "warn",
                "vue/require-default-prop": "warn",
                "vue/require-prop-types": "warn",
                "vue/singleline-html-element-content-newline": "warn",
                "vue/v-bind-style": "warn",
                "vue/v-on-style": "warn",
                "vue/v-slot-style": "warn",
              },
            },
            "vue3-essential": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\base.js",
              "rules": {
                "vue/multi-word-component-names": "error",
                "vue/no-arrow-functions-in-watch": "error",
                "vue/no-async-in-computed-properties": "error",
                "vue/no-child-content": "error",
                "vue/no-computed-properties-in-data": "error",
                "vue/no-deprecated-data-object-declaration": "error",
                "vue/no-deprecated-destroyed-lifecycle": "error",
                "vue/no-deprecated-dollar-listeners-api": "error",
                "vue/no-deprecated-dollar-scopedslots-api": "error",
                "vue/no-deprecated-events-api": "error",
                "vue/no-deprecated-filter": "error",
                "vue/no-deprecated-functional-template": "error",
                "vue/no-deprecated-html-element-is": "error",
                "vue/no-deprecated-inline-template": "error",
                "vue/no-deprecated-props-default-this": "error",
                "vue/no-deprecated-router-link-tag-prop": "error",
                "vue/no-deprecated-scope-attribute": "error",
                "vue/no-deprecated-slot-attribute": "error",
                "vue/no-deprecated-slot-scope-attribute": "error",
                "vue/no-deprecated-v-bind-sync": "error",
                "vue/no-deprecated-v-is": "error",
                "vue/no-deprecated-v-on-native-modifier": "error",
                "vue/no-deprecated-v-on-number-modifiers": "error",
                "vue/no-deprecated-vue-config-keycodes": "error",
                "vue/no-dupe-keys": "error",
                "vue/no-dupe-v-else-if": "error",
                "vue/no-duplicate-attributes": "error",
                "vue/no-export-in-script-setup": "error",
                "vue/no-expose-after-await": "error",
                "vue/no-lifecycle-after-await": "error",
                "vue/no-mutating-props": "error",
                "vue/no-parsing-error": "error",
                "vue/no-ref-as-operand": "error",
                "vue/no-reserved-component-names": "error",
                "vue/no-reserved-keys": "error",
                "vue/no-reserved-props": "error",
                "vue/no-shared-component-data": "error",
                "vue/no-side-effects-in-computed-properties": "error",
                "vue/no-template-key": "error",
                "vue/no-textarea-mustache": "error",
                "vue/no-unused-components": "error",
                "vue/no-unused-vars": "error",
                "vue/no-use-computed-property-like-method": "error",
                "vue/no-use-v-if-with-v-for": "error",
                "vue/no-useless-template-attributes": "error",
                "vue/no-v-for-template-key-on-child": "error",
                "vue/no-v-text-v-html-on-component": "error",
                "vue/no-watch-after-await": "error",
                "vue/prefer-import-from-vue": "error",
                "vue/require-component-is": "error",
                "vue/require-prop-type-constructor": "error",
                "vue/require-render-return": "error",
                "vue/require-slots-as-functions": "error",
                "vue/require-toggle-inside-transition": "error",
                "vue/require-v-for-key": "error",
                "vue/require-valid-default-prop": "error",
                "vue/return-in-computed-property": "error",
                "vue/return-in-emits-validator": "error",
                "vue/use-v-on-exact": "error",
                "vue/valid-attribute-name": "error",
                "vue/valid-define-emits": "error",
                "vue/valid-define-props": "error",
                "vue/valid-next-tick": "error",
                "vue/valid-template-root": "error",
                "vue/valid-v-bind": "error",
                "vue/valid-v-cloak": "error",
                "vue/valid-v-else": "error",
                "vue/valid-v-else-if": "error",
                "vue/valid-v-for": "error",
                "vue/valid-v-html": "error",
                "vue/valid-v-if": "error",
                "vue/valid-v-is": "error",
                "vue/valid-v-memo": "error",
                "vue/valid-v-model": "error",
                "vue/valid-v-on": "error",
                "vue/valid-v-once": "error",
                "vue/valid-v-pre": "error",
                "vue/valid-v-show": "error",
                "vue/valid-v-slot": "error",
                "vue/valid-v-text": "error",
              },
            },
            "vue3-recommended": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\vue3-strongly-recommended.js",
              "rules": {
                "vue/attributes-order": "warn",
                "vue/component-tags-order": "warn",
                "vue/no-lone-template": "warn",
                "vue/no-multiple-slot-args": "warn",
                "vue/no-v-html": "warn",
                "vue/order-in-components": "warn",
                "vue/this-in-template": "warn",
              },
            },
            "vue3-strongly-recommended": {
              "extends": "D:\\shinlms404\\eslint-config\\node_modules\\.pnpm\\eslint-plugin-vue@9.20.1_eslint@8.56.0\\node_modules\\eslint-plugin-vue\\lib\\configs\\vue3-essential.js",
              "rules": {
                "vue/attribute-hyphenation": "warn",
                "vue/component-definition-name-casing": "warn",
                "vue/first-attribute-linebreak": "warn",
                "vue/html-closing-bracket-newline": "warn",
                "vue/html-closing-bracket-spacing": "warn",
                "vue/html-end-tags": "warn",
                "vue/html-indent": "warn",
                "vue/html-quotes": "warn",
                "vue/html-self-closing": "warn",
                "vue/max-attributes-per-line": "warn",
                "vue/multiline-html-element-content-newline": "warn",
                "vue/mustache-interpolation-spacing": "warn",
                "vue/no-multi-spaces": "warn",
                "vue/no-spaces-around-equal-signs-in-attribute": "warn",
                "vue/no-template-shadow": "warn",
                "vue/one-component-per-file": "warn",
                "vue/prop-name-casing": "warn",
                "vue/require-default-prop": "warn",
                "vue/require-explicit-emits": "warn",
                "vue/require-prop-types": "warn",
                "vue/singleline-html-element-content-newline": "warn",
                "vue/v-bind-style": "warn",
                "vue/v-on-event-hyphenation": [
                  "warn",
                  "always",
                  {
                    "autofix": true,
                  },
                ],
                "vue/v-on-style": "warn",
                "vue/v-slot-style": "warn",
              },
            },
          },
          "environments": {
            "setup-compiler-macros": {
              "globals": {
                "defineEmits": "readonly",
                "defineExpose": "readonly",
                "defineProps": "readonly",
                "withDefaults": "readonly",
              },
            },
          },
          "meta": {
            "name": "eslint-plugin-vue",
            "version": "9.20.1",
          },
          "processors": {
            ".vue": {
              "meta": {
                "name": "eslint-plugin-vue",
                "version": "9.20.1",
              },
              "postprocess": [Function],
              "preprocess": [Function],
              "supportsAutofix": true,
            },
          },
          "rules": {
            "array-bracket-newline": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce linebreaks after opening and before closing array brackets in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/array-bracket-newline",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/array-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "array-bracket-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing inside array brackets in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/array-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "array-element-newline": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce line breaks after each array element in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/array-element-newline",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/array-element-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "replacedBy": undefined,
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "arrow-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing before and after the arrow in arrow functions in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/arrow-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/arrow-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedAfter": "Missing space after =>.",
                  "expectedBefore": "Missing space before =>.",
                  "unexpectedAfter": "Unexpected space after =>.",
                  "unexpectedBefore": "Unexpected space before =>.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "default": true,
                        "type": "boolean",
                      },
                      "before": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "attribute-hyphenation": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce attribute naming style on custom components in template",
                  "url": "https://eslint.vuejs.org/rules/attribute-hyphenation.html",
                },
                "fixable": "code",
                "messages": {
                  "cannotBeHyphenated": "Attribute '{{text}}' can't be hyphenated.",
                  "mustBeHyphenated": "Attribute '{{text}}' must be hyphenated.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignore": {
                        "additionalItems": false,
                        "items": {
                          "allOf": [
                            {
                              "type": "string",
                            },
                            {
                              "not": {
                                "pattern": ":exit$",
                                "type": "string",
                              },
                            },
                            {
                              "not": {
                                "pattern": "^\\s*$",
                                "type": "string",
                              },
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "attributes-order": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "enforce order of attributes",
                  "url": "https://eslint.vuejs.org/rules/attributes-order.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedOrder": "Attribute "{{currentNode}}" should go before "{{prevNode}}".",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "alphabetical": {
                        "type": "boolean",
                      },
                      "order": {
                        "additionalItems": false,
                        "items": {
                          "anyOf": [
                            {
                              "enum": [
                                "DEFINITION",
                                "LIST_RENDERING",
                                "CONDITIONALS",
                                "RENDER_MODIFIERS",
                                "GLOBAL",
                                "UNIQUE",
                                "SLOT",
                                "TWO_WAY_BINDING",
                                "OTHER_DIRECTIVES",
                                "OTHER_ATTR",
                                "ATTR_STATIC",
                                "ATTR_DYNAMIC",
                                "ATTR_SHORTHAND_BOOL",
                                "EVENTS",
                                "CONTENT",
                              ],
                            },
                            {
                              "items": {
                                "additionalItems": false,
                                "enum": [
                                  "DEFINITION",
                                  "LIST_RENDERING",
                                  "CONDITIONALS",
                                  "RENDER_MODIFIERS",
                                  "GLOBAL",
                                  "UNIQUE",
                                  "SLOT",
                                  "TWO_WAY_BINDING",
                                  "OTHER_DIRECTIVES",
                                  "OTHER_ATTR",
                                  "ATTR_STATIC",
                                  "ATTR_DYNAMIC",
                                  "ATTR_SHORTHAND_BOOL",
                                  "EVENTS",
                                  "CONTENT",
                                ],
                                "uniqueItems": true,
                              },
                              "type": "array",
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "block-lang": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow use other than available \`lang\`",
                  "url": "https://eslint.vuejs.org/rules/block-lang.html",
                },
                "messages": {
                  "expected": "Only {{allows}} can be used for the 'lang' attribute of '<{{tag}}>'.",
                  "missing": "The 'lang' attribute of '<{{tag}}>' is missing.",
                  "unexpected": "Do not specify the 'lang' attribute of '<{{tag}}>'.",
                  "unexpectedDefault": "Do not explicitly specify the default language for the 'lang' attribute of '<{{tag}}>'.",
                  "useOrNot": "Only {{allows}} can be used for the 'lang' attribute of '<{{tag}}>'. Or, not specifying the \`lang\` attribute is allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "minProperties": 1,
                    "patternProperties": {
                      "^(?:\\S+)$": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowNoLang": {
                                "type": "boolean",
                              },
                              "lang": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalItems": false,
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "block-order": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce order of component top-level elements",
                  "url": "https://eslint.vuejs.org/rules/block-order.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "'<{{elementName}}{{elementAttributes}}>' should be above '<{{firstUnorderedName}}{{firstUnorderedAttributes}}>' on line {{line}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "order": {
                        "additionalItems": false,
                        "items": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "block-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/block-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/block-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extra": "Unexpected space(s) {{location}} '{{token}}'.",
                  "missing": "Requires a space {{location}} '{{token}}'.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "block-tag-newline": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce line breaks after opening and before closing block-level tags",
                  "url": "https://eslint.vuejs.org/rules/block-tag-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedClosingLinebreak": "Expected {{expected}}  before '</{{tag}}>', but {{actual}} found.",
                  "expectedOpeningLinebreak": "Expected {{expected}} after '<{{tag}}>', but {{actual}} found.",
                  "missingClosingLinebreak": "A line break is required before '</{{tag}}>'.",
                  "missingOpeningLinebreak": "A line break is required after '<{{tag}}>'.",
                  "unexpectedOpeningLinebreak": "There should be no line break after '<{{tag}}>'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "blocks": {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^(?:\\S+)$": {
                            "additionalProperties": false,
                            "properties": {
                              "maxEmptyLines": {
                                "minimum": 0,
                                "type": "number",
                              },
                              "multiline": {
                                "enum": [
                                  "always",
                                  "never",
                                  "consistent",
                                  "ignore",
                                ],
                              },
                              "singleline": {
                                "enum": [
                                  "always",
                                  "never",
                                  "consistent",
                                  "ignore",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      "maxEmptyLines": {
                        "minimum": 0,
                        "type": "number",
                      },
                      "multiline": {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                          "ignore",
                        ],
                      },
                      "singleline": {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                          "ignore",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "brace-style": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent brace style for blocks in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/brace-style",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/brace-style.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "blockSameLine": "Statement inside of curly braces should be on next line.",
                  "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                  "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                  "sameLineClose": "Closing curly brace appears on the same line as the subsequent block.",
                  "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                  "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "1tbs",
                      "stroustrup",
                      "allman",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowSingleLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "camelcase": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce camelcase naming convention in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/camelcase",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/camelcase.html",
                },
                "messages": {
                  "notCamelCase": "Identifier '{{name}}' is not in camel case.",
                  "notCamelCasePrivate": "#{{name}} is not in camel case.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": [
                          {
                            "type": "string",
                          },
                        ],
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignoreDestructuring": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreGlobals": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreImports": {
                        "default": false,
                        "type": "boolean",
                      },
                      "properties": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require or disallow trailing commas in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/comma-dangle",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/comma-dangle.html",
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "replacedBy": undefined,
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing before and after commas in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/comma-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/comma-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "A space is required {{loc}} ','.",
                  "unexpected": "There should be no space {{loc}} ','.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "default": true,
                        "type": "boolean",
                      },
                      "before": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "comma-style": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent comma style in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/comma-style",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/comma-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "comment-directive": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "base",
                  ],
                  "description": "support comment-directives in \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/comment-directive.html",
                },
                "messages": {
                  "clear": "clear",
                  "disableBlock": "--block {{key}}",
                  "disableBlockRule": "-block {{rule}} {{key}}",
                  "disableLine": "--line {{key}}",
                  "disableLineRule": "-line {{rule}} {{key}}",
                  "enableBlock": "++block",
                  "enableBlockRule": "+block {{rule}}",
                  "enableLine": "++line",
                  "enableLineRule": "+line {{rule}}",
                  "unused": "Unused {{kind}} directive (no problems were reported).",
                  "unusedRule": "Unused {{kind}} directive (no problems were reported from '{{rule}}').",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "reportUnusedDisableDirectives": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "component-api-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce component API style",
                  "url": "https://eslint.vuejs.org/rules/component-api-style.html",
                },
                "fixable": null,
                "messages": {
                  "disallowComponentOption": "{{disallowedApi}} is not allowed in your project. {{optionPhrase}} is part of the {{disallowedApi}}. Use {{allowedApis}} instead.",
                  "disallowComponentOptionPreferScriptSetup": "{{disallowedApi}} is not allowed in your project. Use \`<script setup>\` instead.",
                  "disallowScriptSetup": "\`<script setup>\` is not allowed in your project. Use {{allowedApis}} instead.",
                },
                "schema": [
                  {
                    "items": {
                      "additionalItems": false,
                      "enum": [
                        "script-setup",
                        "composition",
                        "composition-vue2",
                        "options",
                      ],
                      "uniqueItems": true,
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                ],
                "type": "suggestion",
              },
            },
            "component-definition-name-casing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce specific casing for component definition name",
                  "url": "https://eslint.vuejs.org/rules/component-definition-name-casing.html",
                },
                "fixable": "code",
                "messages": {
                  "incorrectCase": "Property name "{{value}}" is not {{caseType}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "PascalCase",
                      "kebab-case",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "component-name-in-template-casing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce specific casing for the component naming style in template",
                  "url": "https://eslint.vuejs.org/rules/component-name-in-template-casing.html",
                },
                "fixable": "code",
                "messages": {
                  "incorrectCase": "Component name "{{name}}" is not {{caseType}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "PascalCase",
                      "kebab-case",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "globals": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "registeredComponentsOnly": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "component-options-name-casing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce the casing of component name in \`components\` options",
                  "url": "https://eslint.vuejs.org/rules/component-options-name-casing.html",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "caseNotMatched": "Component name "{{component}}" is not {{caseType}}.",
                  "possibleRenaming": "Rename component name to be in {{caseType}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "camelCase",
                      "kebab-case",
                      "PascalCase",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "component-tags-order": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "enforce order of component top-level elements",
                  "url": "https://eslint.vuejs.org/rules/component-tags-order.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "'<{{elementName}}{{elementAttributes}}>' should be above '<{{firstUnorderedName}}{{firstUnorderedAttributes}}>' on line {{line}}.",
                },
                "replacedBy": [
                  "block-order",
                ],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "order": {
                        "additionalItems": false,
                        "items": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "custom-event-name-casing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce specific casing for custom event name",
                  "url": "https://eslint.vuejs.org/rules/custom-event-name-casing.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Custom event name '{{name}}' must be {{caseType}}.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "kebab-case",
                            "camelCase",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignores": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignores": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "define-emits-declaration": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce declaration style of \`defineEmits\`",
                  "url": "https://eslint.vuejs.org/rules/define-emits-declaration.html",
                },
                "fixable": null,
                "messages": {
                  "hasArg": "Use type based declaration instead of runtime declaration.",
                  "hasTypeArg": "Use runtime declaration instead of type based declaration.",
                  "hasTypeCallArg": "Use new type literal declaration instead of the old call signature declaration.",
                },
                "schema": [
                  {
                    "enum": [
                      "type-based",
                      "type-literal",
                      "runtime",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "define-macros-order": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce order of \`defineEmits\` and \`defineProps\` compiler macros",
                  "url": "https://eslint.vuejs.org/rules/define-macros-order.html",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "defineExposeNotTheLast": "\`defineExpose\` should be the last statement in \`<script setup>\`.",
                  "macrosNotOnTop": "{{macro}} should be the first statement in \`<script setup>\` (after any potential import statements or type definitions).",
                  "putExposeAtTheLast": "Put \`defineExpose\` as the last statement in \`<script setup>\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "defineExposeLast": {
                        "type": "boolean",
                      },
                      "order": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "defineEmits",
                            "defineProps",
                            "defineOptions",
                            "defineSlots",
                            "defineModel",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "define-props-declaration": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce declaration style of \`defineProps\`",
                  "url": "https://eslint.vuejs.org/rules/define-props-declaration.html",
                },
                "fixable": null,
                "messages": {
                  "hasArg": "Use type-based declaration instead of runtime declaration.",
                  "hasTypeArg": "Use runtime declaration instead of type-based declaration.",
                },
                "schema": [
                  {
                    "enum": [
                      "type-based",
                      "runtime",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "dot-location": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent newlines before and after dots in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/dot-location",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/dot-location.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedDotAfterObject": "Expected dot to be on same line as object.",
                  "expectedDotBeforeProperty": "Expected dot to be on same line as property.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "object",
                      "property",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "dot-notation": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce dot notation whenever possible in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/dot-notation",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/dot-notation.html",
                },
                "fixable": "code",
                "messages": {
                  "useBrackets": ".{{key}} is a syntax error.",
                  "useDot": "[{{key}}] is better written in dot notation.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowKeywords": {
                        "default": true,
                        "type": "boolean",
                      },
                      "allowPattern": {
                        "default": "",
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "enforce-style-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce or forbid the use of the \`scoped\` and \`module\` attributes in SFC top level style tags",
                  "url": "https://eslint.vuejs.org/rules/enforce-style-attribute.html",
                },
                "fixable": null,
                "messages": {
                  "notAllowedModule": "The module attribute is not allowed. Allowed: {{ allowedAttrsString }}.",
                  "notAllowedPlain": "Plain <style> tags are not allowed. Allowed: {{ allowedAttrsString }}.",
                  "notAllowedScoped": "The scoped attribute is not allowed. Allowed: {{ allowedAttrsString }}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "enum": [
                            "plain",
                            "scoped",
                            "module",
                          ],
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "eqeqeq": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require the use of \`===\` and \`!==\` in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/eqeqeq",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/eqeqeq.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "always",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "null": {
                              "enum": [
                                "always",
                                "never",
                                "ignore",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "smart",
                            "allow-null",
                          ],
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "first-attribute-linebreak": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce the location of first attribute",
                  "url": "https://eslint.vuejs.org/rules/first-attribute-linebreak.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expected": "Expected a linebreak before this attribute.",
                  "unexpected": "Expected no linebreak before this attribute.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "multiline": {
                        "enum": [
                          "below",
                          "beside",
                          "ignore",
                        ],
                      },
                      "singleline": {
                        "enum": [
                          "below",
                          "beside",
                          "ignore",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "func-call-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require or disallow spacing between function identifiers and their invocations in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/func-call-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/func-call-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "Missing space between function name and paren.",
                  "unexpectedNewline": "Unexpected newline between function name and paren.",
                  "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                },
                "replacedBy": undefined,
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "never",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowNewlines": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "html-button-has-type": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": null,
                  "description": "disallow usage of button without an explicit type attribute",
                  "url": "https://eslint.vuejs.org/rules/html-button-has-type.html",
                },
                "fixable": null,
                "messages": {
                  "emptyTypeAttribute": "A value must be set for button type attribute.",
                  "forbiddenTypeAttribute": "{{value}} is a forbidden value for button type attribute.",
                  "invalidTypeAttribute": "{{value}} is an invalid value for button type attribute.",
                  "missingTypeAttribute": "Missing an explicit type attribute for button.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "button": {
                        "default": true,
                        "type": "boolean",
                      },
                      "reset": {
                        "default": true,
                        "type": "boolean",
                      },
                      "submit": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "html-closing-bracket-newline": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require or disallow a line break before tag's closing brackets",
                  "url": "https://eslint.vuejs.org/rules/html-closing-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedBeforeClosingBracket": "Expected {{expected}} before closing bracket, but {{actual}} found.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "multiline": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      "selfClosingTag": {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "multiline": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                          "singleline": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "singleline": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-closing-bracket-spacing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require or disallow a space before tag's closing brackets",
                  "url": "https://eslint.vuejs.org/rules/html-closing-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missing": "Expected a space before '{{bracket}}', but not found.",
                  "unexpected": "Expected no space before '{{bracket}}', but found.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "endTag": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      "selfClosingTag": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      "startTag": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-comment-content-newline": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce unified line brake in HTML comments",
                  "url": "https://eslint.vuejs.org/rules/html-comment-content-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedAfterExceptionBlock": "Expected line break after exception block.",
                  "expectedAfterHTMLCommentOpen": "Expected line break after '<!--'.",
                  "expectedBeforeExceptionBlock": "Expected line break before exception block.",
                  "expectedBeforeHTMLCommentOpen": "Expected line break before '-->'.",
                  "unexpectedAfterHTMLCommentOpen": "Unexpected line breaks after '<!--'.",
                  "unexpectedBeforeHTMLCommentOpen": "Unexpected line breaks before '-->'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiline": {
                            "enum": [
                              "always",
                              "never",
                              "ignore",
                            ],
                          },
                          "singleline": {
                            "enum": [
                              "always",
                              "never",
                              "ignore",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-comment-content-spacing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce unified spacing in HTML comments",
                  "url": "https://eslint.vuejs.org/rules/html-comment-content-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedAfterExceptionBlock": "Expected space after exception block.",
                  "expectedAfterHTMLCommentOpen": "Expected space after '<!--'.",
                  "expectedBeforeExceptionBlock": "Expected space before exception block.",
                  "expectedBeforeHTMLCommentOpen": "Expected space before '-->'.",
                  "unexpectedAfterHTMLCommentOpen": "Unexpected space after '<!--'.",
                  "unexpectedBeforeHTMLCommentOpen": "Unexpected space before '-->'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-comment-indent": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce consistent indentation in HTML comments",
                  "url": "https://eslint.vuejs.org/rules/html-comment-indent.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingBaseIndentation": "Expected base point indentation of {{expected}}, but not found.",
                  "unexpectedBaseIndentation": "Expected base point indentation of {{expected}}, but found {{actual}}.",
                  "unexpectedIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                  "unexpectedIndentationCharacter": "Expected {{expected}} character, but found {{actual}} character.",
                  "unexpectedRelativeIndentation": "Expected relative indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                      {
                        "enum": [
                          "tab",
                        ],
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "html-end-tags": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce end tag style",
                  "url": "https://eslint.vuejs.org/rules/html-end-tags.html",
                },
                "fixable": "code",
                "messages": {
                  "missingEndTag": "'<{{name}}>' should have end tag.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "html-indent": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce consistent indentation in \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/html-indent.html",
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "anyOf": [
                      {
                        "minimum": 1,
                        "type": "integer",
                      },
                      {
                        "enum": [
                          "tab",
                        ],
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "alignAttributesVertically": {
                        "type": "boolean",
                      },
                      "attribute": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "baseIndent": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "closeBracket": {
                        "anyOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "endTag": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "selfClosingTag": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "startTag": {
                                "minimum": 0,
                                "type": "integer",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "allOf": [
                            {
                              "type": "string",
                            },
                            {
                              "not": {
                                "pattern": ":exit$",
                                "type": "string",
                              },
                            },
                            {
                              "not": {
                                "pattern": "^\\s*$",
                                "type": "string",
                              },
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "switchCase": {
                        "minimum": 0,
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-quotes": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce quotes style of HTML attributes",
                  "url": "https://eslint.vuejs.org/rules/html-quotes.html",
                },
                "fixable": "code",
                "messages": {
                  "expected": "Expected to be enclosed by {{kind}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "double",
                      "single",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "avoidEscape": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "html-self-closing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce self-closing style",
                  "url": "https://eslint.vuejs.org/rules/html-self-closing.html",
                },
                "fixable": "code",
                "messages": {
                  "disallowSelfClosing": "Disallow self-closing on {{elementType}} (<{{name}}/>).",
                  "requireSelfClosing": "Require self-closing on {{elementType}} (<{{name}}>).",
                },
                "schema": {
                  "definitions": {
                    "optionValue": {
                      "enum": [
                        "always",
                        "never",
                        "any",
                      ],
                    },
                  },
                  "items": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "html": {
                          "additionalProperties": false,
                          "properties": {
                            "component": {
                              "$ref": "#/definitions/optionValue",
                            },
                            "normal": {
                              "$ref": "#/definitions/optionValue",
                            },
                            "void": {
                              "$ref": "#/definitions/optionValue",
                            },
                          },
                          "type": "object",
                        },
                        "math": {
                          "$ref": "#/definitions/optionValue",
                        },
                        "svg": {
                          "$ref": "#/definitions/optionValue",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "maxItems": 1,
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "jsx-uses-vars": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "base",
                  ],
                  "description": "prevent variables used in JSX to be marked as unused",
                  "url": "https://eslint.vuejs.org/rules/jsx-uses-vars.html",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "key-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing between keys and values in object literal properties in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/key-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/key-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "keyword-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing before and after keywords in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/keyword-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/keyword-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedAfter": "Expected space(s) after "{{value}}".",
                  "expectedBefore": "Expected space(s) before "{{value}}".",
                  "unexpectedAfter": "Unexpected space(s) after "{{value}}".",
                  "unexpectedBefore": "Unexpected space(s) before "{{value}}".",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "after": {
                        "default": true,
                        "type": "boolean",
                      },
                      "before": {
                        "default": true,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": false,
                        "properties": {
                          "abstract": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "as": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "async": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "await": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "boolean": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "break": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "byte": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "case": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "catch": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "char": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "class": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "const": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "continue": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "debugger": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "default": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "delete": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "do": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "double": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "else": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "enum": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "export": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "extends": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "false": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "final": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "finally": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "float": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "for": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "from": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "function": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "get": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "goto": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "if": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "implements": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "import": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "in": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "instanceof": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "int": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "interface": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "let": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "long": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "native": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "new": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "null": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "of": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "package": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "private": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "protected": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "public": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "return": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "set": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "short": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "static": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "super": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "switch": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "synchronized": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "this": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "throw": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "throws": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "transient": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "true": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "try": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "typeof": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "var": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "void": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "volatile": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "while": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "with": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                          "yield": {
                            "additionalProperties": false,
                            "properties": {
                              "after": {
                                "type": "boolean",
                              },
                              "before": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "match-component-file-name": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require component name property to match its file name",
                  "url": "https://eslint.vuejs.org/rules/match-component-file-name.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "shouldMatchFileName": "Component name \`{{name}}\` should match file name \`{{filename}}\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "extensions": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "shouldMatchCase": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "match-component-import-name": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require the registered component name to match the imported component name",
                  "url": "https://eslint.vuejs.org/rules/match-component-import-name.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Component alias {{importedName}} should be one of: {{expectedName}}.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "max-attributes-per-line": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce the maximum number of attributes per line",
                  "url": "https://eslint.vuejs.org/rules/max-attributes-per-line.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "shouldBeOnNewLine": "'{{name}}' should be on a new line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "multiline": {
                        "anyOf": [
                          {
                            "minimum": 1,
                            "type": "number",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "max": {
                                "minimum": 1,
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "singleline": {
                        "anyOf": [
                          {
                            "minimum": 1,
                            "type": "number",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "max": {
                                "minimum": 1,
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "max-len": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce a maximum line length in \`.vue\` files",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/rules/max-len",
                  },
                  "url": "https://eslint.vuejs.org/rules/max-len.html",
                },
                "messages": {
                  "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                  "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "code": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "comments": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "ignoreComments": {
                            "type": "boolean",
                          },
                          "ignoreHTMLAttributeValues": {
                            "type": "boolean",
                          },
                          "ignoreHTMLTextContents": {
                            "type": "boolean",
                          },
                          "ignorePattern": {
                            "type": "string",
                          },
                          "ignoreRegExpLiterals": {
                            "type": "boolean",
                          },
                          "ignoreStrings": {
                            "type": "boolean",
                          },
                          "ignoreTemplateLiterals": {
                            "type": "boolean",
                          },
                          "ignoreTrailingComments": {
                            "type": "boolean",
                          },
                          "ignoreUrls": {
                            "type": "boolean",
                          },
                          "tabWidth": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "template": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "code": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "comments": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "ignoreComments": {
                            "type": "boolean",
                          },
                          "ignoreHTMLAttributeValues": {
                            "type": "boolean",
                          },
                          "ignoreHTMLTextContents": {
                            "type": "boolean",
                          },
                          "ignorePattern": {
                            "type": "string",
                          },
                          "ignoreRegExpLiterals": {
                            "type": "boolean",
                          },
                          "ignoreStrings": {
                            "type": "boolean",
                          },
                          "ignoreTemplateLiterals": {
                            "type": "boolean",
                          },
                          "ignoreTrailingComments": {
                            "type": "boolean",
                          },
                          "ignoreUrls": {
                            "type": "boolean",
                          },
                          "tabWidth": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "template": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "code": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "comments": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "ignoreComments": {
                        "type": "boolean",
                      },
                      "ignoreHTMLAttributeValues": {
                        "type": "boolean",
                      },
                      "ignoreHTMLTextContents": {
                        "type": "boolean",
                      },
                      "ignorePattern": {
                        "type": "string",
                      },
                      "ignoreRegExpLiterals": {
                        "type": "boolean",
                      },
                      "ignoreStrings": {
                        "type": "boolean",
                      },
                      "ignoreTemplateLiterals": {
                        "type": "boolean",
                      },
                      "ignoreTrailingComments": {
                        "type": "boolean",
                      },
                      "ignoreUrls": {
                        "type": "boolean",
                      },
                      "tabWidth": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "template": {
                        "minimum": 0,
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "max-lines-per-block": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce maximum number of lines in Vue SFC blocks",
                  "url": "https://eslint.vuejs.org/rules/max-lines-per-block.html",
                },
                "fixable": null,
                "messages": {
                  "tooManyLines": "Block has too many lines ({{lineCount}}). Maximum allowed is {{limit}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "script": {
                        "minimum": 1,
                        "type": "integer",
                      },
                      "skipBlankLines": {
                        "minimum": 0,
                        "type": "boolean",
                      },
                      "style": {
                        "minimum": 1,
                        "type": "integer",
                      },
                      "template": {
                        "minimum": 1,
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "multi-word-component-names": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "require component names to be always multi-word",
                  "url": "https://eslint.vuejs.org/rules/multi-word-component-names.html",
                },
                "messages": {
                  "unexpected": "Component name "{{value}}" should always be multi-word.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "multiline-html-element-content-newline": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require a line break before and after the contents of a multiline element",
                  "url": "https://eslint.vuejs.org/rules/multiline-html-element-content-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "unexpectedAfterClosingBracket": "Expected 1 line break after opening tag (\`<{{name}}>\`), but {{actual}} line breaks found.",
                  "unexpectedBeforeOpeningBracket": "Expected 1 line break before closing tag (\`</{{name}}>\`), but {{actual}} line breaks found.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowEmptyLines": {
                        "type": "boolean",
                      },
                      "ignoreWhenEmpty": {
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "multiline-ternary": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce newlines between operands of ternary expressions in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/multiline-ternary",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/multiline-ternary.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                  "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                  "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression.",
                  "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "always-multiline",
                      "never",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "mustache-interpolation-spacing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce unified spacing in mustache interpolations",
                  "url": "https://eslint.vuejs.org/rules/mustache-interpolation-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedSpaceAfter": "Expected 1 space after '{{', but not found.",
                  "expectedSpaceBefore": "Expected 1 space before '}}', but not found.",
                  "unexpectedSpaceAfter": "Expected no space after '{{', but found.",
                  "unexpectedSpaceBefore": "Expected no space before '}}', but found.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "new-line-between-multi-line-property": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce new lines between multi-line properties in Vue components",
                  "url": "https://eslint.vuejs.org/rules/new-line-between-multi-line-property.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingEmptyLine": "Enforce new lines between multi-line properties in Vue components.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "minLineOfMultilineProperty": {
                        "minimum": 2,
                        "type": "number",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "next-tick-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce Promise or callback style in \`nextTick\`",
                  "url": "https://eslint.vuejs.org/rules/next-tick-style.html",
                },
                "fixable": "code",
                "messages": {
                  "useCallback": "Pass a callback function to \`nextTick\` instead of using the returned Promise.",
                  "usePromise": "Use the Promise returned by \`nextTick\` instead of passing a callback function.",
                },
                "schema": [
                  {
                    "enum": [
                      "promise",
                      "callback",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-arrow-functions-in-watch": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow using arrow functions to define watcher",
                  "url": "https://eslint.vuejs.org/rules/no-arrow-functions-in-watch.html",
                },
                "fixable": null,
                "messages": {
                  "noArrowFunctionsInWatch": "You should not use an arrow function to define a watcher.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-async-in-computed-properties": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow asynchronous actions in computed properties",
                  "url": "https://eslint.vuejs.org/rules/no-async-in-computed-properties.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedInFunction": "Unexpected {{expressionName}} in computed function.",
                  "unexpectedInProperty": "Unexpected {{expressionName}} in "{{propertyName}}" computed property.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-bare-strings-in-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow the use of bare strings in \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-bare-strings-in-template.html",
                },
                "messages": {
                  "unexpected": "Unexpected non-translated string used.",
                  "unexpectedInAttr": "Unexpected non-translated string used in \`{{attr}}\`.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowlist": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "attributes": {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^(?:\\S+|/.*/[a-z]*)$": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                        },
                        "type": "object",
                      },
                      "directives": {
                        "items": {
                          "pattern": "^v-",
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-boolean-default": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow boolean defaults",
                  "url": "https://eslint.vuejs.org/rules/no-boolean-default.html",
                },
                "fixable": null,
                "messages": {
                  "defaultFalse": "Boolean prop should only be defaulted to false.",
                  "noBooleanDefault": "Boolean prop should not set a default (Vue defaults it to false).",
                },
                "schema": [
                  {
                    "enum": [
                      "default-false",
                      "no-default",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-child-content": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow element's child contents which would be overwritten by a directive like \`v-html\` or \`v-text\`",
                  "url": "https://eslint.vuejs.org/rules/no-child-content.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "disallowedChildContent": "Child content is disallowed because it will be overwritten by the v-{{ directiveName }} directive.",
                  "removeChildContent": "Remove child content.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "additionalDirectives": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "required": [
                      "additionalDirectives",
                    ],
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-computed-properties-in-data": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow accessing computed properties in \`data\`.",
                  "url": "https://eslint.vuejs.org/rules/no-computed-properties-in-data.html",
                },
                "fixable": null,
                "messages": {
                  "cannotBeUsed": "The computed property cannot be used in \`data()\` because it is before initialization.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-console": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow the use of \`console\` in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-console",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-console.html",
                },
                "hasSuggestions": true,
                "messages": {
                  "removeConsole": "Remove the console.{{ propertyName }}().",
                  "unexpected": "Unexpected console statement.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-constant-condition": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow constant expressions in conditions in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-constant-condition",
                  },
                  "recommended": true,
                  "url": "https://eslint.vuejs.org/rules/no-constant-condition.html",
                },
                "messages": {
                  "unexpected": "Unexpected constant condition.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checkLoops": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-custom-modifiers-on-v-model": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "disallow custom modifiers on v-model used on the component",
                  "url": "https://eslint.vuejs.org/rules/no-custom-modifiers-on-v-model.html",
                },
                "fixable": null,
                "messages": {
                  "notSupportedModifier": "'v-model' directives don't support the modifier '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-data-object-declaration": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated object declaration on data (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-data-object-declaration.html",
                },
                "fixable": "code",
                "messages": {
                  "objectDeclarationIsDeprecated": "Object declaration on 'data' property is deprecated. Using function declaration instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-destroyed-lifecycle": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`destroyed\` and \`beforeDestroy\` lifecycle hooks (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-destroyed-lifecycle.html",
                },
                "fixable": "code",
                "messages": {
                  "deprecatedBeforeDestroy": "The \`beforeDestroy\` lifecycle hook is deprecated. Use \`beforeUnmount\` instead.",
                  "deprecatedDestroyed": "The \`destroyed\` lifecycle hook is deprecated. Use \`unmounted\` instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-dollar-listeners-api": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`$listeners\` (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-dollar-listeners-api.html",
                },
                "fixable": null,
                "messages": {
                  "deprecated": "The \`$listeners\` is deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-dollar-scopedslots-api": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`$scopedSlots\` (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-dollar-scopedslots-api.html",
                },
                "fixable": "code",
                "messages": {
                  "deprecated": "The \`$scopedSlots\` is deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-events-api": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated events api (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-events-api.html",
                },
                "fixable": null,
                "messages": {
                  "noDeprecatedEventsApi": "The Events api \`$on\`, \`$off\` \`$once\` is deprecated. Using external library instead, for example mitt.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-filter": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated filters syntax (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-filter.html",
                },
                "fixable": null,
                "messages": {
                  "noDeprecatedFilter": "Filters are deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-functional-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated the \`functional\` template (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-functional-template.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "The \`functional\` template are deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-html-element-is": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated the \`is\` attribute on HTML elements (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-html-element-is.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "The \`is\` attribute on HTML element are deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-inline-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`inline-template\` attribute (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-inline-template.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "\`inline-template\` are deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-model-definition": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow deprecated \`model\` definition (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-model-definition.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "changeToKebabModelValue": "Change to \`model-value\`/\`update:model-value\`.",
                  "changeToModelValue": "Change to \`modelValue\`/\`update:modelValue\`.",
                  "deprecatedModel": "\`model\` definition is deprecated.",
                  "vue3Compat": "\`model\` definition is deprecated. You may use the Vue 3-compatible \`modelValue\`/\`update:modelValue\` though.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowVue3Compat": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-deprecated-props-default-this": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow deprecated \`this\` access in props default function (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-props-default-this.html",
                },
                "fixable": null,
                "messages": {
                  "deprecated": "Props default value factory functions no longer have access to \`this\`.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-router-link-tag-prop": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`tag\` property on \`RouterLink\` (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-router-link-tag-prop.html",
                },
                "fixable": null,
                "messages": {
                  "deprecated": "'tag' property on '{{element}}' component is deprecated. Use scoped slots instead.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "components": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-deprecated-scope-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow deprecated \`scope\` attribute (in Vue.js 2.5.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-scope-attribute.html",
                },
                "fixable": "code",
                "messages": {
                  "forbiddenScopeAttribute": "\`scope\` attributes are deprecated.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-deprecated-slot-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow deprecated \`slot\` attribute (in Vue.js 2.6.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-slot-attribute.html",
                },
                "fixable": "code",
                "messages": {
                  "forbiddenSlotAttribute": "\`slot\` attributes are deprecated.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-deprecated-slot-scope-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow deprecated \`slot-scope\` attribute (in Vue.js 2.6.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-slot-scope-attribute.html",
                },
                "fixable": "code",
                "messages": {
                  "forbiddenSlotScopeAttribute": "\`slot-scope\` are deprecated.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-deprecated-v-bind-sync": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow use of deprecated \`.sync\` modifier on \`v-bind\` directive (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-v-bind-sync.html",
                },
                "fixable": "code",
                "messages": {
                  "syncModifierIsDeprecated": "'.sync' modifier on 'v-bind' directive is deprecated. Use 'v-model:propName' instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-v-is": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow deprecated \`v-is\` directive (in Vue.js 3.1.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-v-is.html",
                },
                "fixable": null,
                "messages": {
                  "forbiddenVIs": "\`v-is\` directive is deprecated.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-deprecated-v-on-native-modifier": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`.native\` modifiers (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-v-on-native-modifier.html",
                },
                "fixable": null,
                "messages": {
                  "deprecated": "'.native' modifier on 'v-on' directive is deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-v-on-number-modifiers": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated number (keycode) modifiers (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-v-on-number-modifiers.html",
                },
                "fixable": "code",
                "messages": {
                  "numberModifierIsDeprecated": "'KeyboardEvent.keyCode' modifier on 'v-on' directive is deprecated. Using 'KeyboardEvent.key' instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-deprecated-vue-config-keycodes": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow using deprecated \`Vue.config.keyCodes\` (in Vue.js 3.0.0+)",
                  "url": "https://eslint.vuejs.org/rules/no-deprecated-vue-config-keycodes.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "\`Vue.config.keyCodes\` are deprecated.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-dupe-keys": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow duplication of field names",
                  "url": "https://eslint.vuejs.org/rules/no-dupe-keys.html",
                },
                "fixable": null,
                "messages": {
                  "duplicateKey": "Duplicate key '{{name}}'. May cause name collision in script or template tag.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "groups": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-dupe-v-else-if": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow duplicate conditions in \`v-if\` / \`v-else-if\` chains",
                  "url": "https://eslint.vuejs.org/rules/no-dupe-v-else-if.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the \`v-if\` / \`v-else-if\` chain.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-duplicate-attr-inheritance": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce \`inheritAttrs\` to be set to \`false\` when using \`v-bind="$attrs"\`",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-duplicate-attr-inheritance.html",
                },
                "fixable": null,
                "messages": {
                  "noDuplicateAttrInheritance": "Set "inheritAttrs" to false.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-duplicate-attributes": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow duplication of attributes",
                  "url": "https://eslint.vuejs.org/rules/no-duplicate-attributes.html",
                },
                "fixable": null,
                "messages": {
                  "duplicateAttribute": "Duplicate attribute '{{name}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowCoexistClass": {
                        "type": "boolean",
                      },
                      "allowCoexistStyle": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-empty-component-block": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow the \`<template>\` \`<script>\` \`<style>\` block to be empty",
                  "url": "https://eslint.vuejs.org/rules/no-empty-component-block.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "\`<{{ blockName }}>\` is empty. Empty block is not allowed.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-empty-pattern": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow empty destructuring patterns in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-empty-pattern",
                  },
                  "recommended": true,
                  "url": "https://eslint.vuejs.org/rules/no-empty-pattern.html",
                },
                "messages": {
                  "unexpected": "Unexpected empty {{type}} pattern.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowObjectPatternsAsParameters": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-export-in-script-setup": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow \`export\` in \`<script setup>\`",
                  "url": "https://eslint.vuejs.org/rules/no-export-in-script-setup.html",
                },
                "fixable": null,
                "messages": {
                  "forbidden": "\`<script setup>\` cannot contain ES module exports.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-expose-after-await": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow asynchronously registered \`expose\`",
                  "url": "https://eslint.vuejs.org/rules/no-expose-after-await.html",
                },
                "fixable": null,
                "messages": {
                  "forbidden": "\`{{name}}\` is forbidden after an \`await\` expression.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-extra-parens": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow unnecessary parentheses in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-extra-parens",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-extra-parens.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Unnecessary parentheses around expression.",
                },
                "replacedBy": undefined,
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "functions",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "all",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowParensAfterCommentPattern": {
                              "type": "string",
                            },
                            "conditionalAssign": {
                              "type": "boolean",
                            },
                            "enforceForArrowConditionals": {
                              "type": "boolean",
                            },
                            "enforceForFunctionPrototypeMethods": {
                              "type": "boolean",
                            },
                            "enforceForNewInMemberExpressions": {
                              "type": "boolean",
                            },
                            "enforceForSequenceExpressions": {
                              "type": "boolean",
                            },
                            "ignoreJSX": {
                              "enum": [
                                "none",
                                "all",
                                "single-line",
                                "multi-line",
                              ],
                            },
                            "nestedBinaryExpressions": {
                              "type": "boolean",
                            },
                            "returnAssign": {
                              "type": "boolean",
                            },
                            "ternaryOperandBinaryExpressions": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "no-invalid-model-keys": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": undefined,
                  "description": "require valid keys in model option",
                  "url": "https://eslint.vuejs.org/rules/no-invalid-model-keys.html",
                },
                "fixable": null,
                "messages": {
                  "invalidKey": "Invalid key '{{name}}' in model option.",
                },
                "replacedBy": [
                  "valid-model-definition",
                ],
                "schema": [],
                "type": "problem",
              },
            },
            "no-irregular-whitespace": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow irregular whitespace in \`.vue\` files",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/rules/no-irregular-whitespace",
                  },
                  "url": "https://eslint.vuejs.org/rules/no-irregular-whitespace.html",
                },
                "messages": {
                  "disallow": "Irregular whitespace not allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipHTMLAttributeValues": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipHTMLTextContents": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "default": true,
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-lifecycle-after-await": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow asynchronously registered lifecycle hooks",
                  "url": "https://eslint.vuejs.org/rules/no-lifecycle-after-await.html",
                },
                "fixable": null,
                "messages": {
                  "forbidden": "Lifecycle hooks are forbidden after an \`await\` expression.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-lone-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "disallow unnecessary \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-lone-template.html",
                },
                "fixable": null,
                "messages": {
                  "requireDirective": "\`<template>\` require directive.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreAccessible": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-loss-of-precision": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow literal numbers that lose precision in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision",
                  },
                  "recommended": true,
                  "url": "https://eslint.vuejs.org/rules/no-loss-of-precision.html",
                },
                "messages": {
                  "noLossOfPrecision": "This number literal will lose precision at runtime.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-multi-spaces": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "disallow multiple spaces",
                  "url": "https://eslint.vuejs.org/rules/no-multi-spaces.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "multipleSpaces": "Multiple spaces found before '{{displayValue}}'.",
                  "useLatestParser": "Use the latest vue-eslint-parser. See also https://eslint.vuejs.org/user-guide/#what-is-the-use-the-latest-vue-eslint-parser-error.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreProperties": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "no-multiple-objects-in-class": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow to pass multiple objects into array to class",
                  "url": "https://eslint.vuejs.org/rules/no-multiple-objects-in-class.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Unexpected multiple objects. Merge objects.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-multiple-slot-args": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "disallow to pass multiple arguments to scoped slots",
                  "url": "https://eslint.vuejs.org/rules/no-multiple-slot-args.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Unexpected multiple arguments.",
                  "unexpectedSpread": "Unexpected spread argument.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-multiple-template-root": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "disallow adding multiple root nodes to the template",
                  "url": "https://eslint.vuejs.org/rules/no-multiple-template-root.html",
                },
                "fixable": null,
                "messages": {
                  "disallowedDirective": "The template root disallows 'v-for' directives.",
                  "disallowedElement": "The template root disallows '<{{name}}>' elements.",
                  "multipleRoot": "The template root requires exactly one element.",
                  "textRoot": "The template root requires an element rather than texts.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-mutating-props": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow mutation of component props",
                  "url": "https://eslint.vuejs.org/rules/no-mutating-props.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedMutation": "Unexpected mutation of "{{key}}" prop.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "shallowOnly": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-parsing-error": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow parsing errors in \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-parsing-error.html",
                },
                "fixable": null,
                "messages": {
                  "parsingError": "Parsing error: {{message}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "abrupt-closing-of-empty-comment": {
                        "type": "boolean",
                      },
                      "absence-of-digits-in-numeric-character-reference": {
                        "type": "boolean",
                      },
                      "cdata-in-html-content": {
                        "type": "boolean",
                      },
                      "character-reference-outside-unicode-range": {
                        "type": "boolean",
                      },
                      "control-character-in-input-stream": {
                        "type": "boolean",
                      },
                      "control-character-reference": {
                        "type": "boolean",
                      },
                      "duplicate-attribute": {
                        "type": "boolean",
                      },
                      "end-tag-with-attributes": {
                        "type": "boolean",
                      },
                      "end-tag-with-trailing-solidus": {
                        "type": "boolean",
                      },
                      "eof-before-tag-name": {
                        "type": "boolean",
                      },
                      "eof-in-cdata": {
                        "type": "boolean",
                      },
                      "eof-in-comment": {
                        "type": "boolean",
                      },
                      "eof-in-tag": {
                        "type": "boolean",
                      },
                      "incorrectly-closed-comment": {
                        "type": "boolean",
                      },
                      "incorrectly-opened-comment": {
                        "type": "boolean",
                      },
                      "invalid-first-character-of-tag-name": {
                        "type": "boolean",
                      },
                      "missing-attribute-value": {
                        "type": "boolean",
                      },
                      "missing-end-tag-name": {
                        "type": "boolean",
                      },
                      "missing-semicolon-after-character-reference": {
                        "type": "boolean",
                      },
                      "missing-whitespace-between-attributes": {
                        "type": "boolean",
                      },
                      "nested-comment": {
                        "type": "boolean",
                      },
                      "non-void-html-element-start-tag-with-trailing-solidus": {
                        "type": "boolean",
                      },
                      "noncharacter-character-reference": {
                        "type": "boolean",
                      },
                      "noncharacter-in-input-stream": {
                        "type": "boolean",
                      },
                      "null-character-reference": {
                        "type": "boolean",
                      },
                      "surrogate-character-reference": {
                        "type": "boolean",
                      },
                      "surrogate-in-input-stream": {
                        "type": "boolean",
                      },
                      "unexpected-character-in-attribute-name": {
                        "type": "boolean",
                      },
                      "unexpected-character-in-unquoted-attribute-value": {
                        "type": "boolean",
                      },
                      "unexpected-equals-sign-before-attribute-name": {
                        "type": "boolean",
                      },
                      "unexpected-null-character": {
                        "type": "boolean",
                      },
                      "unexpected-question-mark-instead-of-tag-name": {
                        "type": "boolean",
                      },
                      "unexpected-solidus-in-tag": {
                        "type": "boolean",
                      },
                      "unknown-named-character-reference": {
                        "type": "boolean",
                      },
                      "x-invalid-end-tag": {
                        "type": "boolean",
                      },
                      "x-invalid-namespace": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-potential-component-option-typo": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow a potential typo in your component property",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-potential-component-option-typo.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "potentialTypo": "'{{name}}' may be a typo, which is similar to option [{{option}}].",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "custom": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "presets": {
                        "items": {
                          "enum": [
                            "all",
                            "vue",
                            "vue-router",
                            "nuxt",
                          ],
                          "type": "string",
                        },
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "threshold": {
                        "minimum": 1,
                        "type": "number",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-ref-as-operand": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow use of value wrapped by \`ref()\` (Composition API) as an operand",
                  "url": "https://eslint.vuejs.org/rules/no-ref-as-operand.html",
                },
                "fixable": "code",
                "messages": {
                  "requireDotValue": "Must use \`.value\` to read or write the value wrapped by \`{{method}}()\`.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-ref-object-destructure": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": undefined,
                  "description": "disallow usages of ref objects that can lead to loss of reactivity",
                  "url": "https://eslint.vuejs.org/rules/no-ref-object-destructure.html",
                },
                "fixable": null,
                "messages": {
                  "getReactiveVariableInSameScope": "Getting a reactive variable in the same scope will cause the value to lose reactivity.",
                  "getValueInSameScope": "Getting a value from the ref object in the same scope will cause the value to lose reactivity.",
                },
                "replacedBy": [
                  "no-ref-object-reactivity-loss",
                ],
                "schema": [],
                "type": "problem",
              },
            },
            "no-ref-object-reactivity-loss": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow usages of ref objects that can lead to loss of reactivity",
                  "url": "https://eslint.vuejs.org/rules/no-ref-object-reactivity-loss.html",
                },
                "fixable": null,
                "messages": {
                  "getReactiveVariableInSameScope": "Getting a reactive variable in the same scope will cause the value to lose reactivity.",
                  "getValueInSameScope": "Getting a value from the ref object in the same scope will cause the value to lose reactivity.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-required-prop-with-default": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce props with default values to be optional",
                  "url": "https://eslint.vuejs.org/rules/no-required-prop-with-default.html",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "fixRequiredProp": "Change this prop to be optional.",
                  "requireOptional": "Prop "{{ key }}" should be optional.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "autofix": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-reserved-component-names": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow the use of reserved names in component definitions",
                  "url": "https://eslint.vuejs.org/rules/no-reserved-component-names.html",
                },
                "fixable": null,
                "messages": {
                  "reserved": "Name "{{name}}" is reserved.",
                  "reservedInHtml": "Name "{{name}}" is reserved in HTML.",
                  "reservedInVue": "Name "{{name}}" is reserved in Vue.js.",
                  "reservedInVue3": "Name "{{name}}" is reserved in Vue.js 3.x.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "disallowVue3BuiltInComponents": {
                        "type": "boolean",
                      },
                      "disallowVueBuiltInComponents": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-reserved-keys": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow overwriting reserved keys",
                  "url": "https://eslint.vuejs.org/rules/no-reserved-keys.html",
                },
                "fixable": null,
                "messages": {
                  "reserved": "Key '{{name}}' is reserved.",
                  "startsWithUnderscore": "Keys starting with '_' are reserved in '{{name}}' group.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "groups": {
                        "type": "array",
                      },
                      "reserved": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-reserved-props": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "defaultOptions": {
                    "vue2": [
                      {
                        "vueVersion": 2,
                      },
                    ],
                  },
                  "description": "disallow reserved names in props",
                  "url": "https://eslint.vuejs.org/rules/no-reserved-props.html",
                },
                "fixable": null,
                "messages": {
                  "reserved": "'{{propName}}' is a reserved attribute and cannot be used as props.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "vueVersion": {
                        "enum": [
                          2,
                          3,
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-restricted-block": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific block",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-block.html",
                },
                "fixable": null,
                "messages": {
                  "restrictedBlock": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "element": {
                            "type": "string",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                        },
                        "required": [
                          "element",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-call-after-await": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow asynchronously called restricted methods",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-call-after-await.html",
                },
                "fixable": null,
                "messages": {
                  "restricted": "{{message}}",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "message": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "module": {
                        "type": "string",
                      },
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                    },
                    "required": [
                      "module",
                    ],
                    "type": "object",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-class": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific classes in Vue components",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-class.html",
                },
                "fixable": null,
                "messages": {
                  "forbiddenClass": "'{{class}}' class is not allowed.",
                },
                "schema": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "problem",
              },
            },
            "no-restricted-component-names": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific component names",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-component-names.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "disallow": "{{message}}",
                  "suggest": "Instead, change to \`{{suggest}}\`.",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "name": {
                            "type": "string",
                          },
                          "suggest": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-component-options": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific component option",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-component-options.html",
                },
                "fixable": null,
                "messages": {
                  "restrictedOption": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-custom-event": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific custom event",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-custom-event.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "instead": "Instead, change to \`{{suggest}}\`.",
                  "restrictedEvent": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": [
                          "string",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "event": {
                            "type": "string",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "suggest": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "event",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-html-elements": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific HTML elements",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-html-elements.html",
                },
                "fixable": null,
                "messages": {
                  "customMessage": "{{message}}",
                  "forbiddenElement": "Unexpected use of forbidden HTML element {{name}}.",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "element": {
                            "type": "string",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                        },
                        "required": [
                          "element",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-props": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific props",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-props.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "instead": "Instead, change to \`{{suggest}}\`.",
                  "restrictedProp": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": [
                          "string",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "name": {
                            "type": "string",
                          },
                          "suggest": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-static-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific attribute",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-static-attribute.html",
                },
                "fixable": null,
                "messages": {
                  "restrictedAttr": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "element": {
                            "type": "string",
                          },
                          "key": {
                            "type": "string",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "value": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "enum": [
                                  true,
                                ],
                              },
                            ],
                          },
                        },
                        "required": [
                          "key",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-syntax": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow specified syntax in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-restricted-syntax.html",
                },
                "messages": {
                  "restrictedSyntax": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "type": "string",
                          },
                          "selector": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "selector",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-restricted-v-bind": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow specific argument in \`v-bind\`",
                  "url": "https://eslint.vuejs.org/rules/no-restricted-v-bind.html",
                },
                "fixable": null,
                "messages": {
                  "restrictedVBind": "{{message}}",
                },
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "type": [
                          "string",
                          "null",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "argument": {
                            "type": [
                              "string",
                              "null",
                            ],
                          },
                          "element": {
                            "type": "string",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "modifiers": {
                            "items": {
                              "enum": [
                                "prop",
                                "camel",
                                "sync",
                                "attr",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                        },
                        "required": [
                          "argument",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
                "type": "suggestion",
              },
            },
            "no-root-v-if": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow \`v-if\` directives on root element",
                  "url": "https://eslint.vuejs.org/rules/no-root-v-if.html",
                },
                "fixable": null,
                "messages": {
                  "noRootVIf": "\`v-if\` should not be used on root element without \`v-else\`.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-setup-props-destructure": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": undefined,
                  "description": "disallow usages that lose the reactivity of \`props\` passed to \`setup\`",
                  "url": "https://eslint.vuejs.org/rules/no-setup-props-destructure.html",
                },
                "fixable": null,
                "messages": {
                  "destructuring": "Destructuring the \`props\` will cause the value to lose reactivity.",
                  "getProperty": "Getting a value from the \`props\` in root scope of \`{{scopeName}}\` will cause the value to lose reactivity.",
                },
                "replacedBy": [
                  "no-setup-props-reactivity-loss",
                ],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-setup-props-reactivity-loss": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow usages that lose the reactivity of \`props\` passed to \`setup\`",
                  "url": "https://eslint.vuejs.org/rules/no-setup-props-reactivity-loss.html",
                },
                "fixable": null,
                "messages": {
                  "destructuring": "Destructuring the \`props\` will cause the value to lose reactivity.",
                  "getProperty": "Getting a value from the \`props\` in root scope of \`{{scopeName}}\` will cause the value to lose reactivity.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-shared-component-data": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce component's data property to be a function",
                  "url": "https://eslint.vuejs.org/rules/no-shared-component-data.html",
                },
                "fixable": "code",
                "messages": {
                  "dataPropertyMustBeFunction": "\`data\` property in component must be a function.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-side-effects-in-computed-properties": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow side effects in computed properties",
                  "url": "https://eslint.vuejs.org/rules/no-side-effects-in-computed-properties.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedSideEffectInFunction": "Unexpected side effect in computed function.",
                  "unexpectedSideEffectInProperty": "Unexpected side effect in "{{key}}" computed property.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-spaces-around-equal-signs-in-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "disallow spaces around equal signs in attribute",
                  "url": "https://eslint.vuejs.org/rules/no-spaces-around-equal-signs-in-attribute.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "unexpectedSpaces": "Unexpected spaces found around equal signs.",
                },
                "schema": [],
                "type": "layout",
              },
            },
            "no-sparse-arrays": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow sparse arrays in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays",
                  },
                  "recommended": true,
                  "url": "https://eslint.vuejs.org/rules/no-sparse-arrays.html",
                },
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-static-inline-styles": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow static inline \`style\` attributes",
                  "url": "https://eslint.vuejs.org/rules/no-static-inline-styles.html",
                },
                "fixable": null,
                "messages": {
                  "forbiddenStaticInlineStyle": "Static inline \`style\` are forbidden.",
                  "forbiddenStyleAttr": "\`style\` attributes are forbidden.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowBinding": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-template-key": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow \`key\` attribute on \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-template-key.html",
                },
                "fixable": null,
                "messages": {
                  "disallow": "'<template>' cannot be keyed. Place the key on real elements instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-template-shadow": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "disallow variable declarations from shadowing variables declared in the outer scope",
                  "url": "https://eslint.vuejs.org/rules/no-template-shadow.html",
                },
                "fixable": null,
                "messages": {
                  "alreadyDeclaredInUpperScope": "Variable '{{name}}' is already declared in the upper scope.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-template-target-blank": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow target="_blank" attribute without rel="noopener noreferrer"",
                  "url": "https://eslint.vuejs.org/rules/no-template-target-blank.html",
                },
                "hasSuggestions": true,
                "messages": {
                  "missingRel": "Using target="_blank" without rel="noopener noreferrer" is a security risk.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowReferrer": {
                        "type": "boolean",
                      },
                      "enforceDynamicLinks": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-textarea-mustache": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow mustaches in \`<textarea>\`",
                  "url": "https://eslint.vuejs.org/rules/no-textarea-mustache.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Unexpected mustache. Use 'v-model' instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-this-in-before-route-enter": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": null,
                  "description": "disallow \`this\` usage in a \`beforeRouteEnter\` method",
                  "url": "https://eslint.vuejs.org/rules/no-this-in-before-route-enter.html",
                },
                "fixable": null,
                "messages": {
                  "disallow": "'beforeRouteEnter' does NOT have access to \`this\` component instance. https://router.vuejs.org/guide/advanced/navigation-guards.html#in-component-guards.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-undef-components": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow use of undefined components in \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-undef-components.html",
                },
                "fixable": null,
                "messages": {
                  "typeOnly": "The '<{{name}}>' component has been used, but '{{name}}' only refers to a type.",
                  "undef": "The '<{{name}}>' component has been used, but not defined.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignorePatterns": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-undef-properties": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow undefined properties",
                  "url": "https://eslint.vuejs.org/rules/no-undef-properties.html",
                },
                "fixable": null,
                "messages": {
                  "undef": "'{{name}}' is not defined.",
                  "undefProps": "'{{name}}' is not defined in props.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignores": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unsupported-features": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unsupported Vue.js syntax on the specified version",
                  "url": "https://eslint.vuejs.org/rules/no-unsupported-features.html",
                },
                "fixable": "code",
                "messages": {
                  "forbiddenDefineModel": "\`defineModel()\` macros are not supported until Vue.js "3.4.0".",
                  "forbiddenDefineOptions": "\`defineOptions()\` macros are not supported until Vue.js "3.3.0".",
                  "forbiddenDefineSlots": "\`defineSlots()\` macros are not supported until Vue.js "3.3.0".",
                  "forbiddenDynamicDirectiveArguments": "Dynamic arguments are not supported until Vue.js "2.6.0".",
                  "forbiddenIsAttributeWithVuePrefix": "\`is="vue:"\` are not supported until Vue.js "3.1.0".",
                  "forbiddenScriptSetup": "\`<script setup>\` is not supported until Vue.js "2.7.0".",
                  "forbiddenSlotScopeAttribute": "\`slot-scope\` are not supported except Vue.js ">=2.5.0 <3.0.0".",
                  "forbiddenStyleCssVarsInjection": "SFC CSS variable injection is not supported until Vue.js ">=3.0.3 || >=2.7.0 <3.0.0".",
                  "forbiddenVBindAttrModifier": "\`.attr\` modifiers on \`v-bind\` are not supported until Vue.js "3.2.0".",
                  "forbiddenVBindPropModifierShorthand": "\`.prop\` shorthand are not supported until Vue.js "3.2.0".",
                  "forbiddenVBindSameNameShorthand": "\`v-bind\` same-name shorthand is not supported until Vue.js "3.4.0".",
                  "forbiddenVIs": "\`v-is\` are not supported until Vue.js "3.0.0".",
                  "forbiddenVMemo": "\`v-memo\` are not supported until Vue.js "3.2.0".",
                  "forbiddenVModelArgument": "Argument on \`v-model\` is not supported until Vue.js "3.0.0".",
                  "forbiddenVModelCustomModifiers": "Custom modifiers on \`v-model\` are not supported until Vue.js "3.0.0".",
                  "forbiddenVSlot": "\`v-slot\` are not supported until Vue.js "2.6.0".",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignores": {
                        "items": {
                          "enum": [
                            "slot-scope-attribute",
                            "dynamic-directive-arguments",
                            "v-slot",
                            "script-setup",
                            "style-css-vars-injection",
                            "v-model-argument",
                            "v-model-custom-modifiers",
                            "v-is",
                            "is-attribute-with-vue-prefix",
                            "v-memo",
                            "v-bind-prop-modifier-shorthand",
                            "v-bind-attr-modifier",
                            "define-options",
                            "define-slots",
                            "define-model",
                            "v-bind-same-name-shorthand",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "version": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unused-components": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow registering components that are not used inside templates",
                  "url": "https://eslint.vuejs.org/rules/no-unused-components.html",
                },
                "fixable": null,
                "messages": {
                  "unused": "The "{{name}}" component has been registered but not used.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreWhenBindingPresent": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unused-emit-declarations": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unused emit declarations",
                  "url": "https://eslint.vuejs.org/rules/no-unused-emit-declarations.html",
                },
                "fixable": null,
                "messages": {
                  "unused": "\`{{name}}\` is defined as emit but never used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unused-properties": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unused properties",
                  "url": "https://eslint.vuejs.org/rules/no-unused-properties.html",
                },
                "fixable": null,
                "messages": {
                  "unused": "'{{name}}' of {{group}} found, but never used.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "deepData": {
                        "type": "boolean",
                      },
                      "groups": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "props",
                            "data",
                            "asyncData",
                            "computed",
                            "methods",
                            "setup",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignorePublicMembers": {
                        "type": "boolean",
                      },
                      "unreferencedOptions": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "unknownMemberAsUnreferenced",
                            "returnAsUnreferenced",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unused-refs": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unused refs",
                  "url": "https://eslint.vuejs.org/rules/no-unused-refs.html",
                },
                "fixable": null,
                "messages": {
                  "unused": "'{{name}}' is defined as ref, but never used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-unused-vars": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow unused variable definitions of v-for directives or scope attributes",
                  "url": "https://eslint.vuejs.org/rules/no-unused-vars.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "replaceWithUnderscore": "Replace \`{{name}}\` with \`_{{name}}\` to ignore the unused variable.",
                  "unusedVariable": "'{{name}}' is defined but never used.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignorePattern": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-use-computed-property-like-method": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow use computed property like method",
                  "url": "https://eslint.vuejs.org/rules/no-use-computed-property-like-method.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Use {{ likeProperty }} instead of {{ likeMethod }}.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-use-v-else-with-v-for": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": null,
                  "description": "disallow using \`v-else-if\`/\`v-else\` on the same element as \`v-for\`",
                  "url": "https://eslint.vuejs.org/rules/no-use-v-else-with-v-for.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedDirectiveWithVFor": "Unexpected \`{{ directiveName }}\` and \`v-for\` on the same element. Move \`{{ directiveName }}\` to a wrapper element instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-use-v-if-with-v-for": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow using \`v-if\` on the same element as \`v-for\`",
                  "url": "https://eslint.vuejs.org/rules/no-use-v-if-with-v-for.html",
                },
                "fixable": null,
                "messages": {
                  "movedToWrapper": "This 'v-if' should be moved to the wrapper element.",
                  "shouldUseComputed": "The '{{iteratorName}}' {{kind}} inside 'v-for' directive should be replaced with a computed property that returns filtered array instead. You should not mix 'v-for' with 'v-if'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowUsingIterationVar": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-useless-concat": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Disallow unnecessary concatenation of literals or template literals in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/no-useless-concat",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/no-useless-concat.html",
                },
                "messages": {
                  "unexpectedConcat": "Unexpected string concatenation of literals.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-useless-mustaches": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unnecessary mustache interpolations",
                  "url": "https://eslint.vuejs.org/rules/no-useless-mustaches.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Unexpected mustache interpolation with a string literal value.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIncludesComment": {
                        "type": "boolean",
                      },
                      "ignoreStringEscape": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-useless-template-attributes": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "disallow useless attribute on \`<template>\`",
                  "url": "https://eslint.vuejs.org/rules/no-useless-template-attributes.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedAttr": "Unexpected useless attribute on \`<template>\`.",
                  "unexpectedDir": "Unexpected useless directive on \`<template>\`.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-v-bind": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow unnecessary \`v-bind\` directives",
                  "url": "https://eslint.vuejs.org/rules/no-useless-v-bind.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Unexpected \`v-bind\` with a string literal value.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIncludesComment": {
                        "type": "boolean",
                      },
                      "ignoreStringEscape": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-v-for-template-key": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "disallow \`key\` attribute on \`<template v-for>\`",
                  "url": "https://eslint.vuejs.org/rules/no-v-for-template-key.html",
                },
                "fixable": null,
                "messages": {
                  "disallow": "'<template v-for>' cannot be keyed. Place the key on real elements instead.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-v-for-template-key-on-child": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow key of \`<template v-for>\` placed on child elements",
                  "url": "https://eslint.vuejs.org/rules/no-v-for-template-key-on-child.html",
                },
                "fixable": null,
                "messages": {
                  "vForTemplateKeyPlacement": "\`<template v-for>\` key should be placed on the \`<template>\` tag.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-v-html": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "disallow use of v-html to prevent XSS attack",
                  "url": "https://eslint.vuejs.org/rules/no-v-html.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "'v-html' directive can lead to XSS attack.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-v-model-argument": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "disallow adding an argument to \`v-model\` used in custom component",
                  "url": "https://eslint.vuejs.org/rules/no-v-model-argument.html",
                },
                "fixable": null,
                "messages": {
                  "vModelRequireNoArgument": "'v-model' directives require no argument.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-v-text": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "disallow use of v-text",
                  "url": "https://eslint.vuejs.org/rules/no-v-text.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Don't use 'v-text'.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-v-text-v-html-on-component": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                    "vue3-essential",
                  ],
                  "description": "disallow v-text / v-html on component",
                  "url": "https://eslint.vuejs.org/rules/no-v-text-v-html-on-component.html",
                },
                "fixable": null,
                "messages": {
                  "disallow": "Using {{directiveName}} on component may break component's content.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-watch-after-await": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "disallow asynchronously registered \`watch\`",
                  "url": "https://eslint.vuejs.org/rules/no-watch-after-await.html",
                },
                "fixable": null,
                "messages": {
                  "forbidden": "\`watch\` is forbidden after an \`await\` expression.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "object-curly-newline": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent line breaks after opening and before closing braces in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/object-curly-newline",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/object-curly-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing inside braces in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/object-curly-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/object-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-property-newline": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce placing object properties on separate lines in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/object-property-newline",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/object-property-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-shorthand": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require or disallow method and property shorthand syntax for object literals in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/object-shorthand",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/object-shorthand.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedAllPropertiesShorthanded": "Expected shorthand for all properties.",
                  "expectedLiteralMethodLongform": "Expected longform method syntax for string literal keys.",
                  "expectedMethodLongform": "Expected longform method syntax.",
                  "expectedMethodShorthand": "Expected method shorthand.",
                  "expectedPropertyLongform": "Expected longform property syntax.",
                  "expectedPropertyShorthand": "Expected property shorthand.",
                  "unexpectedMix": "Unexpected mix of shorthand and non-shorthand properties.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "methods",
                            "properties",
                            "never",
                            "consistent",
                            "consistent-as-needed",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "methods",
                            "properties",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "avoidQuotes": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "methods",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "avoidExplicitReturnArrows": {
                              "type": "boolean",
                            },
                            "avoidQuotes": {
                              "type": "boolean",
                            },
                            "ignoreConstructors": {
                              "type": "boolean",
                            },
                            "methodsIgnorePattern": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "one-component-per-file": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce that each component should be in its own file",
                  "url": "https://eslint.vuejs.org/rules/one-component-per-file.html",
                },
                "fixable": null,
                "messages": {
                  "toManyComponents": "There is more than one component in this file.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "operator-linebreak": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent linebreak style for operators in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/operator-linebreak",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/operator-linebreak.html",
                },
                "fixable": "code",
                "messages": {
                  "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                  "noLinebreak": "There should be no line break before or after '{{operator}}'.",
                  "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                  "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "after",
                      "before",
                      "none",
                      null,
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "overrides": {
                        "additionalProperties": {
                          "enum": [
                            "after",
                            "before",
                            "none",
                            "ignore",
                          ],
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "order-in-components": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "enforce order of properties in components",
                  "url": "https://eslint.vuejs.org/rules/order-in-components.html",
                },
                "fixable": "code",
                "messages": {
                  "order": "The "{{name}}" property should be above the "{{firstUnorderedPropertyName}}" property on line {{line}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "order": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "padding-line-between-blocks": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require or disallow padding lines between blocks",
                  "url": "https://eslint.vuejs.org/rules/padding-line-between-blocks.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "always": "Expected blank line before this block.",
                  "never": "Unexpected blank line before this block.",
                },
                "schema": [
                  {
                    "enum": [
                      "never",
                      "always",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "padding-line-between-tags": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require or disallow newlines between sibling tags in template",
                  "url": "https://eslint.vuejs.org/rules/padding-line-between-tags.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "always": "Expected blank line before this tag.",
                  "never": "Unexpected blank line before this tag.",
                },
                "schema": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "blankLine": {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                        },
                        "next": {
                          "type": "string",
                        },
                        "prev": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "blankLine",
                        "prev",
                        "next",
                      ],
                      "type": "object",
                    },
                    "type": "array",
                  },
                ],
                "type": "layout",
              },
            },
            "padding-lines-in-component-definition": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require or disallow padding lines in component definition",
                  "url": "https://eslint.vuejs.org/rules/padding-lines-in-component-definition.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "always": "Expected blank line before this definition.",
                  "groupSingleLineProperties": "Unexpected blank line between single line properties.",
                  "never": "Unexpected blank line before this definition.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "betweenOptions": {
                            "enum": [
                              "never",
                              "always",
                              "ignore",
                            ],
                          },
                          "groupSingleLineProperties": {
                            "type": "boolean",
                          },
                          "withinOption": {
                            "oneOf": [
                              {
                                "enum": [
                                  "never",
                                  "always",
                                  "ignore",
                                ],
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "patternProperties": {
                                  "^[a-zA-Z]*$": {
                                    "oneOf": [
                                      {
                                        "enum": [
                                          "never",
                                          "always",
                                          "ignore",
                                        ],
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "betweenItems": {
                                            "enum": [
                                              "never",
                                              "always",
                                              "ignore",
                                            ],
                                          },
                                          "withinEach": {
                                            "enum": [
                                              "never",
                                              "always",
                                              "ignore",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "prefer-define-options": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce use of \`defineOptions\` instead of default export.",
                  "url": "https://eslint.vuejs.org/rules/prefer-define-options.html",
                },
                "fixable": "code",
                "messages": {
                  "preferDefineOptions": "Use \`defineOptions\` instead of default export.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-import-from-vue": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "enforce import from 'vue' instead of import from '@vue/*'",
                  "url": "https://eslint.vuejs.org/rules/prefer-import-from-vue.html",
                },
                "fixable": "code",
                "messages": {
                  "importedAtVue": "Import from 'vue' instead of '{{source}}'.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-prop-type-boolean-first": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce \`Boolean\` comes first in component prop types",
                  "url": "https://eslint.vuejs.org/rules/prefer-prop-type-boolean-first.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "moveToFirst": "Move \`Boolean\` to be first in prop types.",
                  "shouldBeFirst": "Type \`Boolean\` should be at first in prop types.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "prefer-separate-static-class": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require static class names in template to be in a separate \`class\` attribute",
                  "url": "https://eslint.vuejs.org/rules/prefer-separate-static-class.html",
                },
                "fixable": "code",
                "messages": {
                  "preferSeparateStaticClass": "Static class "{{className}}" should be in a static \`class\` attribute.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require template literals instead of string concatenation in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/prefer-template",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/prefer-template.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpectedStringConcatenation": "Unexpected string concatenation.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "prefer-true-attribute-shorthand": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require shorthand form attribute when \`v-bind\` value is \`true\`",
                  "url": "https://eslint.vuejs.org/rules/prefer-true-attribute-shorthand.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "expectLong": "Boolean prop with 'true' value should be written in long form.",
                  "expectShort": "Boolean prop with 'true' value should be written in shorthand form.",
                  "rewriteIntoLongHtmlAttr": "Rewrite this prop into long-form HTML attribute.",
                  "rewriteIntoLongVueProp": "Rewrite this prop into long-form Vue component prop.",
                  "rewriteIntoShort": "Rewrite this prop into shorthand form.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "prop-name-casing": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce specific casing for the Prop name in Vue components",
                  "url": "https://eslint.vuejs.org/rules/prop-name-casing.html",
                },
                "fixable": null,
                "messages": {
                  "invalidCase": "Prop "{{name}}" is not in {{caseType}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "camelCase",
                      "snake_case",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "quote-props": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require quotes around object literal property names in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/quote-props",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/quote-props.html",
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "replacedBy": undefined,
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "require-component-is": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "require \`v-bind:is\` of \`<component>\` elements",
                  "url": "https://eslint.vuejs.org/rules/require-component-is.html",
                },
                "fixable": null,
                "messages": {
                  "requireComponentIs": "Expected '<component>' elements to have 'v-bind:is' attribute.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "require-default-prop": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require default value for props",
                  "url": "https://eslint.vuejs.org/rules/require-default-prop.html",
                },
                "fixable": null,
                "messages": {
                  "missingDefault": "Prop '{{propName}}' requires default value to be set.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-direct-export": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require the component to be directly exported",
                  "url": "https://eslint.vuejs.org/rules/require-direct-export.html",
                },
                "fixable": null,
                "messages": {
                  "expectedDirectExport": "Expected the component literal to be directly exported.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "disallowFunctionalComponentFunction": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "require-emit-validator": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require type definitions in emits",
                  "url": "https://eslint.vuejs.org/rules/require-emit-validator.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "emptyValidation": "Replace with a validator function with no parameters.",
                  "missing": "Emit "{{name}}" should define at least its validator function.",
                  "skipped": "Emit "{{name}}" should not skip validation, or you may define a validator function with no parameters.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-explicit-emits": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                  ],
                  "description": "require \`emits\` option with name triggered by \`$emit()\`",
                  "url": "https://eslint.vuejs.org/rules/require-explicit-emits.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "addArrayEmitsOption": "Add the {{emitsKind}} with array syntax and define "{{name}}" event.",
                  "addObjectEmitsOption": "Add the {{emitsKind}} with object syntax and define "{{name}}" event.",
                  "addOneOption": "Add the "{{name}}" to {{emitsKind}}.",
                  "missing": "The "{{name}}" event has been triggered but not declared on {{emitsKind}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowProps": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "require-expose": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require declare public properties using \`expose\`",
                  "url": "https://eslint.vuejs.org/rules/require-expose.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "addExposeOptionForAll": "Add the \`expose\` option to declare all properties.",
                  "addExposeOptionForEmpty": "Add the \`expose\` option to give an empty array.",
                  "requireExpose": "The public properties of the component must be explicitly declared using \`expose\`. If the component does not have public properties, declare it empty.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-macro-variable-name": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require a certain macro variable name",
                  "url": "https://eslint.vuejs.org/rules/require-macro-variable-name.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "changeName": "Change the variable name to "{{variableName}}".",
                  "requireName": "The variable name of "{{macroName}}" must be "{{variableName}}".",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "defineEmits": {
                        "default": "emit",
                        "type": "string",
                      },
                      "defineProps": {
                        "default": "props",
                        "type": "string",
                      },
                      "defineSlots": {
                        "default": "slots",
                        "type": "string",
                      },
                      "useAttrs": {
                        "default": "attrs",
                        "type": "string",
                      },
                      "useSlots": {
                        "default": "slots",
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "require-name-property": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require a name property in Vue components",
                  "url": "https://eslint.vuejs.org/rules/require-name-property.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "addName": "Add name property to component.",
                  "missingName": "Required name property is not set.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-prop-comment": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require props to have a comment",
                  "url": "https://eslint.vuejs.org/rules/require-prop-comment.html",
                },
                "fixable": null,
                "messages": {
                  "requireAnyComment": "The "{{name}}" property should have a comment.",
                  "requireBlockComment": "The "{{name}}" property should have a block comment.",
                  "requireJSDocComment": "The "{{name}}" property should have a JSDoc comment.",
                  "requireLineComment": "The "{{name}}" property should have a line comment.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "enum": [
                          "JSDoc",
                          "line",
                          "block",
                          "any",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "require-prop-type-constructor": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "require prop type to be a constructor",
                  "url": "https://eslint.vuejs.org/rules/require-prop-type-constructor.html",
                },
                "fixable": "code",
                "messages": {
                  "propTypeConstructor": "The "{{name}}" property should be a constructor.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-prop-types": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require type definitions in props",
                  "url": "https://eslint.vuejs.org/rules/require-prop-types.html",
                },
                "fixable": null,
                "messages": {
                  "requireType": "Prop "{{name}}" should define at least its type.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-render-return": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce render function to always return value",
                  "url": "https://eslint.vuejs.org/rules/require-render-return.html",
                },
                "fixable": null,
                "messages": {
                  "expectedReturn": "Expected to return a value in render function.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "require-slots-as-functions": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "enforce properties of \`$slots\` to be used as a function",
                  "url": "https://eslint.vuejs.org/rules/require-slots-as-functions.html",
                },
                "fixable": null,
                "messages": {
                  "unexpected": "Property in \`$slots\` should be used as function.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "require-toggle-inside-transition": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "require control the display of the content inside \`<transition>\`",
                  "url": "https://eslint.vuejs.org/rules/require-toggle-inside-transition.html",
                },
                "fixable": null,
                "messages": {
                  "expected": "The element inside \`<transition>\` is expected to have a \`v-if\` or \`v-show\` directive.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "require-typed-object-prop": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce adding type declarations to object props",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/require-typed-object-prop.html",
                },
                "fixable": null,
                "hasSuggestions": true,
                "messages": {
                  "addTypeAnnotation": "Add \`{{ type }}\` type annotation.",
                  "expectedTypeAnnotation": "Expected type annotation on object prop.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-typed-ref": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "require \`ref\` and \`shallowRef\` functions to be strongly typed",
                  "url": "https://eslint.vuejs.org/rules/require-typed-ref.html",
                },
                "fixable": null,
                "messages": {
                  "noType": "Specify type parameter for \`{{name}}\` function, otherwise created variable will not be typechecked.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "require-v-for-key": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "require \`v-bind:key\` with \`v-for\` directives",
                  "url": "https://eslint.vuejs.org/rules/require-v-for-key.html",
                },
                "fixable": null,
                "messages": {
                  "requireKey": "Elements in iteration expect to have 'v-bind:key' directives.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "require-valid-default-prop": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce props default values to be valid",
                  "url": "https://eslint.vuejs.org/rules/require-valid-default-prop.html",
                },
                "fixable": null,
                "messages": {
                  "invalidType": "Type of the default value for '{{name}}' prop must be a {{types}}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "return-in-computed-property": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce that a return statement is present in computed property",
                  "url": "https://eslint.vuejs.org/rules/return-in-computed-property.html",
                },
                "fixable": null,
                "messages": {
                  "expectedReturnInFunction": "Expected to return a value in computed function.",
                  "expectedReturnInProperty": "Expected to return a value in "{{name}}" computed property.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "treatUndefinedAsUnspecified": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "return-in-emits-validator": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce that a return statement is present in emits validator",
                  "url": "https://eslint.vuejs.org/rules/return-in-emits-validator.html",
                },
                "fixable": null,
                "messages": {
                  "expectedBoolean": "Expected to return a boolean value in "{{name}}" emits validator.",
                  "expectedTrue": "Expected to return a true value in "{{name}}" emits validator.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "script-indent": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce consistent indentation in \`<script>\`",
                  "url": "https://eslint.vuejs.org/rules/script-indent.html",
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "anyOf": [
                      {
                        "minimum": 1,
                        "type": "integer",
                      },
                      {
                        "enum": [
                          "tab",
                        ],
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "baseIndent": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "allOf": [
                            {
                              "type": "string",
                            },
                            {
                              "not": {
                                "pattern": ":exit$",
                                "type": "string",
                              },
                            },
                            {
                              "not": {
                                "pattern": "^\\s*$",
                                "type": "string",
                              },
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "switchCase": {
                        "minimum": 0,
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "script-setup-uses-vars": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": undefined,
                  "description": "prevent \`<script setup>\` variables used in \`<template>\` to be marked as unused",
                  "url": "https://eslint.vuejs.org/rules/script-setup-uses-vars.html",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "singleline-html-element-content-newline": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "require a line break before and after the contents of a singleline element",
                  "url": "https://eslint.vuejs.org/rules/singleline-html-element-content-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "unexpectedAfterClosingBracket": "Expected 1 line break after opening tag (\`<{{name}}>\`), but no line breaks found.",
                  "unexpectedBeforeOpeningBracket": "Expected 1 line break before closing tag (\`</{{name}}>\`), but no line breaks found.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "externalIgnores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignoreWhenEmpty": {
                        "type": "boolean",
                      },
                      "ignoreWhenNoAttributes": {
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "sort-keys": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": null,
                  "description": "enforce sort-keys in a manner that is compatible with order-in-components",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/sort-keys.html",
                },
                "fixable": null,
                "messages": {
                  "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "asc",
                      "desc",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "caseSensitive": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignoreChildrenOf": {
                        "type": "array",
                      },
                      "ignoreGrandchildrenOf": {
                        "type": "array",
                      },
                      "minKeys": {
                        "default": 2,
                        "minimum": 2,
                        "type": "integer",
                      },
                      "natural": {
                        "default": false,
                        "type": "boolean",
                      },
                      "runOutsideVue": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "space-in-parens": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing inside parentheses in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/space-in-parens",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/space-in-parens.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingSpace": "There must be a space before this paren.",
                  "missingOpeningSpace": "There must be a space after this paren.",
                  "rejectedClosingSpace": "There should be no space before this paren.",
                  "rejectedOpeningSpace": "There should be no space after this paren.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "items": {
                          "enum": [
                            "{}",
                            "[]",
                            "()",
                            "empty",
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "space-infix-ops": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require spacing around infix operators in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/space-infix-ops",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/space-infix-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpace": "Operator '{{operator}}' must be spaced.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "int32Hint": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "space-unary-ops": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Enforce consistent spacing before or after unary operators in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/space-unary-ops",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/space-unary-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                  "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "static-class-names-order": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce static class names order",
                  "url": "https://eslint.vuejs.org/rules/static-class-names-order.html",
                },
                "fixable": "code",
                "messages": {
                  "shouldBeOrdered": "Classes should be ordered alphabetically.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "template-curly-spacing": {
              "create": [Function],
              "meta": {
                "deprecated": undefined,
                "docs": {
                  "categories": undefined,
                  "category": null,
                  "description": "Require or disallow spacing around embedded expressions of template strings in \`<template>\`",
                  "extensionSource": {
                    "name": "ESLint core",
                    "url": "https://eslint.org/docs/latest/rules/template-curly-spacing",
                  },
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/template-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedAfter": "Expected space(s) after '\${'.",
                  "expectedBefore": "Expected space(s) before '}'.",
                  "unexpectedAfter": "Unexpected space(s) after '\${'.",
                  "unexpectedBefore": "Unexpected space(s) before '}'.",
                },
                "replacedBy": undefined,
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "this-in-template": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-recommended",
                    "recommended",
                  ],
                  "description": "disallow usage of \`this\` in template",
                  "url": "https://eslint.vuejs.org/rules/this-in-template.html",
                },
                "fixable": "code",
                "messages": {
                  "expected": "Expected 'this'.",
                  "unexpected": "Unexpected usage of 'this'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "use-v-on-exact": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce usage of \`exact\` modifier on \`v-on\`",
                  "url": "https://eslint.vuejs.org/rules/use-v-on-exact.html",
                },
                "fixable": null,
                "messages": {
                  "considerExact": "Consider to use '.exact' modifier.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "v-bind-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce \`v-bind\` directive style",
                  "url": "https://eslint.vuejs.org/rules/v-bind-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedLonghand": "Expected 'v-bind' before ':'.",
                  "expectedLonghandForProp": "Expected 'v-bind:' instead of '.'.",
                  "unexpectedLonghand": "Unexpected 'v-bind' before ':'.",
                },
                "schema": [
                  {
                    "enum": [
                      "shorthand",
                      "longform",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "v-for-delimiter-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce \`v-for\` directive's delimiter style",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/v-for-delimiter-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expected": "Expected '{{preferredDelimiter}}' instead of '{{usedDelimiter}}' in 'v-for'.",
                },
                "schema": [
                  {
                    "enum": [
                      "in",
                      "of",
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "v-if-else-key": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": null,
                  "description": "require key attribute for conditionally rendered repeated components",
                  "recommended": false,
                  "url": "https://eslint.vuejs.org/rules/v-if-else-key.html",
                },
                "fixable": "code",
                "messages": {
                  "requireKey": "Conditionally rendered repeated component '{{componentName}}' expected to have a 'key' attribute.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "v-on-event-hyphenation": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                  ],
                  "defaultOptions": {
                    "vue3": [
                      "always",
                      {
                        "autofix": true,
                      },
                    ],
                  },
                  "description": "enforce v-on event naming style on custom components in template",
                  "url": "https://eslint.vuejs.org/rules/v-on-event-hyphenation.html",
                },
                "fixable": "code",
                "messages": {
                  "cannotBeHyphenated": "v-on event '{{text}}' can't be hyphenated.",
                  "mustBeHyphenated": "v-on event '{{text}}' must be hyphenated.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "autofix": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "additionalItems": false,
                        "items": {
                          "allOf": [
                            {
                              "type": "string",
                            },
                            {
                              "not": {
                                "pattern": ":exit$",
                                "type": "string",
                              },
                            },
                            {
                              "not": {
                                "pattern": "^\\s*$",
                                "type": "string",
                              },
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "v-on-function-call": {
              "create": [Function],
              "meta": {
                "deprecated": true,
                "docs": {
                  "categories": undefined,
                  "description": "enforce or forbid parentheses after method calls without arguments in \`v-on\` directives",
                  "url": "https://eslint.vuejs.org/rules/v-on-function-call.html",
                },
                "fixable": "code",
                "messages": {
                  "always": "Method calls inside of 'v-on' directives must have parentheses.",
                  "never": "Method calls without arguments inside of 'v-on' directives must not have parentheses.",
                },
                "replacedBy": [
                  "v-on-handler-style",
                ],
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIncludesComment": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "v-on-handler-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce writing style for handlers in \`v-on\` directives",
                  "url": "https://eslint.vuejs.org/rules/v-on-handler-style.html",
                },
                "fixable": "code",
                "messages": {
                  "preferInlineFunctionOverInline": "Prefer inline function over inline handler in v-on.",
                  "preferInlineFunctionOverMethod": "Prefer inline function over method handler in v-on.",
                  "preferInlineOverInlineFunction": "Prefer inline handler over inline function in v-on.",
                  "preferInlineOverInlineFunctionWithMultipleParams": "Prefer inline handler over inline function in v-on. Note that the custom event must be changed to a single payload.",
                  "preferInlineOverMethod": "Prefer inline handler over method handler in v-on.",
                  "preferMethodOverInline": "Prefer method handler over inline handler in v-on.",
                  "preferMethodOverInlineFunction": "Prefer method handler over inline function in v-on.",
                  "preferMethodOverInlineFunctionWithoutIdCall": "Prefer method handler over inline function in v-on. Note that you may need to create a new method.",
                  "preferMethodOverInlineWithoutIdCall": "Prefer method handler over inline handler in v-on. Note that you may need to create a new method.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "inline",
                          "inline-function",
                        ],
                      },
                      {
                        "additionalItems": false,
                        "items": [
                          {
                            "const": "method",
                          },
                          {
                            "enum": [
                              "inline",
                              "inline-function",
                            ],
                          },
                        ],
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIncludesComment": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "v-on-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce \`v-on\` directive style",
                  "url": "https://eslint.vuejs.org/rules/v-on-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedLonghand": "Expected 'v-on:' instead of '@'.",
                  "expectedShorthand": "Expected '@' instead of 'v-on:'.",
                },
                "schema": [
                  {
                    "enum": [
                      "shorthand",
                      "longform",
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "v-slot-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-strongly-recommended",
                    "strongly-recommended",
                  ],
                  "description": "enforce \`v-slot\` directive style",
                  "url": "https://eslint.vuejs.org/rules/v-slot-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedLongform": "Expected 'v-slot:{{argument}}' instead of '{{actual}}'.",
                  "expectedShorthand": "Expected '#{{argument}}' instead of '{{actual}}'.",
                  "expectedVSlot": "Expected 'v-slot' instead of '{{actual}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "shorthand",
                          "longform",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "atComponent": {
                            "enum": [
                              "shorthand",
                              "longform",
                              "v-slot",
                            ],
                          },
                          "default": {
                            "enum": [
                              "shorthand",
                              "longform",
                              "v-slot",
                            ],
                          },
                          "named": {
                            "enum": [
                              "shorthand",
                              "longform",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "valid-attribute-name": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "require valid attribute names",
                  "url": "https://eslint.vuejs.org/rules/valid-attribute-name.html",
                },
                "fixable": null,
                "messages": {
                  "attribute": "Attribute name {{name}} is not valid.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-define-emits": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`defineEmits\` compiler macro",
                  "url": "https://eslint.vuejs.org/rules/valid-define-emits.html",
                },
                "fixable": null,
                "messages": {
                  "definedInBoth": "Custom events are defined in both \`defineEmits\` and \`export default {}\`.",
                  "hasTypeAndArg": "\`defineEmits\` has both a type-only emit and an argument.",
                  "multiple": "\`defineEmits\` has been called multiple times.",
                  "notDefined": "Custom events are not defined.",
                  "referencingLocally": "\`defineEmits\` is referencing locally declared variables.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-define-options": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": undefined,
                  "description": "enforce valid \`defineOptions\` compiler macro",
                  "url": "https://eslint.vuejs.org/rules/valid-define-options.html",
                },
                "fixable": null,
                "messages": {
                  "disallowProp": "\`defineOptions()\` cannot be used to declare \`{{propName}}\`. Use \`{{insteadMacro}}()\` instead.",
                  "multiple": "\`defineOptions\` has been called multiple times.",
                  "notDefined": "Options are not defined.",
                  "referencingLocally": "\`defineOptions\` is referencing locally declared variables.",
                  "typeArgs": "\`defineOptions()\` cannot accept type arguments.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-define-props": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`defineProps\` compiler macro",
                  "url": "https://eslint.vuejs.org/rules/valid-define-props.html",
                },
                "fixable": null,
                "messages": {
                  "definedInBoth": "Props are defined in both \`defineProps\` and \`export default {}\`.",
                  "hasTypeAndArg": "\`defineProps\` has both a type-only props and an argument.",
                  "multiple": "\`defineProps\` has been called multiple times.",
                  "notDefined": "Props are not defined.",
                  "referencingLocally": "\`defineProps\` is referencing locally declared variables.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-model-definition": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "require valid keys in model option",
                  "url": "https://eslint.vuejs.org/rules/valid-model-definition.html",
                },
                "fixable": null,
                "messages": {
                  "invalidKey": "Invalid key '{{name}}' in model option.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-next-tick": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`nextTick\` function calls",
                  "url": "https://eslint.vuejs.org/rules/valid-next-tick.html",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "addAwait": "Add missing \`await\` statement.",
                  "eitherAwaitOrCallback": "Either await the Promise or pass a callback function to \`nextTick\`.",
                  "missingCallbackOrAwait": "Await the Promise returned by \`nextTick\` or pass a callback function.",
                  "shouldBeFunction": "\`nextTick\` is a function.",
                  "tooManyParameters": "\`nextTick\` expects zero or one parameters.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-template-root": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid template root",
                  "url": "https://eslint.vuejs.org/rules/valid-template-root.html",
                },
                "fixable": null,
                "messages": {
                  "emptySrc": "The template root with 'src' attribute is required to be empty.",
                  "noChild": "The template requires child element.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-bind": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-bind\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-bind.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-bind' directives require an attribute value.",
                  "unsupportedModifier": "'v-bind' directives don't support the modifier '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-bind-sync": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "essential",
                  ],
                  "description": "enforce valid \`.sync\` modifier on \`v-bind\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-bind-sync.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedInvalidElement": "'.sync' modifiers aren't supported on <{{name}}> non Vue-components.",
                  "unexpectedNonLhsExpression": "'.sync' modifiers require the attribute value which is valid as LHS.",
                  "unexpectedNullObject": "'.sync' modifier has potential null object property access.",
                  "unexpectedOptionalChaining": "Optional chaining cannot appear in 'v-bind' with '.sync' modifiers.",
                  "unexpectedUpdateIterationVariable": "'.sync' modifiers cannot update the iteration variable '{{varName}}' itself.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-cloak": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-cloak\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-cloak.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedArgument": "'v-cloak' directives require no argument.",
                  "unexpectedModifier": "'v-cloak' directives require no modifier.",
                  "unexpectedValue": "'v-cloak' directives require no attribute value.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-else": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-else\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-else.html",
                },
                "fixable": null,
                "messages": {
                  "missingVIf": "'v-else' directives require being preceded by the element which has a 'v-if' or 'v-else-if' directive.",
                  "unexpectedArgument": "'v-else' directives require no argument.",
                  "unexpectedModifier": "'v-else' directives require no modifier.",
                  "unexpectedValue": "'v-else' directives require no attribute value.",
                  "withVElseIf": "'v-else' and 'v-else-if' directives can't exist on the same element.",
                  "withVIf": "'v-else' and 'v-if' directives can't exist on the same element. You may want 'v-else-if' directives.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-else-if": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-else-if\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-else-if.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-else-if' directives require that attribute value.",
                  "missingVIf": "'v-else-if' directives require being preceded by the element which has a 'v-if' or 'v-else-if' directive.",
                  "unexpectedArgument": "'v-else-if' directives require no argument.",
                  "unexpectedModifier": "'v-else-if' directives require no modifier.",
                  "withVElse": "'v-else-if' and 'v-else' directives can't exist on the same element.",
                  "withVIf": "'v-else-if' and 'v-if' directives can't exist on the same element.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-for": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-for\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-for.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-for' directives require that attribute value.",
                  "invalidAlias": "Invalid alias '{{text}}'.",
                  "invalidEmptyAlias": "Invalid alias ''.",
                  "keyUseFVorVars": "Expected 'v-bind:key' directive to use the variables which are defined by the 'v-for' directive.",
                  "requireKey": "Custom elements in iteration require 'v-bind:key' directives.",
                  "unexpectedArgument": "'v-for' directives require no argument.",
                  "unexpectedExpression": "'v-for' directives require the special syntax '<alias> in <expression>'.",
                  "unexpectedModifier": "'v-for' directives require no modifier.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-html": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-html\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-html.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-html' directives require that attribute value.",
                  "unexpectedArgument": "'v-html' directives require no argument.",
                  "unexpectedModifier": "'v-html' directives require no modifier.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-if": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-if\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-if.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-if' directives require that attribute value.",
                  "unexpectedArgument": "'v-if' directives require no argument.",
                  "unexpectedModifier": "'v-if' directives require no modifier.",
                  "withVElse": "'v-if' and 'v-else' directives can't exist on the same element. You may want 'v-else-if' directives.",
                  "withVElseIf": "'v-if' and 'v-else-if' directives can't exist on the same element.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-is": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "enforce valid \`v-is\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-is.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-is' directives require that attribute value.",
                  "ownerMustBeHTMLElement": "'v-is' directive must be owned by a native HTML element, but '{{name}}' is not.",
                  "unexpectedArgument": "'v-is' directives require no argument.",
                  "unexpectedModifier": "'v-is' directives require no modifier.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-memo": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                  ],
                  "description": "enforce valid \`v-memo\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-memo.html",
                },
                "fixable": null,
                "messages": {
                  "expectedArray": "'v-memo' directives require the attribute value to be an array.",
                  "expectedValue": "'v-memo' directives require that attribute value.",
                  "insideVFor": "'v-memo' directive does not work inside 'v-for'.",
                  "unexpectedArgument": "'v-memo' directives require no argument.",
                  "unexpectedModifier": "'v-memo' directives require no modifier.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-model": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-model\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-model.html",
                },
                "fixable": null,
                "messages": {
                  "missingValue": "'v-model' directives require that attribute value.",
                  "unexpectedArgument": "'v-model' directives require no argument.",
                  "unexpectedInputFile": "'v-model' directives don't support 'file' input type.",
                  "unexpectedInvalidElement": "'v-model' directives aren't supported on <{{name}}> elements.",
                  "unexpectedModifier": "'v-model' directives don't support the modifier '{{name}}'.",
                  "unexpectedNonLhsExpression": "'v-model' directives require the attribute value which is valid as LHS.",
                  "unexpectedNullObject": "'v-model' directive has potential null object property access.",
                  "unexpectedOptionalChaining": "Optional chaining cannot appear in 'v-model' directives.",
                  "unexpectedUpdateIterationVariable": "'v-model' directives cannot update the iteration variable '{{varName}}' itself.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-on": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-on\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-on.html",
                },
                "fixable": null,
                "messages": {
                  "avoidKeyword": "Avoid using JavaScript keyword as "v-on" value: {{value}}.",
                  "expectedValueOrVerb": "'v-on' directives require a value or verb modifier (like 'stop' or 'prevent').",
                  "unsupportedModifier": "'v-on' directives don't support the modifier '{{modifier}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "modifiers": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "valid-v-once": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-once\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-once.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedArgument": "'v-once' directives require no argument.",
                  "unexpectedModifier": "'v-once' directives require no modifier.",
                  "unexpectedValue": "'v-once' directives require no attribute value.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-pre": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-pre\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-pre.html",
                },
                "fixable": null,
                "messages": {
                  "unexpectedArgument": "'v-pre' directives require no argument.",
                  "unexpectedModifier": "'v-pre' directives require no modifier.",
                  "unexpectedValue": "'v-pre' directives require no attribute value.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-show": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-show\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-show.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-show' directives require that attribute value.",
                  "unexpectedArgument": "'v-show' directives require no argument.",
                  "unexpectedModifier": "'v-show' directives require no modifier.",
                  "unexpectedTemplate": "'v-show' directives cannot be put on <template> tags.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "valid-v-slot": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-slot\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-slot.html",
                },
                "fixable": null,
                "messages": {
                  "defaultSlotMustBeOnTemplate": "Default slot must use '<template>' on a custom element when there are other named slots.",
                  "disallowAnyModifier": "'v-slot' directive doesn't support any modifier.",
                  "disallowArgumentUseSlotParams": "Dynamic argument of 'v-slot' directive cannot use that slot parameter.",
                  "disallowDuplicateSlotsOnChildren": "An element cannot have multiple '<template>' elements which are distributed to the same slot.",
                  "disallowDuplicateSlotsOnElement": "An element cannot have multiple 'v-slot' directives.",
                  "namedSlotMustBeOnTemplate": "Named slots must use '<template>' on a custom element.",
                  "ownerMustBeCustomElement": "'v-slot' directive must be owned by a custom element, but '{{name}}' is not.",
                  "requireAttributeValue": "'v-slot' directive on a custom element requires that attribute value.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowModifiers": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "valid-v-text": {
              "create": [Function],
              "meta": {
                "docs": {
                  "categories": [
                    "vue3-essential",
                    "essential",
                  ],
                  "description": "enforce valid \`v-text\` directives",
                  "url": "https://eslint.vuejs.org/rules/valid-v-text.html",
                },
                "fixable": null,
                "messages": {
                  "expectedValue": "'v-text' directives require that attribute value.",
                  "unexpectedArgument": "'v-text' directives require no argument.",
                  "unexpectedModifier": "'v-text' directives require no modifier.",
                },
                "schema": [],
                "type": "problem",
              },
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-vue",
          "version": "9.20.1",
        },
      },
    },
    "processor": {
      "meta": {
        "name": "merged-processor:eslint-plugin-vue+eslint-processor-vue-blocks",
      },
      "postprocess": [Function],
      "preprocess": [Function],
      "supportsAutofix": true,
    },
    "rules": {
      "node/prefer-global/process": "off",
      "vue/attribute-hyphenation": "warn",
      "vue/attributes-order": "warn",
      "vue/block-order": [
        "error",
        {
          "order": [
            "script",
            "template",
            "style",
          ],
        },
      ],
      "vue/comment-directive": "error",
      "vue/component-definition-name-casing": "warn",
      "vue/component-name-in-template-casing": [
        "error",
        "PascalCase",
      ],
      "vue/component-options-name-casing": [
        "error",
        "PascalCase",
      ],
      "vue/component-tags-order": "warn",
      "vue/custom-event-name-casing": [
        "error",
        "camelCase",
      ],
      "vue/define-macros-order": [
        "error",
        {
          "order": [
            "defineOptions",
            "defineProps",
            "defineEmits",
            "defineSlots",
          ],
        },
      ],
      "vue/dot-location": [
        "error",
        "property",
      ],
      "vue/dot-notation": [
        "error",
        {
          "allowKeywords": true,
        },
      ],
      "vue/eqeqeq": [
        "error",
        "smart",
      ],
      "vue/first-attribute-linebreak": "warn",
      "vue/html-closing-bracket-newline": "warn",
      "vue/html-closing-bracket-spacing": "warn",
      "vue/html-end-tags": "warn",
      "vue/html-indent": [
        "error",
        "indent",
      ],
      "vue/html-quotes": [
        "error",
        "double",
      ],
      "vue/html-self-closing": "warn",
      "vue/jsx-uses-vars": "error",
      "vue/max-attributes-per-line": "off",
      "vue/multi-word-component-names": "off",
      "vue/multiline-html-element-content-newline": "warn",
      "vue/mustache-interpolation-spacing": "warn",
      "vue/no-arrow-functions-in-watch": "error",
      "vue/no-async-in-computed-properties": "error",
      "vue/no-child-content": "error",
      "vue/no-computed-properties-in-data": "error",
      "vue/no-deprecated-data-object-declaration": "error",
      "vue/no-deprecated-destroyed-lifecycle": "error",
      "vue/no-deprecated-dollar-listeners-api": "error",
      "vue/no-deprecated-dollar-scopedslots-api": "error",
      "vue/no-deprecated-events-api": "error",
      "vue/no-deprecated-filter": "error",
      "vue/no-deprecated-functional-template": "error",
      "vue/no-deprecated-html-element-is": "error",
      "vue/no-deprecated-inline-template": "error",
      "vue/no-deprecated-props-default-this": "error",
      "vue/no-deprecated-router-link-tag-prop": "error",
      "vue/no-deprecated-scope-attribute": "error",
      "vue/no-deprecated-slot-attribute": "error",
      "vue/no-deprecated-slot-scope-attribute": "error",
      "vue/no-deprecated-v-bind-sync": "error",
      "vue/no-deprecated-v-is": "error",
      "vue/no-deprecated-v-on-native-modifier": "error",
      "vue/no-deprecated-v-on-number-modifiers": "error",
      "vue/no-deprecated-vue-config-keycodes": "error",
      "vue/no-dupe-keys": "off",
      "vue/no-dupe-v-else-if": "error",
      "vue/no-duplicate-attributes": "error",
      "vue/no-empty-pattern": "error",
      "vue/no-export-in-script-setup": "error",
      "vue/no-expose-after-await": "error",
      "vue/no-irregular-whitespace": "error",
      "vue/no-lifecycle-after-await": "error",
      "vue/no-lone-template": "warn",
      "vue/no-loss-of-precision": "error",
      "vue/no-multi-spaces": "warn",
      "vue/no-multiple-slot-args": "warn",
      "vue/no-mutating-props": "error",
      "vue/no-parsing-error": "error",
      "vue/no-ref-as-operand": "error",
      "vue/no-reserved-component-names": "error",
      "vue/no-reserved-keys": "error",
      "vue/no-reserved-props": "error",
      "vue/no-restricted-syntax": [
        "error",
        "DebuggerStatement",
        "LabeledStatement",
        "WithStatement",
      ],
      "vue/no-restricted-v-bind": [
        "error",
        "/^v-/",
      ],
      "vue/no-setup-props-reactivity-loss": "off",
      "vue/no-shared-component-data": "error",
      "vue/no-side-effects-in-computed-properties": "error",
      "vue/no-spaces-around-equal-signs-in-attribute": "warn",
      "vue/no-sparse-arrays": "error",
      "vue/no-template-key": "error",
      "vue/no-template-shadow": "warn",
      "vue/no-textarea-mustache": "error",
      "vue/no-unused-components": "error",
      "vue/no-unused-refs": "error",
      "vue/no-unused-vars": "error",
      "vue/no-use-computed-property-like-method": "error",
      "vue/no-use-v-if-with-v-for": "error",
      "vue/no-useless-template-attributes": "error",
      "vue/no-useless-v-bind": "error",
      "vue/no-v-for-template-key-on-child": "error",
      "vue/no-v-html": "off",
      "vue/no-v-text-v-html-on-component": "error",
      "vue/no-watch-after-await": "error",
      "vue/object-shorthand": [
        "error",
        "always",
        {
          "avoidQuotes": true,
          "ignoreConstructors": false,
        },
      ],
      "vue/one-component-per-file": "warn",
      "vue/order-in-components": "warn",
      "vue/prefer-import-from-vue": "error",
      "vue/prefer-separate-static-class": "error",
      "vue/prefer-template": "error",
      "vue/prop-name-casing": [
        "error",
        "camelCase",
      ],
      "vue/require-component-is": "error",
      "vue/require-default-prop": "off",
      "vue/require-explicit-emits": "warn",
      "vue/require-prop-type-constructor": "error",
      "vue/require-prop-types": "off",
      "vue/require-render-return": "error",
      "vue/require-slots-as-functions": "error",
      "vue/require-toggle-inside-transition": "error",
      "vue/require-v-for-key": "error",
      "vue/require-valid-default-prop": "error",
      "vue/return-in-computed-property": "error",
      "vue/return-in-emits-validator": "error",
      "vue/singleline-html-element-content-newline": "warn",
      "vue/space-infix-ops": "error",
      "vue/space-unary-ops": [
        "error",
        {
          "nonwords": false,
          "words": true,
        },
      ],
      "vue/this-in-template": "warn",
      "vue/use-v-on-exact": "error",
      "vue/v-bind-style": "warn",
      "vue/v-on-event-hyphenation": [
        "warn",
        "always",
        {
          "autofix": true,
        },
      ],
      "vue/v-on-style": "warn",
      "vue/v-slot-style": "warn",
      "vue/valid-attribute-name": "error",
      "vue/valid-define-emits": "error",
      "vue/valid-define-props": "error",
      "vue/valid-next-tick": "error",
      "vue/valid-template-root": "error",
      "vue/valid-v-bind": "error",
      "vue/valid-v-cloak": "error",
      "vue/valid-v-else": "error",
      "vue/valid-v-else-if": "error",
      "vue/valid-v-for": "error",
      "vue/valid-v-html": "error",
      "vue/valid-v-if": "error",
      "vue/valid-v-is": "error",
      "vue/valid-v-memo": "error",
      "vue/valid-v-model": "error",
      "vue/valid-v-on": "error",
      "vue/valid-v-once": "error",
      "vue/valid-v-pre": "error",
      "vue/valid-v-show": "error",
      "vue/valid-v-slot": "error",
      "vue/valid-v-text": "error",
    },
  },
]
`;
